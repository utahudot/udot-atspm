name: Publish NuGet Packages

on:
  release:
    types: [published]

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - Atspm/Application/Application.csproj
          - Atspm/Infrastructure/Infrastructure.csproj
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Validate and clean version
        id: validate_version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          CLEAN_VERSION="${VERSION#v}"
          echo "ðŸ“¦ Cleaned version: $CLEAN_VERSION"
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          if [[ ! $CLEAN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9]+(\.[A-Za-z0-9]+)*)?$ ]]; then
            echo "ERROR: VERSION ($VERSION) is not a valid semantic version (MAJOR.MINOR.PATCH[-PRERELEASE])"
            exit 1
          fi

      - name: Restore dependencies
        run: dotnet restore ${{ matrix.project }}

      - name: Build project
        run: dotnet build ${{ matrix.project }} --configuration Release --verbosity detailed

      - name: Pack NuGet package
        run: |
          VERSION="${{steps.validate_version.outputs.CLEAN_VERSION}}"
          echo "ðŸ“¦ Cleaned version for packaging: $VERSION"
          dotnet pack ${{ matrix.project }} --configuration Release -p:PackageVersion=$VERSION -o ./nupkgs

      - name: Pack NuGet package with release notes
        run: |
          VERSION="${{steps.validate_version.outputs.CLEAN_VERSION}}"
          echo "ðŸ“¦ Cleaned version for packaging: $VERSION"
          RELEASE_NOTES="${{ github.event.release.body }}"
          dotnet pack ${{ matrix.project }} \
          --configuration Release \
          -p:PackageVersion=$VERSION \
          -p:PackageReleaseNotes="$RELEASE_NOTES" \
          -o ./nupkgs

      - name: Push to NuGet
        run: |
          for pkg in ./nupkgs/*.nupkg; do
            echo "Pushing $pkg to NuGet..."
            if dotnet nuget push "$pkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate; then
              echo "Successfully pushed $pkg."
            else
              echo "ERROR: Failed to push $pkg." >&2
              exit 1
            fi
          done
