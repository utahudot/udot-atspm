name: Publish NuGet Packages

on:
  release:
    types: [published]

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.event.release.tag_name }}
    strategy:
      matrix:
        project:
          - Atspm/Application/Application.csproj
          - Atspm/Infrastructure/Infrastructure.csproj
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Validate VERSION format
        run: |
          CLEAN_VERSION="${VERSION#v}"
          echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Cleaned version for packaging: $CLEAN_VERSION"
          if [[ ! $CLEAN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9]+(\.[A-Za-z0-9]+)*)?$ ]]; then
            echo "ERROR: VERSION ($VERSION) is not a valid semantic version (MAJOR.MINOR.PATCH[-PRERELEASE])"
            exit 1
          fi

      # - name: Restore dependencies
      #   run: dotnet restore ${{ matrix.project }}

      # - name: Build project
      #  run: dotnet build ${{ matrix.project }} --configuration Release

      - name: Pack NuGet package
        run: |
          echo "ðŸ“¦ Cleaned version for packaging: $CLEAN_VERSION"
          dotnet pack ${{ matrix.project }} --configuration Release -p:PackageVersion=${{ steps.validate_version.outputs.CLEAN_VERSION }} -o ./nupkgs

      - name: Push to NuGet
        run: |
          for pkg in ./nupkgs/*.nupkg; do
            echo "Pushing $pkg to NuGet..."
            if dotnet nuget push "$pkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}; then
              echo "Successfully pushed $pkg."
            else
              echo "ERROR: Failed to push $pkg." >&2
              exit 1
            fi
          done
