// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System.Collections.Generic;
using System.Net;
using ATSPM.Data.Configuration;
using ATSPM.Data.Enums;
using ATSPM.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ATSPM.Data
{
    public partial class ConfigContext : DbContext
    {
        public ConfigContext()
        {
        }

        public ConfigContext(DbContextOptions<ConfigContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Models.Action> Actions { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<Approach> Approaches { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<ControllerType> ControllerTypes { get; set; }
        public virtual DbSet<DetectionHardware> DetectionHardwares { get; set; }
        public virtual DbSet<DetectionType> DetectionTypes { get; set; }
        public virtual DbSet<Detector> Detectors { get; set; }
        public virtual DbSet<DetectorComment> DetectorComments { get; set; }
        public virtual DbSet<DirectionType> DirectionTypes { get; set; }
        public virtual DbSet<ExternalLink> ExternalLinks { get; set; }
        public virtual DbSet<Faq> Faqs { get; set; }
        public virtual DbSet<Jurisdiction> Jurisdictions { get; set; }
        public virtual DbSet<LaneType> LaneTypes { get; set; }
        public virtual DbSet<MeasuresDefault> MeasuresDefaults { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MetricComment> MetricComments { get; set; }
        public virtual DbSet<MetricType> MetricTypes { get; set; }
        public virtual DbSet<MovementType> MovementTypes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<RoutePhaseDirection> RoutePhaseDirections { get; set; }
        public virtual DbSet<RouteSignal> RouteSignals { get; set; }
        public virtual DbSet<Signal> Signals { get; set; }
        public virtual DbSet<VersionAction> VersionActions { get; set; }
        public virtual DbSet<WatchDogLogEvent> WatchDogLogEvents { get; set; }
        public virtual DbSet<UserArea> UserAreas { get; set; }
        public virtual DbSet<UserJurisdiction> UserJurisdictions { get; set; }
        public virtual DbSet<UserRegion> UserRegions { get; set; }

        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);
            configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
            configurationBuilder.Properties<IPAddress>().HaveConversion<string>();
            configurationBuilder.Properties<ActionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<AgencyTypes>().HaveConversion<int>();
            configurationBuilder.Properties<DetectionHardwareTypes>().HaveConversion<int>();
            configurationBuilder.Properties<SignaVersionActions>().HaveConversion<int>();
            configurationBuilder.Properties<DirectionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<LaneTypes>().HaveConversion<int>();
            configurationBuilder.Properties<MovementTypes>().HaveConversion<int>();
            configurationBuilder.Properties<DetectionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<ApplicationTypes>().HaveConversion<int>();
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new ActionConfiguration());
            modelBuilder.ApplyConfiguration(new ActionLogConfiguration());
            modelBuilder.ApplyConfiguration(new AgencyConfiguration());
            modelBuilder.ApplyConfiguration(new ApplicationConfiguration());
            modelBuilder.ApplyConfiguration(new ApplicationSettingConfiguration());
            modelBuilder.ApplyConfiguration(new ApproachConfiguration());
            modelBuilder.ApplyConfiguration(new AreaConfiguration());
            modelBuilder.ApplyConfiguration(new ControllerTypeConfiguration());
            modelBuilder.ApplyConfiguration(new DetectionHardwareConfiguration());
            modelBuilder.ApplyConfiguration(new DetectionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new DetectorConfiguration());
            modelBuilder.ApplyConfiguration(new DetectorCommentConfiguration());
            modelBuilder.ApplyConfiguration(new DirectionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ExternalLinkConfiguration());
            modelBuilder.ApplyConfiguration(new FaqConfiguration());
            modelBuilder.ApplyConfiguration(new JurisdictionConfiguration());
            modelBuilder.ApplyConfiguration(new LaneTypeConfiguration());
            //modelBuilder.ApplyConfiguration(new MeasuresDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new MenuConfiguration());
            modelBuilder.ApplyConfiguration(new MetricCommentConfiguration());
            modelBuilder.ApplyConfiguration(new MetricTypeConfiguration());
            modelBuilder.ApplyConfiguration(new MovementTypeConfiguration());
            modelBuilder.ApplyConfiguration(new RegionConfiguration());
            modelBuilder.ApplyConfiguration(new RouteConfiguration());
            modelBuilder.ApplyConfiguration(new RoutePhaseDirectionConfiguration());
            modelBuilder.ApplyConfiguration(new RouteSignalConfiguration());
            modelBuilder.ApplyConfiguration(new SignalConfiguration());
            modelBuilder.ApplyConfiguration(new VersionActionConfiguration());
            modelBuilder.ApplyConfiguration(new UserAreaConfiguration());
            modelBuilder.ApplyConfiguration(new UserRegionConfiguration());
            modelBuilder.ApplyConfiguration(new UserJurisdictionConfiguration());

            OnModelCreatingPartial(modelBuilder);
            //TODO: call based class when using IdentityContext
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}