// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ATSPM.Data.Configuration;
using ATSPM.Data.Enums;
using ATSPM.Data.Models;
using Microsoft.EntityFrameworkCore;
using System.Net;

namespace ATSPM.Data
{
    /// <summary>
    /// Atspm configuration database context
    /// </summary>
    public partial class ConfigContext : DbContext
    {
        /// <inheritdoc/>
        public ConfigContext()
        {
        }

        /// <inheritdoc/>
        public ConfigContext(DbContextOptions<ConfigContext> options): base(options) {}

        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<Approach> Approaches { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<ControllerType> ControllerTypes { get; set; }
        public virtual DbSet<DetectionType> DetectionTypes { get; set; }
        public virtual DbSet<Detector> Detectors { get; set; }
        public virtual DbSet<DetectorComment> DetectorComments { get; set; }
        public virtual DbSet<DirectionType> DirectionTypes { get; set; }
        public virtual DbSet<ExternalLink> ExternalLinks { get; set; }
        public virtual DbSet<Faq> Faqs { get; set; }
        public virtual DbSet<Jurisdiction> Jurisdictions { get; set; }
        public virtual DbSet<MeasureOption> MeasureOptions { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MeasureComment> MeasureComments { get; set; }
        public virtual DbSet<MeasureType> MeasureType { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<RouteSignal> RouteSignals { get; set; }
        public virtual DbSet<Signal> Signals { get; set; }

        /// <inheritdoc/>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);
            configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
            configurationBuilder.Properties<IPAddress>().HaveConversion<string>();
            configurationBuilder.Properties<DetectionHardwareTypes>().HaveConversion<int>();
            configurationBuilder.Properties<SignalVersionActions>().HaveConversion<int>();
            configurationBuilder.Properties<DirectionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<LaneTypes>().HaveConversion<int>();
            configurationBuilder.Properties<MovementTypes>().HaveConversion<int>();
            configurationBuilder.Properties<DetectionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<ApplicationTypes>().HaveConversion<int>();
            configurationBuilder.Properties<TransportProtocols>().HaveConversion<string>();
        }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new ApplicationConfiguration());
            modelBuilder.ApplyConfiguration(new ApplicationSettingConfiguration());
            modelBuilder.ApplyConfiguration(new ApproachConfiguration());
            modelBuilder.ApplyConfiguration(new AreaConfiguration());
            modelBuilder.ApplyConfiguration(new ControllerTypeConfiguration());
            modelBuilder.ApplyConfiguration(new DetectionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new DetectorConfiguration());
            modelBuilder.ApplyConfiguration(new DetectorCommentConfiguration());
            modelBuilder.ApplyConfiguration(new DirectionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ExternalLinkConfiguration());
            modelBuilder.ApplyConfiguration(new FaqConfiguration());
            modelBuilder.ApplyConfiguration(new JurisdictionConfiguration());
            modelBuilder.ApplyConfiguration(new MenuConfiguration());
            modelBuilder.ApplyConfiguration(new MeasureCommentConfiguration());
            modelBuilder.ApplyConfiguration(new MeasureOptionsConfiguration());
            modelBuilder.ApplyConfiguration(new MeasureTypeConfiguration());
            modelBuilder.ApplyConfiguration(new RegionConfiguration());
            modelBuilder.ApplyConfiguration(new RouteConfiguration());
            modelBuilder.ApplyConfiguration(new RouteSignalConfiguration());
            modelBuilder.ApplyConfiguration(new SignalConfiguration());

            OnModelCreatingPartial(modelBuilder);
            //TODO: call based class when using IdentityContext
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}