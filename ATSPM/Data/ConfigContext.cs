// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ATSPM.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ATSPM.Data
{
    public partial class ConfigContext : DbContext
    {
        public ConfigContext()
        {
        }

        public ConfigContext(DbContextOptions<ConfigContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActionLogs> ActionLogs { get; set; }
        public virtual DbSet<Actions> Actions { get; set; }
        public virtual DbSet<Agencies> Agencies { get; set; }
        public virtual DbSet<ApplicationSettings> ApplicationSettings { get; set; }
        public virtual DbSet<Applications> Applications { get; set; }
        public virtual DbSet<Approaches> Approaches { get; set; }
        public virtual DbSet<Areas> Areas { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<ControllerTypes> ControllerTypes { get; set; }
        public virtual DbSet<DatabaseArchiveExcludedSignals> DatabaseArchiveExcludedSignals { get; set; }
        public virtual DbSet<DetectionHardwares> DetectionHardwares { get; set; }
        public virtual DbSet<DetectionTypes> DetectionTypes { get; set; }
        public virtual DbSet<DetectorComments> DetectorComments { get; set; }
        public virtual DbSet<Detectors> Detectors { get; set; }
        public virtual DbSet<DirectionTypes> DirectionTypes { get; set; }
        public virtual DbSet<ExternalLinks> ExternalLinks { get; set; }
        public virtual DbSet<FAQs> FAQs { get; set; }
        public virtual DbSet<Jurisdictions> Jurisdictions { get; set; }
        public virtual DbSet<LaneTypes> LaneTypes { get; set; }
        public virtual DbSet<MeasuresDefaults> MeasuresDefaults { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<MetricComments> MetricComments { get; set; }
        public virtual DbSet<MetricTypes> MetricTypes { get; set; }
        public virtual DbSet<MetricsFilterTypes> MetricsFilterTypes { get; set; }
        public virtual DbSet<MovementTypes> MovementTypes { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<RoutePhaseDirections> RoutePhaseDirections { get; set; }
        public virtual DbSet<RouteSignals> RouteSignals { get; set; }
        public virtual DbSet<Routes> Routes { get; set; }
        public virtual DbSet<SignalToAggregates> SignalToAggregates { get; set; }
        public virtual DbSet<Signals> Signals { get; set; }
        public virtual DbSet<VersionActions> VersionActions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ActionLogs>(entity =>
            {
                entity.HasKey(e => e.ActionLogID)
                    .HasName("PK_dbo.ActionLogs");

                entity.HasIndex(e => e.AgencyID, "IX_AgencyID");

                entity.Property(e => e.Comment).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SignalID)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.Agency)
                    .WithMany(p => p.ActionLogs)
                    .HasForeignKey(d => d.AgencyID)
                    .HasConstraintName("FK_dbo.ActionLogs_dbo.Agencies_AgencyID");

                entity.HasMany(d => d.Action_Action)
                    .WithMany(p => p.ActionLog_ActionLog)
                    .UsingEntity<Dictionary<string, object>>(
                        "ActionLogActions",
                        l => l.HasOne<Actions>().WithMany().HasForeignKey("Action_ActionID").HasConstraintName("FK_dbo.ActionLogActions_dbo.Actions_Action_ActionID"),
                        r => r.HasOne<ActionLogs>().WithMany().HasForeignKey("ActionLog_ActionLogID").HasConstraintName("FK_dbo.ActionLogActions_dbo.ActionLogs_ActionLog_ActionLogID"),
                        j =>
                        {
                            j.HasKey("ActionLog_ActionLogID", "Action_ActionID").HasName("PK_dbo.ActionLogActions");

                            j.ToTable("ActionLogActions");

                            j.HasIndex(new[] { "ActionLog_ActionLogID" }, "IX_ActionLog_ActionLogID");

                            j.HasIndex(new[] { "Action_ActionID" }, "IX_Action_ActionID");
                        });

                entity.HasMany(d => d.MetricType_Metric)
                    .WithMany(p => p.ActionLog_ActionLog)
                    .UsingEntity<Dictionary<string, object>>(
                        "ActionLogMetricTypes",
                        l => l.HasOne<MetricTypes>().WithMany().HasForeignKey("MetricType_MetricID").HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.MetricTypes_MetricType_MetricID"),
                        r => r.HasOne<ActionLogs>().WithMany().HasForeignKey("ActionLog_ActionLogID").HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.ActionLogs_ActionLog_ActionLogID"),
                        j =>
                        {
                            j.HasKey("ActionLog_ActionLogID", "MetricType_MetricID").HasName("PK_dbo.ActionLogMetricTypes");

                            j.ToTable("ActionLogMetricTypes");

                            j.HasIndex(new[] { "ActionLog_ActionLogID" }, "IX_ActionLog_ActionLogID");

                            j.HasIndex(new[] { "MetricType_MetricID" }, "IX_MetricType_MetricID");
                        });
            });

            modelBuilder.Entity<Actions>(entity =>
            {
                entity.HasKey(e => e.ActionID)
                    .HasName("PK_dbo.Actions");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Agencies>(entity =>
            {
                entity.HasKey(e => e.AgencyID)
                    .HasName("PK_dbo.Agencies");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<ApplicationSettings>(entity =>
            {
                entity.HasIndex(e => e.ApplicationID, "IX_ApplicationID");

                entity.Property(e => e.Discriminator)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationSettings)
                    .HasForeignKey(d => d.ApplicationID)
                    .HasConstraintName("FK_dbo.ApplicationSettings_dbo.Applications_ApplicationID");
            });

            modelBuilder.Entity<Approaches>(entity =>
            {
                entity.HasKey(e => e.ApproachID)
                    .HasName("PK_dbo.Approaches");

                entity.HasIndex(e => e.DirectionTypeID, "IX_DirectionTypeID");

                entity.HasIndex(e => e.VersionID, "IX_VersionID");

                entity.HasOne(d => d.DirectionType)
                    .WithMany(p => p.Approaches)
                    .HasForeignKey(d => d.DirectionTypeID)
                    .HasConstraintName("FK_dbo.Approaches_dbo.DirectionTypes_DirectionTypeID");
            });

            modelBuilder.Entity<Areas>(entity =>
            {
                entity.Property(e => e.AreaName).HasMaxLength(50);

                entity.HasMany(d => d.Signal_Version)
                    .WithMany(p => p.Area)
                    .UsingEntity<Dictionary<string, object>>(
                        "AreaSignals",
                        l => l.HasOne<Signals>().WithMany().HasForeignKey("Signal_VersionID").HasConstraintName("FK_dbo.AreaSignals_dbo.Signals_Signal_VersionID"),
                        r => r.HasOne<Areas>().WithMany().HasForeignKey("Area_Id").HasConstraintName("FK_dbo.AreaSignals_dbo.Areas_Area_Id"),
                        j =>
                        {
                            j.HasKey("Area_Id", "Signal_VersionID").HasName("PK_dbo.AreaSignals");

                            j.ToTable("AreaSignals");

                            j.HasIndex(new[] { "Area_Id" }, "IX_Area_Id");

                            j.HasIndex(new[] { "Signal_VersionID" }, "IX_Signal_VersionID");
                        });
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.Comment1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Comment");

                entity.Property(e => e.Entity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<ControllerTypes>(entity =>
            {
                entity.HasKey(e => e.ControllerTypeID)
                    .HasName("PK_dbo.ControllerTypes");

                entity.Property(e => e.ControllerTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FTPDirectory).IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DatabaseArchiveExcludedSignals>(entity =>
            {
                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<DetectionHardwares>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<DetectionTypes>(entity =>
            {
                entity.HasKey(e => e.DetectionTypeID)
                    .HasName("PK_dbo.DetectionTypes");

                entity.Property(e => e.DetectionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description).IsRequired();

                entity.HasMany(d => d.MetricType_Metric)
                    .WithMany(p => p.DetectionType_DetectionType)
                    .UsingEntity<Dictionary<string, object>>(
                        "DetectionTypeMetricTypes",
                        l => l.HasOne<MetricTypes>().WithMany().HasForeignKey("MetricType_MetricID").HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.MetricTypes_MetricType_MetricID"),
                        r => r.HasOne<DetectionTypes>().WithMany().HasForeignKey("DetectionType_DetectionTypeID").HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.DetectionTypes_DetectionType_DetectionTypeID"),
                        j =>
                        {
                            j.HasKey("DetectionType_DetectionTypeID", "MetricType_MetricID").HasName("PK_dbo.DetectionTypeMetricTypes");

                            j.ToTable("DetectionTypeMetricTypes");

                            j.HasIndex(new[] { "DetectionType_DetectionTypeID" }, "IX_DetectionType_DetectionTypeID");

                            j.HasIndex(new[] { "MetricType_MetricID" }, "IX_MetricType_MetricID");
                        });
            });

            modelBuilder.Entity<DetectorComments>(entity =>
            {
                entity.HasKey(e => e.CommentID)
                    .HasName("PK_dbo.DetectorComments");

                entity.HasIndex(e => e.ID, "IX_ID");

                entity.Property(e => e.CommentText).IsRequired();

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.IDNavigation)
                    .WithMany(p => p.DetectorComments)
                    .HasForeignKey(d => d.ID)
                    .HasConstraintName("FK_dbo.DetectorComments_dbo.Detectors_ID");
            });

            modelBuilder.Entity<Detectors>(entity =>
            {
                entity.HasIndex(e => e.ApproachID, "IX_ApproachID");

                entity.HasIndex(e => e.DetectionHardwareID, "IX_DetectionHardwareID");

                entity.HasIndex(e => e.LaneTypeID, "IX_LaneTypeID");

                entity.HasIndex(e => e.MovementTypeID, "IX_MovementTypeID");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateDisabled).HasColumnType("datetime");

                entity.Property(e => e.DetectorID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Approach)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.ApproachID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.Approaches_ApproachID");

                entity.HasOne(d => d.DetectionHardware)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.DetectionHardwareID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.DetectionHardwares_DetectionHardwareID");

                entity.HasOne(d => d.LaneType)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.LaneTypeID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.LaneTypes_LaneTypeID");

                entity.HasOne(d => d.MovementType)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.MovementTypeID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.MovementTypes_MovementTypeID");

                entity.HasMany(d => d.DetectionType)
                    .WithMany(p => p.ID)
                    .UsingEntity<Dictionary<string, object>>(
                        "DetectionTypeDetector",
                        l => l.HasOne<DetectionTypes>().WithMany().HasForeignKey("DetectionTypeID").HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.DetectionTypes_DetectionTypeID"),
                        r => r.HasOne<Detectors>().WithMany().HasForeignKey("ID").HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.Detectors_ID"),
                        j =>
                        {
                            j.HasKey("ID", "DetectionTypeID").HasName("PK_dbo.DetectionTypeDetector");

                            j.ToTable("DetectionTypeDetector");

                            j.HasIndex(new[] { "DetectionTypeID" }, "IX_DetectionTypeID");

                            j.HasIndex(new[] { "ID" }, "IX_ID");
                        });
            });

            modelBuilder.Entity<DirectionTypes>(entity =>
            {
                entity.HasKey(e => e.DirectionTypeID)
                    .HasName("PK_dbo.DirectionTypes");

                entity.Property(e => e.DirectionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Abbreviation).HasMaxLength(5);

                entity.Property(e => e.Description).HasMaxLength(30);
            });

            modelBuilder.Entity<ExternalLinks>(entity =>
            {
                entity.HasKey(e => e.ExternalLinkID)
                    .HasName("PK_dbo.ExternalLinks");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Url).IsRequired();
            });

            modelBuilder.Entity<FAQs>(entity =>
            {
                entity.HasKey(e => e.FAQID)
                    .HasName("PK_dbo.FAQs");

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.Header).IsRequired();
            });

            modelBuilder.Entity<Jurisdictions>(entity =>
            {
                entity.Property(e => e.CountyParish).HasMaxLength(50);

                entity.Property(e => e.JurisdictionName).HasMaxLength(50);

                entity.Property(e => e.MPO).HasMaxLength(50);

                entity.Property(e => e.OtherPartners).HasMaxLength(50);
            });

            modelBuilder.Entity<LaneTypes>(entity =>
            {
                entity.HasKey(e => e.LaneTypeID)
                    .HasName("PK_dbo.LaneTypes");

                entity.Property(e => e.LaneTypeID).ValueGeneratedNever();

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<MeasuresDefaults>(entity =>
            {
                entity.HasKey(e => new { e.Measure, e.OptionName })
                    .HasName("PK_dbo.MeasuresDefaults");

                entity.Property(e => e.Measure).HasMaxLength(128);

                entity.Property(e => e.OptionName).HasMaxLength(128);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.Property(e => e.MenuId).ValueGeneratedNever();

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Application)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Controller)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MetricComments>(entity =>
            {
                entity.HasKey(e => e.CommentID)
                    .HasName("PK_dbo.MetricComments");

                entity.HasIndex(e => e.VersionID, "IX_VersionID");

                entity.Property(e => e.CommentText).IsRequired();

                entity.Property(e => e.SignalID).HasMaxLength(10);

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.HasMany(d => d.MetricType_Metric)
                    .WithMany(p => p.MetricComment_Comment)
                    .UsingEntity<Dictionary<string, object>>(
                        "MetricCommentMetricTypes",
                        l => l.HasOne<MetricTypes>().WithMany().HasForeignKey("MetricType_MetricID").HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricTypes_MetricType_MetricID"),
                        r => r.HasOne<MetricComments>().WithMany().HasForeignKey("MetricComment_CommentID").HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricComments_MetricComment_CommentID"),
                        j =>
                        {
                            j.HasKey("MetricComment_CommentID", "MetricType_MetricID").HasName("PK_dbo.MetricCommentMetricTypes");

                            j.ToTable("MetricCommentMetricTypes");

                            j.HasIndex(new[] { "MetricComment_CommentID" }, "IX_MetricComment_CommentID");

                            j.HasIndex(new[] { "MetricType_MetricID" }, "IX_MetricType_MetricID");
                        });
            });

            modelBuilder.Entity<MetricTypes>(entity =>
            {
                entity.HasKey(e => e.MetricID)
                    .HasName("PK_dbo.MetricTypes");

                entity.Property(e => e.MetricID).ValueGeneratedNever();

                entity.Property(e => e.Abbreviation).IsRequired();

                entity.Property(e => e.ChartName).IsRequired();
            });

            modelBuilder.Entity<MetricsFilterTypes>(entity =>
            {
                entity.HasKey(e => e.FilterID)
                    .HasName("PK_dbo.MetricsFilterTypes");

                entity.Property(e => e.FilterName).IsRequired();
            });

            modelBuilder.Entity<MovementTypes>(entity =>
            {
                entity.HasKey(e => e.MovementTypeID)
                    .HasName("PK_dbo.MovementTypes");

                entity.Property(e => e.MovementTypeID).ValueGeneratedNever();

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<RoutePhaseDirections>(entity =>
            {
                entity.HasIndex(e => e.DirectionTypeId, "IX_DirectionTypeId");

                entity.HasIndex(e => e.RouteSignalId, "IX_RouteSignalId");

                entity.HasOne(d => d.DirectionType)
                    .WithMany(p => p.RoutePhaseDirections)
                    .HasForeignKey(d => d.DirectionTypeId)
                    .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.DirectionTypes_DirectionTypeId");

                entity.HasOne(d => d.RouteSignal)
                    .WithMany(p => p.RoutePhaseDirections)
                    .HasForeignKey(d => d.RouteSignalId)
                    .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.RouteSignals_RouteSignalId");
            });

            modelBuilder.Entity<RouteSignals>(entity =>
            {
                entity.HasIndex(e => e.RouteId, "IX_RouteId");

                entity.Property(e => e.SignalId)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.RouteSignals)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_dbo.RouteSignals_dbo.Routes_RouteId");
            });

            modelBuilder.Entity<Routes>(entity =>
            {
                entity.Property(e => e.RouteName).IsRequired();
            });

            modelBuilder.Entity<SignalToAggregates>(entity =>
            {
                entity.HasKey(e => e.SignalID)
                    .HasName("PK_dbo.SignalToAggregates");

                entity.Property(e => e.SignalID).HasMaxLength(10);
            });

            modelBuilder.Entity<Signals>(entity =>
            {
                entity.HasKey(e => e.VersionID)
                    .HasName("PK_dbo.Signals");

                entity.HasIndex(e => e.ControllerTypeID, "IX_ControllerTypeID");

                entity.HasIndex(e => e.JurisdictionId, "IX_JurisdictionId");

                entity.HasIndex(e => e.RegionID, "IX_RegionID");

                entity.HasIndex(e => e.VersionActionId, "IX_VersionActionId");

                entity.Property(e => e.IPAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JurisdictionId).HasDefaultValueSql("((1))");

                entity.Property(e => e.Latitude)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasDefaultValueSql("('Initial')");

                entity.Property(e => e.PrimaryName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecondaryName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SignalID)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.VersionActionId).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.ControllerType)
                    .WithMany(p => p.Signals)
                    .HasForeignKey(d => d.ControllerTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Signals_dbo.ControllerTypes_ControllerTypeID");

                entity.HasOne(d => d.Jurisdiction)
                    .WithMany(p => p.Signals)
                    .HasForeignKey(d => d.JurisdictionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Signals_dbo.Jurisdictions_JurisdictionId");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Signals)
                    .HasForeignKey(d => d.RegionID)
                    .HasConstraintName("FK_dbo.Signals_dbo.Region_RegionID");
            });

            modelBuilder.Entity<VersionActions>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}