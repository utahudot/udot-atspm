// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ATSPM.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ATSPM.Data
{
    public partial class ConfigContext : DbContext
    {
        public ConfigContext()
        {
        }

        public ConfigContext(DbContextOptions<ConfigContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Models.Action> Actions { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<ActionLogAction> ActionLogActions { get; set; }
        public virtual DbSet<ActionLogMetricType> ActionLogMetricTypes { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<Approach> Approaches { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<AreaSignal> AreaSignals { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<ControllerType> ControllerTypes { get; set; }
        public virtual DbSet<DatabaseArchiveExcludedSignal> DatabaseArchiveExcludedSignals { get; set; }
        public virtual DbSet<DetectionHardware> DetectionHardwares { get; set; }
        public virtual DbSet<DetectionType> DetectionTypes { get; set; }
        public virtual DbSet<DetectionTypeDetector> DetectionTypeDetectors { get; set; }
        public virtual DbSet<DetectionTypeMetricType> DetectionTypeMetricTypes { get; set; }
        public virtual DbSet<Detector> Detectors { get; set; }
        public virtual DbSet<DetectorComment> DetectorComments { get; set; }
        public virtual DbSet<DirectionType> DirectionTypes { get; set; }
        public virtual DbSet<ExternalLink> ExternalLinks { get; set; }
        public virtual DbSet<Faq> Faqs { get; set; }
        public virtual DbSet<Jurisdiction> Jurisdictions { get; set; }
        public virtual DbSet<LaneType> LaneTypes { get; set; }
        public virtual DbSet<MeasuresDefault> MeasuresDefaults { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MetricComment> MetricComments { get; set; }
        public virtual DbSet<MetricCommentMetricType> MetricCommentMetricTypes { get; set; }
        public virtual DbSet<MetricType> MetricTypes { get; set; }
        public virtual DbSet<MetricsFilterType> MetricsFilterTypes { get; set; }
        public virtual DbSet<MovementType> MovementTypes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<RoutePhaseDirection> RoutePhaseDirections { get; set; }
        public virtual DbSet<RouteSignal> RouteSignals { get; set; }
        public virtual DbSet<Signal> Signals { get; set; }
        public virtual DbSet<SignalToAggregate> SignalToAggregates { get; set; }
        public virtual DbSet<SpmwatchDogErrorEvent> SpmwatchDogErrorEvents { get; set; }
        public virtual DbSet<VersionAction> VersionActions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Models.Action>(entity =>
            {
                entity.Property(e => e.ActionID).HasColumnName("ActionID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ActionLog>(entity =>
            {
                entity.HasIndex(e => e.AgencyID, "IX_AgencyID");

                entity.Property(e => e.ActionLogID).HasColumnName("ActionLogID");

                entity.Property(e => e.AgencyID).HasColumnName("AgencyID");

                entity.Property(e => e.Comment).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SignalID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("SignalID");

                entity.HasOne(d => d.Agency)
                    .WithMany(p => p.ActionLogs)
                    .HasForeignKey(d => d.AgencyID)
                    .HasConstraintName("FK_dbo.ActionLogs_dbo.Agencies_AgencyID");
            });

            modelBuilder.Entity<ActionLogAction>(entity =>
            {
                entity.HasKey(e => new { e.ActionLogActionLogID, e.ActionActionID })
                    .HasName("PK_dbo.ActionLogActions");

                entity.HasIndex(e => e.ActionLogActionLogID, "IX_ActionLog_ActionLogID");

                entity.HasIndex(e => e.ActionActionID, "IX_Action_ActionID");

                entity.Property(e => e.ActionLogActionLogID).HasColumnName("ActionLog_ActionLogID");

                entity.Property(e => e.ActionActionID).HasColumnName("Action_ActionID");

                entity.HasOne(d => d.ActionAction)
                    .WithMany(p => p.ActionLogActions)
                    .HasForeignKey(d => d.ActionActionID)
                    .HasConstraintName("FK_dbo.ActionLogActions_dbo.Actions_Action_ActionID");

                entity.HasOne(d => d.ActionLogActionLog)
                    .WithMany(p => p.ActionLogActions)
                    .HasForeignKey(d => d.ActionLogActionLogID)
                    .HasConstraintName("FK_dbo.ActionLogActions_dbo.ActionLogs_ActionLog_ActionLogID");
            });

            modelBuilder.Entity<ActionLogMetricType>(entity =>
            {
                entity.HasKey(e => new { e.ActionLogActionLogID, e.MetricTypeMetricID })
                    .HasName("PK_dbo.ActionLogMetricTypes");

                entity.HasIndex(e => e.ActionLogActionLogID, "IX_ActionLog_ActionLogID");

                entity.HasIndex(e => e.MetricTypeMetricID, "IX_MetricType_MetricID");

                entity.Property(e => e.ActionLogActionLogID).HasColumnName("ActionLog_ActionLogID");

                entity.Property(e => e.MetricTypeMetricID).HasColumnName("MetricType_MetricID");

                entity.HasOne(d => d.ActionLogActionLog)
                    .WithMany(p => p.ActionLogMetricTypes)
                    .HasForeignKey(d => d.ActionLogActionLogID)
                    .HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.ActionLogs_ActionLog_ActionLogID");

                entity.HasOne(d => d.MetricTypeMetric)
                    .WithMany(p => p.ActionLogMetricTypes)
                    .HasForeignKey(d => d.MetricTypeMetricID)
                    .HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.MetricTypes_MetricType_MetricID");
            });

            modelBuilder.Entity<Agency>(entity =>
            {
                entity.Property(e => e.AgencyID).HasColumnName("AgencyID");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.Property(e => e.ID).HasColumnName("ID");
            });

            modelBuilder.Entity<ApplicationSetting>(entity =>
            {
                entity.HasIndex(e => e.ApplicationID, "IX_ApplicationID");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.ApplicationID).HasColumnName("ApplicationID");

                entity.Property(e => e.Discriminator)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.PreviousDayPmpeakEnd).HasColumnName("PreviousDayPMPeakEnd");

                entity.Property(e => e.PreviousDayPmpeakStart).HasColumnName("PreviousDayPMPeakStart");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationSettings)
                    .HasForeignKey(d => d.ApplicationID)
                    .HasConstraintName("FK_dbo.ApplicationSettings_dbo.Applications_ApplicationID");
            });

            modelBuilder.Entity<Approach>(entity =>
            {
                entity.HasIndex(e => e.DirectionTypeID, "IX_DirectionTypeID");

                entity.HasIndex(e => e.VersionID, "IX_VersionID");

                entity.Property(e => e.ApproachID).HasColumnName("ApproachID");

                entity.Property(e => e.DirectionTypeID).HasColumnName("DirectionTypeID");

                entity.Property(e => e.Mph).HasColumnName("MPH");

                entity.Property(e => e.SignalID).HasColumnName("SignalID");

                entity.Property(e => e.VersionID).HasColumnName("VersionID");

                entity.HasOne(d => d.DirectionType)
                    .WithMany(p => p.Approaches)
                    .HasForeignKey(d => d.DirectionTypeID)
                    .HasConstraintName("FK_dbo.Approaches_dbo.DirectionTypes_DirectionTypeID");
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.Property(e => e.AreaName).HasMaxLength(50);
            });

            modelBuilder.Entity<AreaSignal>(entity =>
            {
                entity.HasKey(e => new { e.AreaID, e.SignalVersionID })
                    .HasName("PK_dbo.AreaSignals");

                entity.HasIndex(e => e.AreaID, "IX_Area_ID");

                entity.HasIndex(e => e.SignalVersionID, "IX_Signal_VersionID");

                entity.Property(e => e.AreaID).HasColumnName("Area_ID");

                entity.Property(e => e.SignalVersionID).HasColumnName("Signal_VersionID");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AreaSignals)
                    .HasForeignKey(d => d.AreaID)
                    .HasConstraintName("FK_dbo.AreaSignals_dbo.Areas_Area_ID");

                //entity.HasOne(d => d.SignalVersion)
                //    .WithMany(p => p.AreaSignals)
                //    .HasForeignKey(d => d.SignalVersionID)
                //    .HasConstraintName("FK_dbo.AreaSignals_dbo.Signals_Signal_VersionID");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.ToTable("Comment");

                entity.Property(e => e.CommentID).HasColumnName("CommentID");

                entity.Property(e => e.Comment1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Comment");

                entity.Property(e => e.Entity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<ControllerType>(entity =>
            {
                entity.Property(e => e.ControllerTypeID)
                    .ValueGeneratedNever()
                    .HasColumnName("ControllerTypeID");

                entity.Property(e => e.ActiveFtp).HasColumnName("ActiveFTP");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ftpdirectory)
                    .IsUnicode(false)
                    .HasColumnName("FTPDirectory");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Snmpport).HasColumnName("SNMPPort");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DatabaseArchiveExcludedSignal>(entity =>
            {
                entity.Property(e => e.SignalID).HasMaxLength(10);
            });

            modelBuilder.Entity<DetectionHardware>(entity =>
            {
                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<DetectionType>(entity =>
            {
                entity.Property(e => e.DetectionTypeID)
                    .ValueGeneratedNever()
                    .HasColumnName("DetectionTypeID");

                entity.Property(e => e.Description).IsRequired();
            });

            modelBuilder.Entity<DetectionTypeDetector>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.DetectionTypeID })
                    .HasName("PK_dbo.DetectionTypeDetector");

                entity.ToTable("DetectionTypeDetector");

                entity.HasIndex(e => e.DetectionTypeID, "IX_DetectionTypeID");

                entity.HasIndex(e => e.ID, "IX_ID");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.DetectionTypeID).HasColumnName("DetectionTypeID");

                entity.HasOne(d => d.DetectionType)
                    .WithMany(p => p.DetectionTypeDetectors)
                    .HasForeignKey(d => d.DetectionTypeID)
                    .HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.DetectionTypes_DetectionTypeID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.DetectionTypeDetectors)
                    .HasForeignKey(d => d.ID)
                    .HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.Detectors_ID");
            });

            modelBuilder.Entity<DetectionTypeMetricType>(entity =>
            {
                entity.HasKey(e => new { e.DetectionTypeDetectionTypeID, e.MetricTypeMetricID })
                    .HasName("PK_dbo.DetectionTypeMetricTypes");

                entity.HasIndex(e => e.DetectionTypeDetectionTypeID, "IX_DetectionType_DetectionTypeID");

                entity.HasIndex(e => e.MetricTypeMetricID, "IX_MetricType_MetricID");

                entity.Property(e => e.DetectionTypeDetectionTypeID).HasColumnName("DetectionType_DetectionTypeID");

                entity.Property(e => e.MetricTypeMetricID).HasColumnName("MetricType_MetricID");

                entity.HasOne(d => d.DetectionTypeDetectionType)
                    .WithMany(p => p.DetectionTypeMetricTypes)
                    .HasForeignKey(d => d.DetectionTypeDetectionTypeID)
                    .HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.DetectionTypes_DetectionType_DetectionTypeID");

                entity.HasOne(d => d.MetricTypeMetric)
                    .WithMany(p => p.DetectionTypeMetricTypes)
                    .HasForeignKey(d => d.MetricTypeMetricID)
                    .HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.MetricTypes_MetricType_MetricID");
            });

            modelBuilder.Entity<Detector>(entity =>
            {
                entity.HasIndex(e => e.ApproachID, "IX_ApproachID");

                entity.HasIndex(e => e.DetectionHardwareID, "IX_DetectionHardwareID");

                entity.HasIndex(e => e.LaneTypeID, "IX_LaneTypeID");

                entity.HasIndex(e => e.MovementTypeID, "IX_MovementTypeID");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.ApproachID).HasColumnName("ApproachID");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateDisabled).HasColumnType("datetime");

                entity.Property(e => e.DetectionHardwareID).HasColumnName("DetectionHardwareID");

                entity.Property(e => e.DetectorID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DetectorID");

                entity.Property(e => e.LaneTypeID).HasColumnName("LaneTypeID");

                entity.Property(e => e.MovementTypeID).HasColumnName("MovementTypeID");

                entity.HasOne(d => d.Approach)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.ApproachID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.Approaches_ApproachID");

                entity.HasOne(d => d.DetectionHardware)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.DetectionHardwareID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.DetectionHardwares_DetectionHardwareID");

                entity.HasOne(d => d.LaneType)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.LaneTypeID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.LaneTypes_LaneTypeID");

                entity.HasOne(d => d.MovementType)
                    .WithMany(p => p.Detectors)
                    .HasForeignKey(d => d.MovementTypeID)
                    .HasConstraintName("FK_dbo.Detectors_dbo.MovementTypes_MovementTypeID");
            });

            modelBuilder.Entity<DetectorComment>(entity =>
            {
                entity.HasKey(e => e.CommentID)
                    .HasName("PK_dbo.DetectorComments");

                entity.HasIndex(e => e.ID, "IX_ID");

                entity.Property(e => e.CommentID).HasColumnName("CommentID");

                entity.Property(e => e.CommentText).IsRequired();

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.DetectorComments)
                    .HasForeignKey(d => d.ID)
                    .HasConstraintName("FK_dbo.DetectorComments_dbo.Detectors_ID");
            });

            modelBuilder.Entity<DirectionType>(entity =>
            {
                entity.Property(e => e.DirectionTypeID)
                    .ValueGeneratedNever()
                    .HasColumnName("DirectionTypeID");

                entity.Property(e => e.Abbreviation).HasMaxLength(5);

                entity.Property(e => e.Description).HasMaxLength(30);
            });

            modelBuilder.Entity<ExternalLink>(entity =>
            {
                entity.Property(e => e.ExternalLinkID).HasColumnName("ExternalLinkID");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Url).IsRequired();
            });

            modelBuilder.Entity<Faq>(entity =>
            {
                entity.ToTable("FAQs");

                entity.Property(e => e.FaqID).HasColumnName("FAQID");

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.Header).IsRequired();
            });

            modelBuilder.Entity<Jurisdiction>(entity =>
            {
                entity.Property(e => e.CountyParish).HasMaxLength(50);

                entity.Property(e => e.JurisdictionName).HasMaxLength(50);

                entity.Property(e => e.Mpo)
                    .HasMaxLength(50)
                    .HasColumnName("MPO");

                entity.Property(e => e.OtherPartners).HasMaxLength(50);
            });

            modelBuilder.Entity<LaneType>(entity =>
            {
                entity.Property(e => e.LaneTypeID)
                    .ValueGeneratedNever()
                    .HasColumnName("LaneTypeID");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<MeasuresDefault>(entity =>
            {
                entity.HasKey(e => new { e.Measure, e.OptionName })
                    .HasName("PK_dbo.MeasuresDefaults");

                entity.Property(e => e.Measure).HasMaxLength(128);

                entity.Property(e => e.OptionName).HasMaxLength(128);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("Menu");

                entity.Property(e => e.MenuID).ValueGeneratedNever();

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Application)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Controller)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MetricComment>(entity =>
            {
                entity.HasKey(e => e.CommentID)
                    .HasName("PK_dbo.MetricComments");

                entity.HasIndex(e => e.VersionID, "IX_VersionID");

                entity.Property(e => e.CommentID).HasColumnName("CommentID");

                entity.Property(e => e.CommentText).IsRequired();

                entity.Property(e => e.SignalID)
                    .HasMaxLength(10)
                    .HasColumnName("SignalID");

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.Property(e => e.VersionID).HasColumnName("VersionID");
            });

            modelBuilder.Entity<MetricCommentMetricType>(entity =>
            {
                entity.HasKey(e => new { e.MetricCommentCommentID, e.MetricTypeMetricID })
                    .HasName("PK_dbo.MetricCommentMetricTypes");

                entity.HasIndex(e => e.MetricCommentCommentID, "IX_MetricComment_CommentID");

                entity.HasIndex(e => e.MetricTypeMetricID, "IX_MetricType_MetricID");

                entity.Property(e => e.MetricCommentCommentID).HasColumnName("MetricComment_CommentID");

                entity.Property(e => e.MetricTypeMetricID).HasColumnName("MetricType_MetricID");

                entity.HasOne(d => d.MetricCommentComment)
                    .WithMany(p => p.MetricCommentMetricTypes)
                    .HasForeignKey(d => d.MetricCommentCommentID)
                    .HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricComments_MetricComment_CommentID");

                entity.HasOne(d => d.MetricTypeMetric)
                    .WithMany(p => p.MetricCommentMetricTypes)
                    .HasForeignKey(d => d.MetricTypeMetricID)
                    .HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricTypes_MetricType_MetricID");
            });

            modelBuilder.Entity<MetricType>(entity =>
            {
                entity.HasKey(e => e.MetricID)
                    .HasName("PK_dbo.MetricTypes");

                entity.Property(e => e.MetricID)
                    .ValueGeneratedNever()
                    .HasColumnName("MetricID");

                entity.Property(e => e.Abbreviation).IsRequired();

                entity.Property(e => e.ChartName).IsRequired();
            });

            modelBuilder.Entity<MetricsFilterType>(entity =>
            {
                entity.HasKey(e => e.FilterID)
                    .HasName("PK_dbo.MetricsFilterTypes");

                entity.Property(e => e.FilterID).HasColumnName("FilterID");

                entity.Property(e => e.FilterName).IsRequired();
            });

            modelBuilder.Entity<MovementType>(entity =>
            {
                entity.Property(e => e.MovementTypeID)
                    .ValueGeneratedNever()
                    .HasColumnName("MovementTypeID");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.ToTable("Region");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<Route>(entity =>
            {
                entity.Property(e => e.RouteName).IsRequired();
            });

            modelBuilder.Entity<RoutePhaseDirection>(entity =>
            {
                entity.HasIndex(e => e.DirectionTypeID, "IX_DirectionTypeID");

                entity.HasIndex(e => e.RouteSignalID, "IX_RouteSignalID");

                entity.HasOne(d => d.DirectionType)
                    .WithMany(p => p.RoutePhaseDirections)
                    .HasForeignKey(d => d.DirectionTypeID)
                    .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.DirectionTypes_DirectionTypeID");

                entity.HasOne(d => d.RouteSignal)
                    .WithMany(p => p.RoutePhaseDirections)
                    .HasForeignKey(d => d.RouteSignalID)
                    .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.RouteSignals_RouteSignalID");
            });

            modelBuilder.Entity<RouteSignal>(entity =>
            {
                entity.HasIndex(e => e.RouteID, "IX_RouteID");

                entity.Property(e => e.SignalID)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.RouteSignals)
                    .HasForeignKey(d => d.RouteID)
                    .HasConstraintName("FK_dbo.RouteSignals_dbo.Routes_RouteID");
            });

            modelBuilder.Entity<Signal>(entity =>
            {
                entity.HasKey(e => e.VersionID)
                    .HasName("PK_dbo.Signals");

                entity.HasIndex(e => e.ControllerTypeID, "IX_ControllerTypeID");

                entity.HasIndex(e => e.JurisdictionID, "IX_JurisdictionID");

                entity.HasIndex(e => e.RegionID, "IX_RegionID");

                entity.HasIndex(e => e.VersionActionID, "IX_VersionActionID");

                entity.Property(e => e.VersionID).HasColumnName("VersionID");

                entity.Property(e => e.ControllerTypeID).HasColumnName("ControllerTypeID");

                entity.Property(e => e.IPAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JurisdictionID).HasDefaultValueSql("((1))");

                entity.Property(e => e.Latitude)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasDefaultValueSql("('Initial')");

                entity.Property(e => e.PrimaryName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RegionID).HasColumnName("RegionID");

                entity.Property(e => e.SecondaryName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SignalID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("SignalID");

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.VersionActionID).HasDefaultValueSql("((10))");

                entity.HasOne(d => d.ControllerType)
                    .WithMany(p => p.Signals)
                    .HasForeignKey(d => d.ControllerTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Signals_dbo.ControllerTypes_ControllerTypeID");

                entity.HasOne(d => d.Jurisdiction)
                    .WithMany(p => p.Signals)
                    .HasForeignKey(d => d.JurisdictionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Signals_dbo.Jurisdictions_JurisdictionID");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Signals)
                    .HasForeignKey(d => d.RegionID)
                    .HasConstraintName("FK_dbo.Signals_dbo.Region_RegionID");
            });

            modelBuilder.Entity<SignalToAggregate>(entity =>
            {
                entity.HasKey(e => e.SignalID)
                    .HasName("PK_dbo.SignalToAggregates");

                entity.Property(e => e.SignalID)
                    .HasMaxLength(10)
                    .HasColumnName("SignalID");
            });

            modelBuilder.Entity<SpmwatchDogErrorEvent>(entity =>
            {
                entity.ToTable("SPMWatchDogErrorEvents");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.DetectorID).HasColumnName("DetectorID");

                entity.Property(e => e.Direction).IsRequired();

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.SignalID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("SignalID");

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<VersionAction>(entity =>
            {
                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}