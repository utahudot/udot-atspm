// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ATSPM.Data.Configuration;
using ATSPM.Data.Enums;
using ATSPM.Data.Models.SpeedConfigModels;
using ATSPM.Data.Models.SpeedManagementAggregation;
using ATSPM.Data.Models.SpeedManagementConfigModels;
using Microsoft.EntityFrameworkCore;
using System.Net;

namespace ATSPM.Data
{
    /// <summary>
    /// Atspm configuration database context
    /// </summary>
    public partial class SpeedConfigContext : DbContext
    {
        /// <inheritdoc/>
        public SpeedConfigContext() { }

        /// <inheritdoc/>
        public SpeedConfigContext(DbContextOptions<SpeedConfigContext> options): base(options) {}

        /// <summary>
        /// Approaches table
        /// </summary>

        public virtual DbSet<Source> Sources { get; set; }
        public virtual DbSet<Confidence> Confidences { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<HourlySpeed> Speeds { get; set; }

        /// <inheritdoc/>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);

            if (Database.IsNpgsql())
                configurationBuilder.Properties<DateTime>().HaveColumnType("timestamp");
        }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            //Set keys to null for optional relationships
            foreach (var fk in modelBuilder.Model.GetEntityTypes()
                .SelectMany(t => t.GetForeignKeys())
                .Where(w => !w.IsRequired)
                .Where(w => !w.IsOwnership)
                .Where(w => w.DeleteBehavior == DeleteBehavior.Cascade))
            {
                fk.DeleteBehavior = DeleteBehavior.ClientSetNull;
            }

            OnModelCreatingPartial(modelBuilder);
            //TODO: call based class when using IdentityContext
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}