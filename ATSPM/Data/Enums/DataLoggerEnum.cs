using System;
using System.ComponentModel.DataAnnotations;


namespace ATSPM.Data.Enums
{
    /// <summary>
    /// Traffic Signal Hi Resolution Data Logger Enumerations
    /// <seealso cref="Reference" href="https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1002&context=jtrpdata"/>
    /// </summary>
    public enum DataLoggerEnum
    {
        [Display(Name = "Phase On")]
        PhaseOn = 0,    //Set when NEMA Phase On becomes active, either upon start of green or walk interval, whichever occurs first."
        [Display(Name = "Phase Begin Green")]
        PhaseBeginGreen = 1,    //Set when either solid or flashing green indication has begun. Do not set repeatedly during flashing operation."
        [Display(Name = "Phase Check")]
        PhaseCheck = 2, //Set when a conflicting call is registered against the active phase. (Marks beginning of MAX timing)"
        [Display(Name = "Phase Min Complete")]
        PhaseMinComplete = 3,   //Set when phase min timer expires."
        [Display(Name = "Phase Gap Out")]
        PhaseGapOut = 4,    //Phase termination due to gap out termination condition. Set once per phase when phase gaps out but may not necessarily occur upon phase termination."
        [Display(Name = "Phase Max Out")]
        PhaseMaxOut = 5,    //Set when phase MAX timer expires but may not necessarily occur upon phase termination due to last car passage or other features."
        [Display(Name = "Phase Force Off")]
        PhaseForceOff = 6,  //Set when phase force off is applied by the coordinator to the active green phase."
        [Display(Name = "Phase Green Termination")]
        PhaseGreenTermination = 7,  //Set when phase green indications are terminated into either yellow change interval or permissive (FYA) movement."
        [Display(Name = "Phase Begin Yellow Change")]
        PhaseBeginYellowChange = 8, //Set when phase yellow indication becomes active and interval timer begins."
        [Display(Name = "Phase End Yellow Change")]
        PhaseEndYellowChange = 9,   //Set when phase yellow indication becomes inactive."
        [Display(Name = "Phase Begin Red Clearance")]
        PhaseBeginRedClearance = 10,    //Set only if phase red clearance is served. Set when red clearance timing begins."
        [Display(Name = "Phase End Red Clearance")]
        PhaseEndRedClearance = 11,  //Set only if phase red clearance is served. Set when red clearance timing concludes. This may not necessarily coincide with completion of the phase, especially during clearance of trailing overlaps, red revert timing, red rest, or delay for other ring terminations."
        [Display(Name = "Phase Inactive")]
        PhaseInactive = 12, //Set when the phase is no longer active within the ring, including completion of any trailing overlaps or end of barrier delays for adjacent ring termination."
        [Display(Name = "Extension Timer Gap Out")]
        ExtensionTimerGapOut = 13,  //Set when phase extension timer gaps out."
        [Display(Name = "Phase Skipped")]
        PhaseSkipped = 14,  //Set when phase in the programmed ring is skipped for any reason."
        [Display(Name = "Extension Timer Reduction Start")]
        ExtensionTimerReductionStart = 15,  //Set when extension timer starts to reduce (the time before reduction)."
        [Display(Name = "Extension Timer Minimum Achieved")]
        ExtensionTimerMinimumAchieved = 16, //Set when extension timer minimum is reached (after the time to reduce)."
        [Display(Name = "Added Initial Complete")]
        AddedInitialComplete = 17,  //Set when phase added initial timer expires."
        [Display(Name = "Next Phase Decision")]
        NextPhaseDecision = 18, //Set when the controller determines a phase will be next to begin green after the current active phase(s) end red clearance."
        [Display(Name = "TSP Early Force Off")]
        TSPEarlyForceOffPhase = 19,  //Set when TSP early force off is applied to an active phase."
        [Display(Name = "Preemption Force Off")]
        PreemptionForceOff20 = 20,    //Set when controller applies preemption force off to the active cycle."
        [Display(Name = "Pedestrian Begin Walk")]
        PedestrianBeginWalk = 21,   //Set when walk indication becomes active."
        [Display(Name = "Pedestrian Begin Change Interval")]
        PedestrianBeginChangeInterval = 22, //Set when flashing don’t walk indication becomes active."
        [Display(Name = "Pedestrian Begin Solid Don’t Walk")]
        PedestrianBeginSolidDontWalk = 23,  //Set when don’t walk indication becomes solid (non-flashing) from either termination of pedestrian change interval, or head illumination after a pedestrian dark interval."
        [Display(Name = "Pedestrian Dark")]
        PedestrianDark = 24,    //Set when the pedestrian outputs are set off."
        [Display(Name = "Extended Pedestrian Change Interval")]
        ExtendedPedestrianChangeInterval = 25,  //Set when extended pedestrian change interval is requested by pressing the pedestrian push button for two (2) seconds. See 2009 MUTCD Section 4E.13 - Accessible Pedestrian Signals and Detectors - Extended Pushbutton Press Features for more details."
        [Display(Name = "Oversized Pedestrian Served")]
        OversizedPedestrianServed = 26, //Set when pedestrian phase is active beyond pedestrian change interval or force off point."
        //[Display(Name = "Pedestrian events reserved for future use.")]
        //Pedestrianeventsreservedforfutureuse = 27 - 30, //"
        [Display(Name = "Barrier Termination")]
        BarrierTermination = 31,    //Set when all active phases become inactive in the ring and cross barrier phases are next to be served."
        [Display(Name = "FYA – Begin Permissive")]
        FYABeginPermissive = 32,    //Set when flashing yellow arrow becomes active."
        [Display(Name = "FYA – End Permissive")]
        FYAEndPermissive = 33,  //Set when flashing yellow arrow becomes inactive through either clearance of the permissive movement or transition into a protected movement."
        //[Display(Name = "Barrier events reserve for future use.")]
        //Barriereventsreserveforfutureuse = 34-40,  //"
        [Display(Name = "Phase Hold Active")]
        PhaseHoldActive = 41,   //Set when phase hold is applied by the coordinator, preemptor, or external logic. Phase does not necessarily need to be actively timing for this event to occur."
        [Display(Name = "Phase Hold Released")]
        PhaseHoldReleased = 42, //Set when phase hold is released by the coordinator, preemptor, or external logic. Phase does not necessarily need to be actively timing for this event to occur."
        [Display(Name = "Phase Call Registered")]
        PhaseCallRegistered = 43,   //Call to service on a phase is registered by vehicular demand. This event will not be set if a recall exists on the phase."
        [Display(Name = "Phase Call Dropped")]
        PhaseCallDropped = 44,  //Call to service on a phase is cleared by either service of the phase or removal of call."
        [Display(Name = "Pedestrian Call Registered")]
        PedestrianCallRegistered = 45,  //Call to service on a phase is registered by pedestrian demand. This event will not be set if a recall exists on the phase."
        [Display(Name = "Phase Omit On")]
        PhaseOmitOn = 46,   //Set when phase omit is applied by the coordinator, preemptor, or other dynamic sources. Phase does not necessarily need to be actively timing for this event to occur. This event is not set when phase is removed from the active sequence or other configuration-level change has occurred."
        [Display(Name = "Phase Omit Off")]
        PhaseOmitOff = 47,  //Set when phase omit is released by the coordinator, preemptor, or other dynamic sources. Phase does not necessarily need to be actively timing for this event to occur. This event is not set when phase is added from the active sequence or other configuration-level change has occurred."
        [Display(Name = "Pedestrian Omit On")]
        PedestrianOmitOn = 48,  //Set when pedestrian omit is applied by the coordinator, preemptor, or other dynamic sources. Phase does not necessarily need to be actively timing for this event to occur. This event is not set when phase is removed from the active sequence or other configuration-level change has occurred."
        [Display(Name = "Pedestrian Omit Off")]
        PedestrianOmitOff = 49, //Set when pedestrian omit is released by the coordinator, preemptor, or other dynamic sources. Phase does not necessarily need to be actively timing for this event to occur. This event is not set when phase is added from the active sequence or other configuration-level change has occurred."
        [Display(Name = "MAX 1 In-Effect")]
        MAX1InEffect = 50,  //Set when maximum green (MAX 1) interval is in-effect for the active phase."
        [Display(Name = "MAX 2 In-Effect")]
        MAX2InEffect = 51,  //Set when maximum green (MAX 2) interval is in-effect for the active phase."
        [Display(Name = "Dynamic MAX In-Effect")]
        DynamicMAXInEffect = 52,    //Set when dynamic max interval is in-effect for the active phase. This event shall be populated upon termination of MAX green (MAX 1 or MAX 2) interval."
        [Display(Name = "Dynamic MAX Step Up")]
        DynamicMAXStepUp = 53,  //Set when dynamic max interval steps up for the active phase (initially after two consecutive phase max out events)."
        [Display(Name = "Dynamic MAX Step Down")]
        DynamicMAXStepDown = 54,    //Set when dynamic max interval steps down for the active phase (initially after two consecutive phase gap out events)."
        [Display(Name = "Advance Warning Sign On")]
        AdvanceWarningSignOn = 55,  //Set when advance warning sign is on."
        [Display(Name = "Advance Warning Sign Off")]
        AdvanceWarningSignOff = 56, //Set when advance warning sign is off."
        //[Display(Name = "Phase Control Events reserved for future use")]
        //PhaseControlEventsreservedforfutureuse = 57 - 60,   //"
        [Display(Name = "Overlap Begin Green")]
        OverlapBeginGreen = 61, //Set when overlap becomes green. Do not set repeatedly when overlap is flashing green. Note that overlap colors are consistent to the GYR intervals resultant from the controller programming and may not be indicative of actual signal head colors."
        [Display(Name = "Overlap Begin Trailing Green (Extension)")]
        OverlapBeginTrailingGreenExtension = 62,    //Set when overlap is green and extension timers begin timing."
        [Display(Name = "Overlap Begin Yellow")]
        OverlapBeginYellow = 63,    //Set when overlap is in a yellow change interval state.
        [Display(Name = "Overlap Begin Red Clearance")]
        OverlapBeginRedClearance = 64,  //Set when overlap begins timing red clearance intervals."
        [Display(Name = "Overlap Off (Inactive with red indication)")]
        OverlapOffInactivewithredindication = 65,   //Set when overlap has completed all timing, allowing any conflicting phase next to begin service."
        [Display(Name = "Overlap Dark")]
        OverlapDark = 66,   //Set when overlap head is set dark (no active outputs). The end of this interval shall be recorded by either an overlap off state or other active overlap state."
        [Display(Name = "Pedestrian Overlap Begin Walk")]
        PedestrianOverlapBeginWalk = 67,    //Set when walk indication becomes active."
        [Display(Name = "Pedestrian Overlap Begin Clearance")]
        PedestrianOverlapBeginClearance = 68,   //Set when flashing don’t walk indication becomes active."
        [Display(Name = "Pedestrian Overlap Begin Solid Don’t Walk")]
        PedestrianOverlapBeginSolidDontWalk = 69,   //Set when don’t walk indication becomes solid (non flashing) from either termination of ped clearance, or head illumination after a ped dark interval."
        [Display(Name = "Pedestrian Overlap Dark")]
        PedestrianOverlapDark = 70, //Set when the pedestrian outputs are set off."
        [Display(Name = "Advance Warning Sign On")]
        AdvanceWarningSignActive = 71,  //Set when advance warning sign becomes active."
        [Display(Name = "Advance Warning Sign Off")]
        AdvanceWarningSignInactive = 72, //Set when advance warning sign becomes inactive."
        //[Display(Name = "Overlap events reserved for future use.")]
        //Overlapeventsreservedforfutureuse = 73 - 80,    //"
        [Display(Name = "Detector Off")]
        DetectorOff = 81,   //Detector on and off events shall be triggered post any detector delay/extension processing."
        [Display(Name = "Detector On")]
        DetectorOn = 82,    //Detector on and off events shall be triggered post any detector delay/extension processing."
        [Display(Name = "Detector Restored")]
        DetectorRestored = 83,  //Detector restored to non-failed state by either manual restoration or re-enabling via continued diagnostics."
        [Display(Name = "Detector Fault- Other")]
        DetectorFaultOther = 84,    //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "Detector Fault- Watchdog Fault")]
        DetectorFaultWatchdogFault = 85,    //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "Detector Fault- Open Loop Fault")]
        DetectorFaultOpenLoopFault = 86,    //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "Detector Fault- Shorted Loop Fault")]
        DetectorFaultShortedLoopFault = 87, //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "Detector Fault- Excessive Change Fault")]
        DetectorFaultExcessiveChangeFault = 88, //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "PedDetector Off")]
        PedDetectorOff = 89,    //Ped detector events shall be triggered post any detector delay/extension processing and may be set multiple times for a single pedestrian call. (with future intent to eventually support ped presence and volume)."
        [Display(Name = "PedDetector On")]
        PedDetectorOn = 90, //Ped detector events shall be triggered post any detector delay/extension processing and may be set multiple times for a single pedestrian call. (with future intent to eventually support ped presence and volume)."
        [Display(Name = "Pedestrian Detector Failed")]
        PedestrianDetectorFailed = 91,  //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "Pedestrian Detector Restored")]
        PedestrianDetectorRestored = 92,    //Detector failure logged upon local controller diagnostics only (not system diagnostics)."
        [Display(Name = "TSP Detector Off")]
        TSPDetectorOff = 93,    //TSP detector events shall be triggered post any detector delay/extension processing."
        [Display(Name = "TSP Detector On")]
        TSPDetectorOn = 94, //TSP detector events shall be triggered post any detector delay/extension processing."
        //[Display(Name = "Detector events reserved for future use.")]
        //Detectoreventsreservedforfutureuse = 95-100,   //"
        [Display(Name = "Preempt Advance Warning Input")]
        PreemptAdvanceWarningInput = 101,   //Set when preemption advance warning input is activated."
        [Display(Name = "Preempt (Call) Input On")]
        PreemptCallInputOn = 102,   //Set when preemption input is activated. (prior to preemption delay timing) May be set multiple times if input is intermittent during preemption service."
        [Display(Name = "Preempt Gate Down Input Received")]
        PreemptGateDownInputReceived = 103, //Set when gate down input is received by the controller (if available)."
        [Display(Name = "Preempt (Call) Input Off")]
        PreemptCallInputOff = 104,  //Set when preemption input is de-activated. May be set multiple times if input is intermittent preemption service."
        [Display(Name = "Preempt Entry Started")]
        PreemptEntryStarted = 105,  //Set when preemption delay expires, and controller begins transition timing (force off) to serve preemption."
        [Display(Name = "Preemption Begin Track Clearance")]
        PreemptionBeginTrackClearance = 106,    //Set when track clearance phases are green and track clearance timing begins."
        [Display(Name = "Preemption Begin Dwell Service")]
        PreemptionBeginDwellService = 107,  //Set when preemption dwell or limited service begins, or minimum dwell timer is reset due to call drop and reapplication."
        [Display(Name = "Preemption Link Active On")]
        PreemptionLinkActiveOn = 108,   //Set when linked preemptor input is applied from active preemptor."
        [Display(Name = "Preemption Link Active Off")]
        PreemptionLinkActiveOff = 109,  //Set when linked preemptor input is dropped from active preemptor."
        [Display(Name = "Preemption Max Presence Exceeded")]
        PreemptionMaxPresenceExceeded = 110,    //Set when preemption max presence timer is exceeded, and preemption input is released from service."
        [Display(Name = "Preemption Begin Exit Interval")]
        PreemptionBeginExitInterval = 111,  //Set when preemption exit interval phases are green and exit timing begins."
        [Display(Name = "TSP Check In")]
        TSPCheckIn = 112,   //Set when request for priority is received."
        [Display(Name = "TSP Adjustment to Early Green")]
        TSPAdjustmenttoEarlyGreen = 113,    //Set when controller is adjusting active cycle to accommodate early service to TSP phases."
        [Display(Name = "TSP Adjustment to Extend Green")]
        TSPAdjustmenttoExtendGreen = 114,   //Set when controller is adjusting active cycle to accommodate extended service to TSP phases."
        [Display(Name = "TSP Check Out")]
        TSPCheckOut = 115,  //Set when request for priority is retracted."
        [Display(Name = "Preemption Force Off")]
        PreemptionForceOff116 = 116,   //Set when preemption force off is applied to the active cycle."
        [Display(Name = "TSP Early Force Off")]
        TSPEarlyForceOffCycle = 117, //Set when TSP early force off is applied to the active cycle."
        [Display(Name = "TSP Service Start")]
        TSPServiceStart = 118,  //Set when requested TSP service begins."
        [Display(Name = "TSP Service End")]
        TSPServiceEnd = 119,    //Set when requested TSP service ends."
        //[Display(Name = "Preemption/TSP Events reserved for future use")]
        //PreemptionTSPEventsreservedforfutureuse = 120 - 130,    //"
        [Display(Name = "Coord Pattern Change")]
        CoordPatternChange = 131,   //Coordination pattern that is actively running in the controller. (Highest priority of TOD, System or manual command). This event will not be reapplied if coordination is temporarily suspended for preemption or other external control."
        [Display(Name = "Cycle Length Change")]
        CycleLengthChange = 132,    //This event shall be populated upon selection of a new coordination pattern change that selects a new cycle length. Cycle lengths in excess of 255 shall record this event with a 255 parameter, along with event code 156."
        [Display(Name = "Offset Length Change")]
        OffsetLengthChange = 133,   //This event shall be populated upon selection of a new coordination pattern change that selects a new cycle length. Offsets in  excess of 255 shall record this event with a 255 parameter, requiring controller database lookup for this actual value."
        [Display(Name = "Split 1 Change")]
        Split1Change = 134, //Split change events shall be populated upon selection of a new coordination pattern as well as during a split change to an active pattern via Signal Control and Prioritization (SCP), Adaptive Control System (ACS) Lite or other adaptive control system."
        [Display(Name = "Split 2 Change")]
        Split2Change = 135, //"
        [Display(Name = "Split 3 Change")]
        Split3Change = 136, //"
        [Display(Name = "Split 4 Change")]
        Split4Change = 137, //"
        [Display(Name = "Split 5 Change")]
        Split5Change = 138, //"
        [Display(Name = "Split 6 Change")]
        Split6Change = 139, //"
        [Display(Name = "Split 7 Change")]
        Split7Change = 140, //"
        [Display(Name = "Split 8 Change")]
        Split8Change = 141, //"
        [Display(Name = "Split 9 Change")]
        Split9Change = 142, //"
        [Display(Name = "Split 10 Change")]
        Split10Change = 143,    //"
        [Display(Name = "Split 11 Change")]
        Split11Change = 144,    //"
        [Display(Name = "Split 12 Change")]
        Split12Change = 145,    //"
        [Display(Name = "Split 13 Change")]
        Split13Change = 146,    //"
        [Display(Name = "Split 14 Change")]
        Split14Change = 147,    //"
        [Display(Name = "Split 15 Change")]
        Split15Change = 148,    //"
        [Display(Name = "Split 16 Change")]
        Split16Change = 149,    //"
        [Display(Name = "Coord cycle state change")]
        Coordcyclestatechange = 150,    //"
        [Display(Name = "Coordinated phase yield point")]
        Coordinatedphaseyieldpoint = 151,   //Set once per cycle for each coordinated phase when controller suspends the coordinated phase."
        [Display(Name = "Coordinated phase begin")]
        Coordinatedphasebegin = 152,    //Set when coordinated phase begins."
        [Display(Name = "Logic Statement True")]
        LogicStatementTrue = 153,   //Set when the logic statement evaluation changes from “False” to “True”."
        [Display(Name = "Logic Statement False")]
        LogicStatementFalse = 154,  //Set when the logic statement evaluation changes from “True” to “False”."
        [Display(Name = "Unit Control Status Change")]
        UnitControlStatusChange = 155,  //See NTCIP 1202v0326 5.4.5 for definition."
        [Display(Name = "Additional Cycle Length Change")]
        AdditionalCycleLengthChange = 156,  //Set simultaneously with Event Code 132 when existing cycle length exceeds 255 seconds. When this Event Code 156 is used, Event Code 132 shall be 255, where the value of this Event Code 156 will be the additional cycle length above 255 (in seconds). Cycle lengths longer than 510 seconds will require a controller look up."
        //[Display(Name = "Coordination events reserved for future use.")]
        //Coordinationeventsreservedforfutureuse = 157 - 170, //"
        [Display(Name = "Test Input On")]
        TestInputOn = 171,  //Cabinet test or special function input as defined by the local controller."
        [Display(Name = "Test Input Off")]
        TestInputOff = 172, //Cabinet test or special function input as defined by the local controller."
        [Display(Name = "Unit Flash Status Change")]
        UnitFlashStatusChange = 173,    //See NTCIP 1202 2.4.6 for definition."
        [Display(Name = "Unit Alarm Status 1 Change")]
        UnitAlarmStatus1Change = 174,   //See NTCIP 1202 2.4.8 for definition."
        [Display(Name = "Alarm Group State Change")]
        AlarmGroupStateChange = 175,    //See NTCIP 1202 2.4.12.2 for definition."
        [Display(Name = "Special Function Output On")]
        SpecialFunctionOutputOn = 176,  //Special function output as defined by the local controller."
        [Display(Name = "Special Function Output Off")]
        SpecialFunctionOutputOff = 177, //Special function output as defined by the local controller."
        [Display(Name = "Manual control enable On/Off")]
        ManualcontrolenableOnOff = 178,    //Special function output as defined by the local controller."
        [Display(Name = "Interval Advance On/Off")]
        IntervalAdvanceOnOff = 179,    //Leading edge on (1), lagging edge (0) optional."
        [Display(Name = "Stop Time Input On/Off")]
        StopTimeInputOnOff = 180,  //Set when stop time input is applied or removed, regardless of source of stop or state."
        [Display(Name = "Controller Clock Updated")]
        ControllerClockUpdated = 181,   //Set when the controller OS clock is adjusted via communications, OS command, or external input."
        [Display(Name = "Power Failure Detected")]
        PowerFailureDetected = 182, //Line voltage drops between 0-89 volts AC for more than 100ms."
        [Display(Name = "Power Restored")]
        PowerRestored = 184,    //Line voltage applied/reapplied greater than 98 volts AC."
        [Display(Name = "Vendor Specific Alarm")]
        VendorSpecificAlarm = 185,  //Placeholder for generic failure/alarm types as defined by vendor."
        //[Display(Name = "Cabinet/System events reserved for future use.")]
        //CabinetSystemeventsreservedforfutureuse = 186 - 199,    //"
        [Display(Name = "Alarm On")]
        AlarmOn = 200,  //Set when cabinet/system alarm is activated."
        [Display(Name = "Alarm Off")]
        AlarmOff = 201, //Set when cabinet/system alarm is released."
        [Display(Name = "Aux Switch On/Off")]
        AuxSwitchOnOff = 202,   //Set when local controller aux switch is active (1) or inactive (0)"
        [Display(Name = "Split 17 Change")]
        Split17Change = 203,    //Split change events shall be populated upon selection of a new coordination pattern as well as during a split change to an active pattern via Signal Control and Prioritization (SCP), Adaptive Control System (ACS) Lite or other adaptive control system."
        [Display(Name = "Split 18 Change")]
        Split18Change = 204,    //"
        [Display(Name = "Split 19 Change")]
        Split19Change = 205,    //"
        [Display(Name = "Split 20 Change")]
        Split20Change = 206,    //"
        [Display(Name = "Split 21 Change")]
        Split21Change = 207,    //"
        [Display(Name = "Split 22 Change")]
        Split22Change = 208,    //"
        [Display(Name = "Split 23 Change")]
        Split23Change = 209,    //"
        [Display(Name = "Split 24 Change")]
        Split24Change = 210,    //"
        [Display(Name = "Split 25 Change")]
        Split25Change = 211,    //"
        [Display(Name = "Split 26 Change")]
        Split26Change = 212,    //"
        [Display(Name = "Split 27 Change")]
        Split27Change = 213,    //"
        [Display(Name = "Split 28 Change")]
        Split28Change = 214,    //"
        [Display(Name = "Split 29 Change")]
        Split29Change = 215,    //"
        [Display(Name = "Split 30 Change")]
        Split30Change = 216,    //"
        [Display(Name = "Split 31 Change")]
        Split31Change = 217,    //"
        [Display(Name = "Split 32 Change")]
        Split32Change = 218	//"
    }
}
