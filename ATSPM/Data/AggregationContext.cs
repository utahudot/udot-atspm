// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ATSPM.Data.Models;

namespace ATSPM.Data
{
    public partial class AggregationContext : DbContext
    {
        public AggregationContext()
        {
        }

        public AggregationContext(DbContextOptions<AggregationContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApproachPcdAggregation> ApproachPcdAggregations { get; set; }
        public virtual DbSet<ApproachSpeedAggregation> ApproachSpeedAggregations { get; set; }
        public virtual DbSet<ApproachSplitFailAggregation> ApproachSplitFailAggregations { get; set; }
        public virtual DbSet<ApproachYellowRedActivationAggregation> ApproachYellowRedActivationAggregations { get; set; }
        public virtual DbSet<DetectorEventCountAggregation> DetectorEventCountAggregations { get; set; }
        public virtual DbSet<PhaseCycleAggregation> PhaseCycleAggregations { get; set; }
        public virtual DbSet<PhaseLeftTurnGapAggregation> PhaseLeftTurnGapAggregations { get; set; }
        public virtual DbSet<PhaseSplitMonitorAggregation> PhaseSplitMonitorAggregations { get; set; }
        public virtual DbSet<PhaseTerminationAggregation> PhaseTerminationAggregations { get; set; }
        public virtual DbSet<PreemptionAggregation> PreemptionAggregations { get; set; }
        public virtual DbSet<PriorityAggregation> PriorityAggregations { get; set; }
        public virtual DbSet<SignalEventCountAggregation> SignalEventCountAggregations { get; set; }
        public virtual DbSet<SignalPlanAggregation> SignalPlanAggregations { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApproachPcdAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PhaseNumber, e.IsProtectedPhase })
                    .HasName("PK_dbo.ApproachPcdAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<ApproachSpeedAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.ApproachID })
                    .HasName("PK_dbo.ApproachSpeedAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<ApproachSplitFailAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.ApproachID, e.PhaseNumber, e.IsProtectedPhase })
                    .HasName("PK_dbo.ApproachSplitFailAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<ApproachYellowRedActivationAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PhaseNumber, e.IsProtectedPhase })
                    .HasName("PK_dbo.ApproachYellowRedActivationAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<DetectorEventCountAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.DetectorPrimaryID })
                    .HasName("PK_dbo.DetectorEventCountAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<PhaseCycleAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PhaseNumber })
                    .HasName("PK_dbo.PhaseCycleAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<PhaseLeftTurnGapAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PhaseNumber })
                    .HasName("PK_dbo.PhaseLeftTurnGapAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<PhaseSplitMonitorAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PhaseNumber })
                    .HasName("PK_dbo.PhaseSplitMonitorAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(128);
            });

            modelBuilder.Entity<PhaseTerminationAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PhaseNumber })
                    .HasName("PK_dbo.PhaseTerminationAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<PreemptionAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PreemptNumber })
                    .HasName("PK_dbo.PreemptionAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<PriorityAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId, e.PriorityNumber })
                    .HasName("PK_dbo.PriorityAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<SignalEventCountAggregation>(entity =>
            {
                entity.HasKey(e => new { e.BinStartTime, e.SignalId })
                    .HasName("PK_dbo.SignalEventCountAggregations");

                entity.Property(e => e.BinStartTime).HasColumnType("datetime");

                entity.Property(e => e.SignalId).HasMaxLength(10);
            });

            modelBuilder.Entity<SignalPlanAggregation>(entity =>
            {
                entity.HasKey(e => new { e.SignalId, e.Start, e.End })
                    .HasName("PK_dbo.SignalPlanAggregations");

                entity.Property(e => e.SignalId).HasMaxLength(128);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.End).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}