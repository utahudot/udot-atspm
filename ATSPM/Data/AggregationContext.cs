// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ATSPM.Data.Models;
using ATSPM.Data.Models.AggregationModels;
using ATSPM.Data.Utility;
using ATSPM.Domain.Common;
using Microsoft.EntityFrameworkCore;

namespace ATSPM.Data
{
    /// <summary>
    /// Atspm aggregation database context
    /// </summary>
    public partial class AggregationContext : DbContext
    {
        /// <inheritdoc/>
        public AggregationContext() { }

        /// <inheritdoc/>
        public AggregationContext(DbContextOptions<AggregationContext> options): base(options) { }

        /// <summary>
        /// Compressed data base table
        /// Use this table when accessing all recoreds regardless of datatype
        /// Returned compressed data will need to be cast to type specified in <see cref="CompressedAggregationBase.Data"/>
        /// </summary>
        public virtual DbSet<CompressedAggregationBase> CompressedAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachPcdAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachPcdAggregation>> ApproachPcdAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachSpeedAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachSpeedAggregation>> ApproachSpeedAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachSplitFailAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachSplitFailAggregation>> ApproachSplitFailAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachYellowRedActivationAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachYellowRedActivationAggregation>> ApproachYellowRedActivationAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="DetectorEventCountAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<DetectorEventCountAggregation>> DetectorEventCountAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseCycleAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseCycleAggregation>> PhaseCycleAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseLeftTurnGapAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseLeftTurnGapAggregation>> PhaseLeftTurnGapAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseSplitMonitorAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseSplitMonitorAggregation>> PhaseSplitMonitorAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseTerminationAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseTerminationAggregation>> PhaseTerminationAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PreemptionAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PreemptionAggregation>> PreemptionAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PriorityAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PriorityAggregation>> PriorityAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="SignalEventCountAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<SignalEventCountAggregation>> SignalEventCountAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="SignalPlanAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<SignalPlanAggregation>> SignalPlanAggregations { get; set; }

        /// <inheritdoc/>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);

            if (Database.IsNpgsql())
                configurationBuilder.Properties<DateTime>().HaveColumnType("timestamp");
            //else
            //    configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
        }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CompressedAggregationBase>(builder =>
            {
                builder.ToTable(t => t.HasComment("Compressed aggregations"));

                builder.HasKey(e => new { e.LocationIdentifier, e.ArchiveDate, e.DataType });

                builder.Property(e => e.LocationIdentifier)
                    .IsRequired()
                    .HasMaxLength(10);

                builder.Property(e => e.ArchiveDate)
                .IsRequired()
                .HasColumnType("Date")
                .HasConversion<DateTime>(
                    v => v.ToDateTime(TimeOnly.MinValue),
                    v => DateOnly.FromDateTime(v));

                builder.Property(p => p.DataType)
                .HasMaxLength(32)
                .HasConversion(new CompressionTypeConverter(typeof(AtspmAggregationModelBase).Namespace.ToString(), typeof(AtspmAggregationModelBase).Assembly.ToString()));

                builder.HasDiscriminator(d => d.DataType)
                .AddCompressedTableDiscriminators(typeof(AtspmAggregationModelBase), typeof(CompressedAggregations<>));

                builder.Property(e => e.Data)
                .HasConversion<CompressedListComverter<AtspmAggregationModelBase>, CompressedListComparer<AtspmAggregationModelBase>>();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }

    //add-migration -name V5Upgrade -context AggregationContext
    //update-database -context AggregationContext
    //drop-database -context AggregationContext

//    DELETE FROM dbo.CompressedAggregations
//SELECT* FROM dbo.CompressedAggregations

//SELECT CAST(DECOMPRESS(Data) AS varchar(MAX))
//FROM dbo.CompressedAggregations

//--SELECT*
//--FROM CompressedAggregations CROSS APPLY OPENJSON(CAST(DECOMPRESS(Data) AS varchar(MAX)), '$."$values"')




//--SELECT LocationIdentifier, Timestamp, EventCode, EventParam
//--FROM CompressedAggregations CROSS APPLY OPENJSON(CAST(DECOMPRESS(Data) AS varchar(MAX)), '$."$values"') WITH(Timestamp DateTime2(7), EventCode int, EventParam int)

//--{
//--  "$type": "System.Collections.Generic.List`1[[ATSPM.Data.EventModels.IndiannaEvent, ATSPM.Data]], System.Private.CoreLib",
//--  "$values": [
//--    {
//--      "EventCode": 1,
//--      "EventParam": 1,
//--      "LocationIdentifier": "1234",
//--      "Timestamp": "2024-01-22T13:41:43.587733-07:00"
//--    }
//--  ]
//--}
}