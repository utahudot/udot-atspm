// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ATSPM.Data.Models;
using ATSPM.Data.Models.AggregationModels;
using ATSPM.Domain.Extensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;

namespace ATSPM.Data
{
    /// <summary>
    /// Atspm aggregation database context
    /// </summary>
    public partial class AggregationContext : DbContext
    {
        /// <inheritdoc/>
        public AggregationContext() { }

        /// <inheritdoc/>
        public AggregationContext(DbContextOptions<AggregationContext> options): base(options) { }

        /// <summary>
        /// Compressed data base table
        /// Use this table when accessing all recoreds regardless of datatype
        /// Returned compressed data will need to be cast to type specified in <see cref="CompressedAggregationBase.Data"/>
        /// </summary>
        public virtual DbSet<CompressedAggregationBase> CompressedAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachPcdAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachPcdAggregation>> ApproachPcdAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachSpeedAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachSpeedAggregation>> ApproachSpeedAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachSplitFailAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachSplitFailAggregation>> ApproachSplitFailAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="ApproachYellowRedActivationAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<ApproachYellowRedActivationAggregation>> ApproachYellowRedActivationAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="DetectorEventCountAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<DetectorEventCountAggregation>> DetectorEventCountAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseCycleAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseCycleAggregation>> PhaseCycleAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseLeftTurnGapAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseLeftTurnGapAggregation>> PhaseLeftTurnGapAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseSplitMonitorAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseSplitMonitorAggregation>> PhaseSplitMonitorAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PhaseTerminationAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PhaseTerminationAggregation>> PhaseTerminationAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PreemptionAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PreemptionAggregation>> PreemptionAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="PriorityAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<PriorityAggregation>> PriorityAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="SignalEventCountAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<SignalEventCountAggregation>> SignalEventCountAggregations { get; set; }

        /// <summary>
        /// <inheritdoc cref="SignalPlanAggregation"/>
        /// </summary>
        public virtual DbSet<CompressedAggregations<SignalPlanAggregation>> SignalPlanAggregations { get; set; }

        //public virtual DbSet<ApproachPcdAggregation> ApproachPcdAggregations { get; set; }
        //public virtual DbSet<ApproachSpeedAggregation> ApproachSpeedAggregations { get; set; }
        //public virtual DbSet<ApproachSplitFailAggregation> ApproachSplitFailAggregations { get; set; }
        //public virtual DbSet<ApproachYellowRedActivationAggregation> ApproachYellowRedActivationAggregations { get; set; }
        //public virtual DbSet<DetectorEventCountAggregation> DetectorEventCountAggregations { get; set; }
        //public virtual DbSet<PhaseCycleAggregation> PhaseCycleAggregations { get; set; }
        //public virtual DbSet<PhaseLeftTurnGapAggregation> PhaseLeftTurnGapAggregations { get; set; }
        //public virtual DbSet<PhaseSplitMonitorAggregation> PhaseSplitMonitorAggregations { get; set; }
        //public virtual DbSet<PhaseTerminationAggregation> PhaseTerminationAggregations { get; set; }
        //public virtual DbSet<PreemptionAggregation> PreemptionAggregations { get; set; }
        //public virtual DbSet<PriorityAggregation> PriorityAggregations { get; set; }
        //public virtual DbSet<SignalEventCountAggregation> LocationEventCountAggregations { get; set; }
        //public virtual DbSet<SignalPlanAggregation> LocationPlanAggregations { get; set; }

        /// <inheritdoc/>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);

            if (Database.IsNpgsql())
                configurationBuilder.Properties<DateTime>().HaveColumnType("timestamp");
            //else
            //    configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
        }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CompressedAggregationBase>(builder =>
            {
                builder.ToTable(t => t.HasComment("Compressed aggregations"));

                builder.HasKey(e => new { e.LocationIdentifier, e.ArchiveDate });

                builder.Property(e => e.LocationIdentifier)
                    .IsRequired()
                    .HasMaxLength(10);

                builder.Property(e => e.ArchiveDate)
                .IsRequired()
                .HasColumnType("Date")
                .HasConversion<DateTime>(
                    v => v.ToDateTime(TimeOnly.MinValue),
                    v => DateOnly.FromDateTime(v));

                builder.Property(p => p.DataType)
                .HasMaxLength(512)
                .HasConversion<string>(v => v.FullName, v => Type.GetType($"{v}, {typeof(CompressedAggregationBase).Assembly}"));

                var b = builder.HasDiscriminator(d => d.DataType);
                foreach (var t in typeof(AtspmAggregationModelBase).Assembly.GetTypes().Where(w => w.IsSubclassOf(typeof(AtspmAggregationModelBase))))
                {
                    var g = typeof(CompressedAggregations<>).MakeGenericType(t);

                    b.HasValue(g, t);
                }

                builder.Property(e => e.Data)
                .HasConversion<byte[]>(
                    v => Newtonsoft.Json.JsonConvert.SerializeObject(v, new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }).GZipCompressToByte(),

                    v => JsonConvert.DeserializeObject<IEnumerable<AtspmAggregationModelBase>>(v.GZipDecompressToString(), new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }),

                    new ValueComparer<IEnumerable<AtspmAggregationModelBase>>((c1, c2) => c1.SequenceEqual(c2),
                    c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                    c => c.ToList()));
            });

            //modelBuilder.ApplyConfiguration(new ApproachPcdAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new ApproachSpeedAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new ApproachSplitFailAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new ApproachYellowRedActivationAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new DetectorEventCountAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new PhaseCycleAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new PhaseLeftTurnGapAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new PhaseSplitMonitorAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new PhaseTerminationAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new PreemptionAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new PriorityAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new LocationEventCountAggregationConfiguration());

            //modelBuilder.ApplyConfiguration(new LocationPlanAggregationConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }

    //add-migration -name EFCore6Upgrade -context AggregationContext
    //update-database -context AggregationContext
    //drop-database -context AggregationContext
}