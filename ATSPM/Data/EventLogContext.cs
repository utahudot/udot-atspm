// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ATSPM.Data.Configuration;
using ATSPM.Data.EventModels;
using ATSPM.Data.Models;
using ATSPM.Domain.Extensions;
using AutoMapper.Execution;
using AutoMapper.Internal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace ATSPM.Data
{
    public partial class EventLogContext : DbContext
    {
        public EventLogContext()
        {
        }

        public EventLogContext(DbContextOptions<EventLogContext> options) : base(options)
        {
        }

        //public virtual DbSet<ControllerEventLog> ControllerEventLogs { get; set; }
        public virtual DbSet<ControllerLogArchive> ControllerLogArchives { get; set; }



        public virtual DbSet<CompressedEventData> EventLogArchives { get; set; }









        public virtual DbSet<EventsBase> CompressedData { get; set; }
        public virtual DbSet<EventsTypeBase<IndiannaEvent>> IndiannaEvents { get; set; }
        public virtual DbSet<EventsTypeBase<PedestrianCounter>> PedestrianCounters { get; set; }





        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);
            //configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new ControllerLogArchiveConfiguration());

            //modelBuilder.Entity<ControllerEventLog>(builder =>
            //{
            //    builder.ToTable("Controller_Event_Log");

            //    builder.HasComment("Old Log Data Table");

            //    builder.HasKey(e => new { e.LocationId, e.Timestamp, e.EventCode, e.EventParam });

            //    //builder.Property(e => e.ArchiveDate).Metadata.AddAnnotation("KeyNameFormat", "dd-MM-yyyy");

            //    builder.Property(e => e.LocationId)
            //            .IsRequired()
            //            .HasMaxLength(10)
            //            .HasColumnName("locationId");
            //});


            modelBuilder.Entity<CompressedEventData>(builder =>
            {
                builder.HasKey(e => new { e.LocationIdentifier, e.DeviceId, e.ArchiveDate });

                builder.Property(e => e.LocationIdentifier)
                    .IsRequired()
                    .HasMaxLength(10);

                builder.Property(e => e.ArchiveDate)
                .IsRequired()
                .HasColumnType("Date")
                .HasConversion<DateTime>(
                    v => v.ToDateTime(TimeOnly.MinValue),
                    v => DateOnly.FromDateTime(v));


                builder.Property(e => e.LogData)
                .HasConversion<byte[]>(
                    v => Newtonsoft.Json.JsonConvert.SerializeObject(v, new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }).GZipCompressToByte(),

                    v => JsonConvert.DeserializeObject<IEnumerable<EventModelBase>>(v.GZipDecompressToString(), new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }),

                    new ValueComparer<IEnumerable<EventModelBase>>((c1, c2) => c1.SequenceEqual(c2),
                    c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                    c => c.ToList()));
            });


            //modelBuilder.Entity<ModelTwo>(builder => builder.HasBaseType<ModelOne>());
            //modelBuilder.Entity<ModelThree>(builder => builder.HasBaseType<ModelOne>());

            modelBuilder.Entity<EventsBase>(builder =>
            {
                //builder.ToTable("CompressedData");
                
                builder.HasKey(e => new { e.LocationIdentifier, e.DeviceId, e.ArchiveDate });

                builder.Property(e => e.LocationIdentifier)
                    .IsRequired()
                    .HasMaxLength(10);

                builder.Property(e => e.ArchiveDate)
                .IsRequired()
                .HasColumnType("Date")
                .HasConversion<DateTime>(
                    v => v.ToDateTime(TimeOnly.MinValue),
                    v => DateOnly.FromDateTime(v));

                builder.Property(p => p.DataType)
                .HasMaxLength(512)
                .HasConversion<string>(v => v.AssemblyQualifiedName, v => Type.GetType(v));


                //builder.HasDiscriminator(d => d.DataType)
                //.HasValue<EventsTypeBase<IndiannaEvent>>(typeof(IndiannaEvent))
                //.HasValue<EventsTypeBase<PedestrianCounter>>(typeof(PedestrianCounter));

                var b = builder.HasDiscriminator(d => d.DataType);
                foreach (var t in typeof(EventModelBase).Assembly.GetTypes().Where(w => w.IsSubclassOf(typeof(EventModelBase))))
                {
                    var g = typeof(EventsTypeBase<>).MakeGenericType(t);

                    b.HasValue(g, t);
                }

                //builder.Property(p => p.Data).HasConversion<CompressedJsonConverter>();

                builder.Property(e => e.Data)
                .HasConversion<byte[]>(
                    v => Newtonsoft.Json.JsonConvert.SerializeObject(v, new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }).GZipCompressToByte(),

                    v => JsonConvert.DeserializeObject<IEnumerable<EventModelBase>>(v.GZipDecompressToString(), new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }),

                    new ValueComparer<IEnumerable<EventModelBase>>((c1, c2) => c1.SequenceEqual(c2),
                    c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                    c => c.ToList()));
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }

    public class CompressedJsonConverter : ValueConverter<object, byte[]>
    {
        public CompressedJsonConverter() : base(
            v => Newtonsoft.Json.JsonConvert.SerializeObject(v, new JsonSerializerSettings()
            {
                TypeNameHandling = TypeNameHandling.Arrays
            }).GZipCompressToByte(),
            v => JsonConvert.DeserializeObject<object>(v.GZipDecompressToString(), new JsonSerializerSettings()
            {
                TypeNameHandling = TypeNameHandling.Arrays
            })
            )
        { }
    }

    //add-migration -name EFCore6Upgrade -context EventLogContext
    //update-database -context EventLogContext
    //drop-database -context EventLogContext

}