// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ATSPM.Data.Models;
using ATSPM.Data.Models.EventModels;
using ATSPM.Domain.Extensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;

namespace ATSPM.Data
{
    /// <summary>
    /// Atspm device log events database context
    /// </summary>
    public partial class EventLogContext : DbContext
    {
        /// <inheritdoc/>
        public EventLogContext() {}

        /// <inheritdoc/>
        public EventLogContext(DbContextOptions<EventLogContext> options) : base(options) { }

        /// <summary>
        /// Compressed data base table
        /// Use this table when accessing all recoreds regardless of datatype
        /// Returned compressed data will need to be cast to type specified in <see cref="CompressedEventsBase.Data"/>
        /// </summary>
        public virtual DbSet<CompressedEventsBase> CompressedEvents { get; set; }

        /// <summary>
        /// <inheritdoc cref="IndiannaEvent"/>
        /// </summary>
        public virtual DbSet<CompressedEvents<IndiannaEvent>> IndiannaEvents { get; set; }

        /// <summary>
        /// <inheritdoc cref="SpeedEvent"/>
        /// </summary>
        public virtual DbSet<CompressedEvents<SpeedEvent>> SpeedEvents { get; set; }


        /// <summary>
        /// <inheritdoc cref="PedestrianCounter"/>
        /// </summary>
        public virtual DbSet<CompressedEvents<PedestrianCounter>> PedestrianCounters { get; set; }

        /// <inheritdoc/>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);

            if (Database.IsNpgsql())
                configurationBuilder.Properties<DateTime>().HaveColumnType("timestamp");
            //else
            //    configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
        }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CompressedEventsBase>(builder =>
            {
                builder.ToTable(t => t.HasComment("Compressed device data log events"));
                
                builder.HasKey(e => new { e.LocationIdentifier, e.DeviceId, e.ArchiveDate });

                builder.Property(e => e.LocationIdentifier)
                    .IsRequired()
                    .HasMaxLength(10);

                builder.Property(e => e.ArchiveDate)
                .IsRequired()
                .HasColumnType("Date")
                .HasConversion<DateTime>(
                    v => v.ToDateTime(TimeOnly.MinValue),
                    v => DateOnly.FromDateTime(v));

                builder.Property(p => p.DataType)
                .HasMaxLength(512)
                .HasConversion<string>(v => v.FullName, v => Type.GetType($"{v}, {typeof(CompressedEventsBase).Assembly}"));

                //builder.HasDiscriminator(d => d.DataType)
                //.HasValue<CompressedEvents<IndiannaEvent>>(typeof(IndiannaEvent))
                //.HasValue<CompressedEvents<PedestrianCounter>>(typeof(PedestrianCounter));

                var b = builder.HasDiscriminator(d => d.DataType);
                foreach (var t in typeof(AtspmEventModelBase).Assembly.GetTypes().Where(w => w.IsSubclassOf(typeof(AtspmEventModelBase))))
                {
                    var g = typeof(CompressedEvents<>).MakeGenericType(t);

                    b.HasValue(g, t);
                }

                builder.Property(e => e.Data)
                .HasConversion<byte[]>(
                    v => Newtonsoft.Json.JsonConvert.SerializeObject(v, new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }).GZipCompressToByte(),

                    v => JsonConvert.DeserializeObject<IEnumerable<AtspmEventModelBase>>(v.GZipDecompressToString(), new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Arrays
                    }),

                    new ValueComparer<IEnumerable<AtspmEventModelBase>>((c1, c2) => c1.SequenceEqual(c2),
                    c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                    c => c.ToList()));
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }

    //add-migration -name EFCore6Upgrade -context EventLogContext
    //update-database -context EventLogContext
    //drop-database -context EventLogContext
}