// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ATSPM.Data.Models;
using System.Text.Json;
using ATSPM.Application.ValueObjects;
using ATSPM.Domain.Extensions;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace ATSPM.Data
{
    public partial class EventLogContext : DbContext
    {
        public EventLogContext()
        {
        }

        public EventLogContext(DbContextOptions<EventLogContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ControllerLogArchive> ControllerLogArchives { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ControllerLogArchive>(entity =>
            {
                entity.HasKey(e => new { e.SignalId, e.ArchiveDate }).HasName("PK_Controller_Log_Archive");

                entity.ToTable("Controller_Log_Archive");

                entity.HasIndex(e => new { e.SignalId, e.ArchiveDate }, "IX_Controller_Log_Archive")
                    .IsUnique();

                entity.Property(e => e.ArchiveDate)
                .HasColumnType("date")
                .Metadata.AddAnnotation("KeyNameFormat", "dd-MM-yyyy");


                entity.Property(e => e.SignalId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("SignalID");


                //https://docs.microsoft.com/en-us/ef/core/modeling/value-conversions?tabs=fluent-api

                entity.Property(e => e.LogData)
                    .HasConversion<byte[]>(
                    //v => JsonSerializer.Serialize(v, null).GZipCompressToByte(),
                    v => JsonSerializer.Serialize(v.Select(c => new { c.EventCode, c.EventParam, c.Timestamp }), new JsonSerializerOptions()).GZipCompressToByte(),
                    v => JsonSerializer.Deserialize<List<ControllerEventLog>>(v.GZipDecompressToString(), new JsonSerializerOptions()),

                    new ValueComparer<IList<ControllerEventLog>>((c1, c2) => c1.SequenceEqual(c2),
                    c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                    c => (IList<ControllerEventLog>)c.ToList()));
            });


            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}