#region license
// Copyright 2024 Utah Departement of Transportation
// for SqlDatabaseProvider - ATSPM.Infrastructure.SqlDatabaseProvider.Migrations.EventLog/EventLogContextModelSnapshot.cs
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

// <auto-generated />
using System;
using Utah.Udot.Atspm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATSPM.Infrastructure.SqlDatabaseProvider.Migrations.EventLog
{
    [DbContext(typeof(EventLogContext))]
    partial class EventLogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Utah.Udot.Atspm.Data.Models.CompressedEventsBase", b =>
                {
                    b.Property<string>("LocationIdentifier")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("Date");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("LocationIdentifier", "DeviceId", "ArchiveDate");

                    b.ToTable("CompressedEvents", t =>
                        {
                            t.HasComment("Compressed device data log events");
                        });

                    b.HasDiscriminator<string>("DataType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Utah.Udot.Atspm.Data.Models.CompressedEvents<Utah.Udot.Atspm.Data.Models.EventModels.IndiannaEvent>", b =>
                {
                    b.HasBaseType("Utah.Udot.Atspm.Data.Models.CompressedEventsBase");

                    b.HasDiscriminator().HasValue("Utah.Udot.Atspm.Data.Models.EventModels.IndiannaEvent, Utah.Udot.Atspm.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
                });

            modelBuilder.Entity("Utah.Udot.Atspm.Data.Models.CompressedEvents<Utah.Udot.Atspm.Data.Models.EventModels.PedestrianCounter>", b =>
                {
                    b.HasBaseType("Utah.Udot.Atspm.Data.Models.CompressedEventsBase");

                    b.HasDiscriminator().HasValue("Utah.Udot.Atspm.Data.Models.EventModels.PedestrianCounter, Utah.Udot.Atspm.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
                });

            modelBuilder.Entity("Utah.Udot.Atspm.Data.Models.CompressedEvents<Utah.Udot.Atspm.Data.Models.EventModels.SpeedEvent>", b =>
                {
                    b.HasBaseType("Utah.Udot.Atspm.Data.Models.CompressedEventsBase");

                    b.HasDiscriminator().HasValue("Utah.Udot.Atspm.Data.Models.EventModels.SpeedEvent, Utah.Udot.Atspm.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
                });
#pragma warning restore 612, 618
        }
    }
}
