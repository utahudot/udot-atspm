// <auto-generated />
using System;
using ATSPM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATSPM.Infrasturcture.Migrations
{
    [DbContext(typeof(ConfigContext))]
    partial class ConfigContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ActionLogAction", b =>
                {
                    b.Property<int>("ActionLogActionLogId")
                        .HasColumnType("int")
                        .HasColumnName("ActionLog_ActionLogID");

                    b.Property<int>("ActionActionId")
                        .HasColumnType("int")
                        .HasColumnName("Action_ActionID");

                    b.HasKey("ActionLogActionLogId", "ActionActionId")
                        .HasName("PK_dbo.ActionLogActions");

                    b.HasIndex(new[] { "ActionLogActionLogId" }, "IX_ActionLog_ActionLogID");

                    b.HasIndex(new[] { "ActionActionId" }, "IX_Action_ActionID");

                    b.ToTable("ActionLogActions", (string)null);
                });

            modelBuilder.Entity("ActionLogMetricType", b =>
                {
                    b.Property<int>("ActionLogActionLogId")
                        .HasColumnType("int")
                        .HasColumnName("ActionLog_ActionLogID");

                    b.Property<int>("MetricTypeMetricId")
                        .HasColumnType("int")
                        .HasColumnName("MetricType_MetricID");

                    b.HasKey("ActionLogActionLogId", "MetricTypeMetricId")
                        .HasName("PK_dbo.ActionLogMetricTypes");

                    b.HasIndex(new[] { "ActionLogActionLogId" }, "IX_ActionLog_ActionLogID")
                        .HasDatabaseName("IX_ActionLog_ActionLogID1");

                    b.HasIndex(new[] { "MetricTypeMetricId" }, "IX_MetricType_MetricID");

                    b.ToTable("ActionLogMetricTypes", (string)null);
                });

            modelBuilder.Entity("AreaSignal", b =>
                {
                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<int>("SignalVersionsVersionId")
                        .HasColumnType("int");

                    b.HasKey("AreasId", "SignalVersionsVersionId");

                    b.HasIndex("SignalVersionsVersionId");

                    b.ToTable("AreaSignal");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId2");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLog", b =>
                {
                    b.Property<int>("ActionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActionLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionLogId"), 1L, 1);

                    b.Property<int>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalID");

                    b.HasKey("ActionLogId");

                    b.HasIndex(new[] { "AgencyId" }, "IX_AgencyID");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AgencyId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ApplicationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Function")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeverityLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ApplicationEvent");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<string>("ArchivePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsecutiveCount")
                        .HasColumnType("int");

                    b.Property<int?>("CycleCompletionSeconds")
                        .HasColumnType("int");

                    b.Property<string>("DefaultEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("EmailAllErrors")
                        .HasColumnType("bit");

                    b.Property<string>("EmailServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnableDatbaseArchive")
                        .HasColumnType("bit");

                    b.Property<string>("FromEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LowHitThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDegreeOfParallelism")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumPedestrianEvents")
                        .HasColumnType("int");

                    b.Property<int?>("MinPhaseTerminations")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumRecords")
                        .HasColumnType("int");

                    b.Property<int?>("MonthsToKeepData")
                        .HasColumnType("int");

                    b.Property<int?>("MonthsToKeepIndex")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRows")
                        .HasColumnType("int");

                    b.Property<double?>("PercentThreshold")
                        .HasColumnType("float");

                    b.Property<int?>("PreviousDayPmpeakEnd")
                        .HasColumnType("int")
                        .HasColumnName("PreviousDayPMPeakEnd");

                    b.Property<int?>("PreviousDayPmpeakStart")
                        .HasColumnType("int")
                        .HasColumnName("PreviousDayPMPeakStart");

                    b.Property<int?>("RawDataCountLimit")
                        .HasColumnType("int");

                    b.Property<string>("ReCaptchaPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReCaptchaSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanDayEndHour")
                        .HasColumnType("int");

                    b.Property<int?>("ScanDayStartHour")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedDeleteOrMove")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTableScheme")
                        .HasColumnType("int");

                    b.Property<int?>("StartTime")
                        .HasColumnType("int");

                    b.Property<int?>("TimeDuration")
                        .HasColumnType("int");

                    b.Property<bool?>("WeekdayOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApplicationId" }, "IX_ApplicationID");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Approach", b =>
                {
                    b.Property<int>("ApproachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApproachID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApproachId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DirectionTypeID");

                    b.Property<bool>("IsPedestrianPhaseOverlap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermissivePhaseOverlap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProtectedPhaseOverlap")
                        .HasColumnType("bit");

                    b.Property<int?>("Mph")
                        .HasColumnType("int")
                        .HasColumnName("MPH");

                    b.Property<string>("PedestrianDetectors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PedestrianPhaseNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PermissivePhaseNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProtectedPhaseNumber")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SignalID");

                    b.Property<int>("VersionId")
                        .HasColumnType("int")
                        .HasColumnName("VersionID");

                    b.HasKey("ApproachId");

                    b.HasIndex(new[] { "DirectionTypeId" }, "IX_DirectionTypeID");

                    b.HasIndex(new[] { "VersionId" }, "IX_VersionID");

                    b.ToTable("Approaches");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveAlerts")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUser");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserClaim");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId1");

                    b.ToTable("AspNetUserLogin");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"), 1L, 1);

                    b.Property<int>("ChartType")
                        .HasColumnType("int");

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Comment");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EntityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("CommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.ControllerType", b =>
                {
                    b.Property<int>("ControllerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ControllerTypeId");

                    b.Property<bool>("ActiveFtp")
                        .HasColumnType("bit")
                        .HasColumnName("ActiveFTP");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ftpdirectory")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FTPDirectory");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("Snmpport")
                        .HasColumnType("bigint")
                        .HasColumnName("SNMPPort");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ControllerTypeId");

                    b.ToTable("ControllerTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DatabaseArchiveExcludedSignal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("DatabaseArchiveExcludedSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionHardware", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DetectionHardwares");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionType", b =>
                {
                    b.Property<int>("DetectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DetectionTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetectionTypeId");

                    b.ToTable("DetectionTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionTypeDetector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DetectionTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("IdNavigationId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DetectionTypeID");

                    b.HasIndex("IdNavigationId");

                    b.ToTable("DetectionTypeDetectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Detector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApproachId")
                        .HasColumnType("int")
                        .HasColumnName("ApproachID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDisabled")
                        .HasColumnType("datetime");

                    b.Property<int?>("DecisionPoint")
                        .HasColumnType("int");

                    b.Property<int>("DetChannel")
                        .HasColumnType("int");

                    b.Property<int>("DetectionHardwareId")
                        .HasColumnType("int")
                        .HasColumnName("DetectionHardwareID");

                    b.Property<string>("DetectorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DetectorID");

                    b.Property<int?>("DistanceFromStopBar")
                        .HasColumnType("int");

                    b.Property<int?>("LaneNumber")
                        .HasColumnType("int");

                    b.Property<int?>("LaneTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LaneTypeID");

                    b.Property<double>("LatencyCorrection")
                        .HasColumnType("float");

                    b.Property<int?>("MinSpeedFilter")
                        .HasColumnType("int");

                    b.Property<int?>("MovementDelay")
                        .HasColumnType("int");

                    b.Property<int?>("MovementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MovementTypeID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApproachId" }, "IX_ApproachID");

                    b.HasIndex(new[] { "DetectionHardwareId" }, "IX_DetectionHardwareID");

                    b.HasIndex(new[] { "LaneTypeId" }, "IX_LaneTypeID");

                    b.HasIndex(new[] { "MovementTypeId" }, "IX_MovementTypeID");

                    b.ToTable("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectorComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("CommentId")
                        .HasName("PK_dbo.DetectorComments");

                    b.HasIndex(new[] { "Id" }, "IX_ID");

                    b.ToTable("DetectorComments");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DirectionType", b =>
                {
                    b.Property<int>("DirectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DirectionTypeID");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("DirectionTypeId");

                    b.ToTable("DirectionTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ExternalLink", b =>
                {
                    b.Property<int>("ExternalLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExternalLinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalLinkId"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalLinkId");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Faq", b =>
                {
                    b.Property<int>("Faqid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FAQID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Faqid"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("Faqid");

                    b.ToTable("FAQs", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.Jurisdiction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountyParish")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JurisdictionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mpo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MPO");

                    b.Property<string>("OtherPartners")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Jurisdictions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.LaneType", b =>
                {
                    b.Property<int>("LaneTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LaneTypeID");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("LaneTypeId");

                    b.ToTable("LaneTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MeasuresDefault", b =>
                {
                    b.Property<string>("Measure")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OptionName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Measure", "OptionName")
                        .HasName("PK_dbo.MeasuresDefaults");

                    b.ToTable("MeasuresDefaults");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalID");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionId")
                        .HasColumnType("int")
                        .HasColumnName("VersionID");

                    b.HasKey("CommentId")
                        .HasName("PK_dbo.MetricComments");

                    b.HasIndex(new[] { "VersionId" }, "IX_VersionID")
                        .HasDatabaseName("IX_VersionID1");

                    b.ToTable("MetricComments");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricsFilterType", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FilterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilterId"), 1L, 1);

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterId")
                        .HasName("PK_dbo.MetricsFilterTypes");

                    b.ToTable("MetricsFilterTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricType", b =>
                {
                    b.Property<int>("MetricId")
                        .HasColumnType("int")
                        .HasColumnName("MetricID");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShowOnAggregationSite")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnWebsite")
                        .HasColumnType("bit");

                    b.HasKey("MetricId")
                        .HasName("PK_dbo.MetricTypes");

                    b.ToTable("MetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MovementType", b =>
                {
                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MovementTypeID");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("MovementTypeId");

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.PhaseCycleAggregation", b =>
                {
                    b.Property<DateTime>("BinStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int");

                    b.Property<int>("ApproachId")
                        .HasColumnType("int");

                    b.Property<int>("GreenTime")
                        .HasColumnType("int");

                    b.Property<int>("RedTime")
                        .HasColumnType("int");

                    b.Property<int>("TotalGreenToGreenCycles")
                        .HasColumnType("int");

                    b.Property<int>("TotalRedToRedCycles")
                        .HasColumnType("int");

                    b.Property<int>("YellowTime")
                        .HasColumnType("int");

                    b.HasKey("BinStartTime", "SignalId", "PhaseNumber")
                        .HasName("PK_dbo.PhaseCycleAggregations");

                    b.ToTable("PhaseCycleAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RoutePhaseDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DirectionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOverlap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryApproach")
                        .HasColumnType("bit");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<int>("RouteSignalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DirectionTypeId" }, "IX_DirectionTypeId");

                    b.HasIndex(new[] { "RouteSignalId" }, "IX_RouteSignalId");

                    b.ToTable("RoutePhaseDirections");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RouteSignal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RouteId" }, "IX_RouteId");

                    b.ToTable("RouteSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Signal", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VersionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"), 1L, 1);

                    b.Property<int>("ControllerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ControllerTypeId");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IPAddress")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("JurisdictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('Initial')");

                    b.Property<bool>("Pedsare1to1")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<string>("SecondaryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalID");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((10))");

                    b.HasKey("VersionId")
                        .HasName("PK_dbo.Signals");

                    b.HasIndex(new[] { "ControllerTypeId" }, "IX_ControllerTypeId");

                    b.HasIndex(new[] { "JurisdictionId" }, "IX_JurisdictionId");

                    b.HasIndex(new[] { "RegionId" }, "IX_RegionID");

                    b.HasIndex(new[] { "VersionActionId" }, "IX_VersionActionId");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.SignalToAggregate", b =>
                {
                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalID");

                    b.HasKey("SignalId")
                        .HasName("PK_dbo.SignalToAggregates");

                    b.ToTable("SignalToAggregates");
                });

            modelBuilder.Entity("ATSPM.Data.Models.SpmwatchDogErrorEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DetectorId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DetectorID");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalID");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("SPMWatchDogErrorEvents", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.StatusOfProcessedTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FunctionOrProcedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartitionMonth")
                        .HasColumnType("int");

                    b.Property<string>("PartitionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartitionYear")
                        .HasColumnType("int");

                    b.Property<string>("PartitionedTableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlstatementOrMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SQLStatementOrMessage");

                    b.Property<DateTime?>("TimeEntered")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("StatusOfProcessedTable");
                });

            modelBuilder.Entity("ATSPM.Data.Models.TablePartitionProcessed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IndexRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("PartitionBeginMonth")
                        .HasColumnType("int");

                    b.Property<int>("PartitionBeginYear")
                        .HasColumnType("int");

                    b.Property<int>("PartitionNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwapTableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SwappedTableRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeIndexdropped")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeSwappedTableDropped")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("TablePartitionProcessed");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ToBeProcessededIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClusterText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexId")
                        .HasColumnType("int");

                    b.Property<string>("IndexName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("TextForIndex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ToBeProcessededIndex");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ToBeProcessededTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreateColumns4Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataBaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartitionedTableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreserveDataSelect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreserveDataWhere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Verbose")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ToBeProcessededTable");
                });

            modelBuilder.Entity("ATSPM.Data.Models.VersionAction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VersionActions");
                });

            modelBuilder.Entity("DetectionTypeDetector", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("DetectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DetectionTypeID");

                    b.HasKey("Id", "DetectionTypeId")
                        .HasName("PK_dbo.DetectionTypeDetector");

                    b.HasIndex(new[] { "DetectionTypeId" }, "IX_DetectionTypeID");

                    b.HasIndex(new[] { "Id" }, "IX_ID")
                        .HasDatabaseName("IX_ID1");

                    b.ToTable("DetectionTypeDetector", (string)null);
                });

            modelBuilder.Entity("DetectionTypeMetricType", b =>
                {
                    b.Property<int>("DetectionTypeDetectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DetectionType_DetectionTypeID");

                    b.Property<int>("MetricTypeMetricId")
                        .HasColumnType("int")
                        .HasColumnName("MetricType_MetricID");

                    b.HasKey("DetectionTypeDetectionTypeId", "MetricTypeMetricId")
                        .HasName("PK_dbo.DetectionTypeMetricTypes");

                    b.HasIndex(new[] { "DetectionTypeDetectionTypeId" }, "IX_DetectionType_DetectionTypeID");

                    b.HasIndex(new[] { "MetricTypeMetricId" }, "IX_MetricType_MetricID")
                        .HasDatabaseName("IX_MetricType_MetricID1");

                    b.ToTable("DetectionTypeMetricTypes", (string)null);
                });

            modelBuilder.Entity("MetricCommentMetricType", b =>
                {
                    b.Property<int>("MetricCommentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("MetricComment_CommentID");

                    b.Property<int>("MetricTypeMetricId")
                        .HasColumnType("int")
                        .HasColumnName("MetricType_MetricID");

                    b.HasKey("MetricCommentCommentId", "MetricTypeMetricId")
                        .HasName("PK_dbo.MetricCommentMetricTypes");

                    b.HasIndex(new[] { "MetricCommentCommentId" }, "IX_MetricComment_CommentID");

                    b.HasIndex(new[] { "MetricTypeMetricId" }, "IX_MetricType_MetricID")
                        .HasDatabaseName("IX_MetricType_MetricID2");

                    b.ToTable("MetricCommentMetricTypes", (string)null);
                });

            modelBuilder.Entity("ActionLogAction", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Action", null)
                        .WithMany()
                        .HasForeignKey("ActionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogActions_dbo.Actions_Action_ActionID");

                    b.HasOne("ATSPM.Data.Models.ActionLog", null)
                        .WithMany()
                        .HasForeignKey("ActionLogActionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogActions_dbo.ActionLogs_ActionLog_ActionLogID");
                });

            modelBuilder.Entity("ActionLogMetricType", b =>
                {
                    b.HasOne("ATSPM.Data.Models.ActionLog", null)
                        .WithMany()
                        .HasForeignKey("ActionLogActionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.ActionLogs_ActionLog_ActionLogID");

                    b.HasOne("ATSPM.Data.Models.MetricType", null)
                        .WithMany()
                        .HasForeignKey("MetricTypeMetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.MetricTypes_MetricType_MetricID");
                });

            modelBuilder.Entity("AreaSignal", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATSPM.Data.Models.Signal", null)
                        .WithMany()
                        .HasForeignKey("SignalVersionsVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("ATSPM.Data.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("ATSPM.Data.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLog", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Agency", "Agency")
                        .WithMany("ActionLogs")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogs_dbo.Agencies_AgencyID");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ApplicationSetting", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Application", "Application")
                        .WithMany("ApplicationSettings")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ApplicationSettings_dbo.Applications_ApplicationID");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Approach", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DirectionType", "DirectionType")
                        .WithMany("Approaches")
                        .HasForeignKey("DirectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Approaches_dbo.DirectionTypes_DirectionTypeID");

                    b.Navigation("DirectionType");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("ATSPM.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("ATSPM.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionTypeDetector", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DetectionType", "DetectionType")
                        .WithMany()
                        .HasForeignKey("DetectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATSPM.Data.Models.Detector", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("IdNavigationId");

                    b.Navigation("DetectionType");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Detector", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Approach", "Approach")
                        .WithMany("Detectors")
                        .HasForeignKey("ApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Detectors_dbo.Approaches_ApproachID");

                    b.HasOne("ATSPM.Data.Models.DetectionHardware", "DetectionHardware")
                        .WithMany("Detectors")
                        .HasForeignKey("DetectionHardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Detectors_dbo.DetectionHardwares_DetectionHardwareID");

                    b.HasOne("ATSPM.Data.Models.LaneType", "LaneType")
                        .WithMany("Detectors")
                        .HasForeignKey("LaneTypeId")
                        .HasConstraintName("FK_dbo.Detectors_dbo.LaneTypes_LaneTypeID");

                    b.HasOne("ATSPM.Data.Models.MovementType", "MovementType")
                        .WithMany("Detectors")
                        .HasForeignKey("MovementTypeId")
                        .HasConstraintName("FK_dbo.Detectors_dbo.MovementTypes_MovementTypeID");

                    b.Navigation("Approach");

                    b.Navigation("DetectionHardware");

                    b.Navigation("LaneType");

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectorComment", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Detector", "IdNavigation")
                        .WithMany("DetectorComments")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectorComments_dbo.Detectors_ID");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RoutePhaseDirection", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DirectionType", "DirectionType")
                        .WithMany("RoutePhaseDirections")
                        .HasForeignKey("DirectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.DirectionTypes_DirectionTypeId");

                    b.HasOne("ATSPM.Data.Models.RouteSignal", "RouteSignal")
                        .WithMany("RoutePhaseDirections")
                        .HasForeignKey("RouteSignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.RouteSignals_RouteSignalId");

                    b.Navigation("DirectionType");

                    b.Navigation("RouteSignal");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RouteSignal", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Route", "Route")
                        .WithMany("RouteSignals")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RouteSignals_dbo.Routes_RouteId");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Signal", b =>
                {
                    b.HasOne("ATSPM.Data.Models.ControllerType", "ControllerType")
                        .WithMany("Signals")
                        .HasForeignKey("ControllerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Signals_dbo.ControllerTypes_ControllerTypeId");

                    b.HasOne("ATSPM.Data.Models.Jurisdiction", "Jurisdiction")
                        .WithMany("Signals")
                        .HasForeignKey("JurisdictionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Signals_dbo.Jurisdictions_JurisdictionId");

                    b.HasOne("ATSPM.Data.Models.Region", "Region")
                        .WithMany("Signals")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Signals_dbo.Region_RegionID");

                    b.HasOne("ATSPM.Data.Models.VersionAction", "VersionAction")
                        .WithMany()
                        .HasForeignKey("VersionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControllerType");

                    b.Navigation("Jurisdiction");

                    b.Navigation("Region");

                    b.Navigation("VersionAction");
                });

            modelBuilder.Entity("DetectionTypeDetector", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DetectionType", null)
                        .WithMany()
                        .HasForeignKey("DetectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.DetectionTypes_DetectionTypeID");

                    b.HasOne("ATSPM.Data.Models.Detector", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.Detectors_ID");
                });

            modelBuilder.Entity("DetectionTypeMetricType", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DetectionType", null)
                        .WithMany()
                        .HasForeignKey("DetectionTypeDetectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.DetectionTypes_DetectionType_DetectionTypeID");

                    b.HasOne("ATSPM.Data.Models.MetricType", null)
                        .WithMany()
                        .HasForeignKey("MetricTypeMetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.MetricTypes_MetricType_MetricID");
                });

            modelBuilder.Entity("MetricCommentMetricType", b =>
                {
                    b.HasOne("ATSPM.Data.Models.MetricComment", null)
                        .WithMany()
                        .HasForeignKey("MetricCommentCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricComments_MetricComment_CommentID");

                    b.HasOne("ATSPM.Data.Models.MetricType", null)
                        .WithMany()
                        .HasForeignKey("MetricTypeMetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricTypes_MetricType_MetricID");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Agency", b =>
                {
                    b.Navigation("ActionLogs");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Application", b =>
                {
                    b.Navigation("ApplicationSettings");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Approach", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ControllerType", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionHardware", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Detector", b =>
                {
                    b.Navigation("DetectorComments");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DirectionType", b =>
                {
                    b.Navigation("Approaches");

                    b.Navigation("RoutePhaseDirections");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Jurisdiction", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.LaneType", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MovementType", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Region", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Route", b =>
                {
                    b.Navigation("RouteSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RouteSignal", b =>
                {
                    b.Navigation("RoutePhaseDirections");
                });
#pragma warning restore 612, 618
        }
    }
}
