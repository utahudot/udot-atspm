// <auto-generated />
using System;
using ATSPM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATSPM.Infrasturcture.Migrations.Config
{
    [DbContext(typeof(ConfigContext))]
    partial class ConfigContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ATSPM.Data.Models.Action", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionID");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLog", b =>
                {
                    b.Property<int>("ActionLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActionLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionLogID"), 1L, 1);

                    b.Property<int>("AgencyID")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalId");

                    b.HasKey("ActionLogID");

                    b.HasIndex(new[] { "AgencyID" }, "IX_AgencyID");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLogAction", b =>
                {
                    b.Property<int>("ActionLogActionLogID")
                        .HasColumnType("int")
                        .HasColumnName("ActionLog_ActionLogID");

                    b.Property<int>("ActionActionID")
                        .HasColumnType("int")
                        .HasColumnName("Action_ActionID");

                    b.HasKey("ActionLogActionLogID", "ActionActionID")
                        .HasName("PK_dbo.ActionLogActions");

                    b.HasIndex(new[] { "ActionLogActionLogID" }, "IX_ActionLog_ActionLogID");

                    b.HasIndex(new[] { "ActionActionID" }, "IX_Action_ActionID");

                    b.ToTable("ActionLogActions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLogMetricType", b =>
                {
                    b.Property<int>("ActionLogActionLogID")
                        .HasColumnType("int")
                        .HasColumnName("ActionLog_ActionLogID");

                    b.Property<int>("MetricTypeMetricID")
                        .HasColumnType("int")
                        .HasColumnName("MetricType_MetricID");

                    b.HasKey("ActionLogActionLogID", "MetricTypeMetricID")
                        .HasName("PK_dbo.ActionLogMetricTypes");

                    b.HasIndex(new[] { "ActionLogActionLogID" }, "IX_ActionLog_ActionLogID")
                        .HasDatabaseName("IX_ActionLog_ActionLogID1");

                    b.HasIndex(new[] { "MetricTypeMetricID" }, "IX_MetricType_MetricID");

                    b.ToTable("ActionLogMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Agency", b =>
                {
                    b.Property<int>("AgencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AgencyID");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Application", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ApplicationSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<string>("ArchivePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsecutiveCount")
                        .HasColumnType("int");

                    b.Property<int?>("CycleCompletionSeconds")
                        .HasColumnType("int");

                    b.Property<string>("DefaultEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("EmailAllErrors")
                        .HasColumnType("bit");

                    b.Property<string>("EmailServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnableDatbaseArchive")
                        .HasColumnType("bit");

                    b.Property<string>("FromEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LowHitThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDegreeOfParallelism")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumPedestrianEvents")
                        .HasColumnType("int");

                    b.Property<int?>("MinPhaseTerminations")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumRecords")
                        .HasColumnType("int");

                    b.Property<int?>("MonthsToKeepData")
                        .HasColumnType("int");

                    b.Property<int?>("MonthsToKeepIndex")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRows")
                        .HasColumnType("int");

                    b.Property<double?>("PercentThreshold")
                        .HasColumnType("float");

                    b.Property<int?>("PreviousDayPmpeakEnd")
                        .HasColumnType("int")
                        .HasColumnName("PreviousDayPMPeakEnd");

                    b.Property<int?>("PreviousDayPmpeakStart")
                        .HasColumnType("int")
                        .HasColumnName("PreviousDayPMPeakStart");

                    b.Property<int?>("RawDataCountLimit")
                        .HasColumnType("int");

                    b.Property<string>("ReCaptchaPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReCaptchaSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanDayEndHour")
                        .HasColumnType("int");

                    b.Property<int?>("ScanDayStartHour")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedDeleteOrMove")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedTableScheme")
                        .HasColumnType("int");

                    b.Property<int?>("StartTime")
                        .HasColumnType("int");

                    b.Property<int?>("TimeDuration")
                        .HasColumnType("int");

                    b.Property<bool?>("WeekdayOnly")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ApplicationID" }, "IX_ApplicationID");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Approach", b =>
                {
                    b.Property<int>("ApproachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApproachID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApproachID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectionTypeID")
                        .HasColumnType("int")
                        .HasColumnName("DirectionTypeID");

                    b.Property<bool>("IsPedestrianPhaseOverlap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermissivePhaseOverlap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProtectedPhaseOverlap")
                        .HasColumnType("bit");

                    b.Property<int?>("Mph")
                        .HasColumnType("int")
                        .HasColumnName("MPH");

                    b.Property<string>("PedestrianDetectors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PedestrianPhaseNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PermissivePhaseNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProtectedPhaseNumber")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SignalId");

                    b.Property<int>("VersionID")
                        .HasColumnType("int")
                        .HasColumnName("VersionID");

                    b.HasKey("ApproachID");

                    b.HasIndex(new[] { "DirectionTypeID" }, "IX_DirectionTypeID");

                    b.HasIndex(new[] { "VersionID" }, "IX_VersionID");

                    b.ToTable("Approaches");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Area", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SignalVersionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SignalVersionID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AreaSignal", b =>
                {
                    b.Property<int>("AreaID")
                        .HasColumnType("int")
                        .HasColumnName("Area_ID");

                    b.Property<int>("SignalVersionID")
                        .HasColumnType("int")
                        .HasColumnName("Signal_VersionID");

                    b.HasKey("AreaID", "SignalVersionID")
                        .HasName("PK_dbo.AreaSignals");

                    b.HasIndex(new[] { "AreaID" }, "IX_Area_ID");

                    b.HasIndex(new[] { "SignalVersionID" }, "IX_Signal_VersionID");

                    b.ToTable("AreaSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Comment", b =>
                {
                    b.Property<long>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentID"), 1L, 1);

                    b.Property<int>("ChartType")
                        .HasColumnType("int");

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Comment");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EntityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("CommentID");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.ControllerType", b =>
                {
                    b.Property<int>("ControllerTypeID")
                        .HasColumnType("int")
                        .HasColumnName("ControllerTypeID");

                    b.Property<bool>("ActiveFtp")
                        .HasColumnType("bit")
                        .HasColumnName("ActiveFTP");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ftpdirectory")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FTPDirectory");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("Snmpport")
                        .HasColumnType("bigint")
                        .HasColumnName("SNMPPort");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ControllerTypeID");

                    b.ToTable("ControllerTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DatabaseArchiveExcludedSignal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("DatabaseArchiveExcludedSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionHardware", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DetectionHardwares");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionType", b =>
                {
                    b.Property<int>("DetectionTypeID")
                        .HasColumnType("int")
                        .HasColumnName("DetectionTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetectionTypeID");

                    b.ToTable("DetectionTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionTypeDetector", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("DetectionTypeID")
                        .HasColumnType("int")
                        .HasColumnName("DetectionTypeID");

                    b.HasKey("ID", "DetectionTypeID")
                        .HasName("PK_dbo.DetectionTypeDetector");

                    b.HasIndex(new[] { "DetectionTypeID" }, "IX_DetectionTypeID");

                    b.HasIndex(new[] { "ID" }, "IX_ID");

                    b.ToTable("DetectionTypeDetector", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionTypeMetricType", b =>
                {
                    b.Property<int>("DetectionTypeDetectionTypeID")
                        .HasColumnType("int")
                        .HasColumnName("DetectionType_DetectionTypeID");

                    b.Property<int>("MetricTypeMetricID")
                        .HasColumnType("int")
                        .HasColumnName("MetricType_MetricID");

                    b.HasKey("DetectionTypeDetectionTypeID", "MetricTypeMetricID")
                        .HasName("PK_dbo.DetectionTypeMetricTypes");

                    b.HasIndex(new[] { "DetectionTypeDetectionTypeID" }, "IX_DetectionType_DetectionTypeID");

                    b.HasIndex(new[] { "MetricTypeMetricID" }, "IX_MetricType_MetricID")
                        .HasDatabaseName("IX_MetricType_MetricID1");

                    b.ToTable("DetectionTypeMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Detector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ApproachID")
                        .HasColumnType("int")
                        .HasColumnName("ApproachID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDisabled")
                        .HasColumnType("datetime");

                    b.Property<int?>("DecisionPoint")
                        .HasColumnType("int");

                    b.Property<int>("DetChannel")
                        .HasColumnType("int");

                    b.Property<int>("DetectionHardwareID")
                        .HasColumnType("int")
                        .HasColumnName("DetectionHardwareID");

                    b.Property<string>("DetectorID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DetectorID");

                    b.Property<int?>("DistanceFromStopBar")
                        .HasColumnType("int");

                    b.Property<int?>("LaneNumber")
                        .HasColumnType("int");

                    b.Property<int?>("LaneTypeID")
                        .HasColumnType("int")
                        .HasColumnName("LaneTypeID");

                    b.Property<double>("LatencyCorrection")
                        .HasColumnType("float");

                    b.Property<int?>("MinSpeedFilter")
                        .HasColumnType("int");

                    b.Property<int?>("MovementDelay")
                        .HasColumnType("int");

                    b.Property<int?>("MovementTypeID")
                        .HasColumnType("int")
                        .HasColumnName("MovementTypeID");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ApproachID" }, "IX_ApproachID");

                    b.HasIndex(new[] { "DetectionHardwareID" }, "IX_DetectionHardwareID");

                    b.HasIndex(new[] { "LaneTypeID" }, "IX_LaneTypeID");

                    b.HasIndex(new[] { "MovementTypeID" }, "IX_MovementTypeID");

                    b.ToTable("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectorComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("CommentID")
                        .HasName("PK_dbo.DetectorComments");

                    b.HasIndex(new[] { "ID" }, "IX_ID")
                        .HasDatabaseName("IX_ID1");

                    b.ToTable("DetectorComments");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DirectionType", b =>
                {
                    b.Property<int>("DirectionTypeID")
                        .HasColumnType("int")
                        .HasColumnName("DirectionTypeID");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("DirectionTypeID");

                    b.ToTable("DirectionTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ExternalLink", b =>
                {
                    b.Property<int>("ExternalLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExternalLinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalLinkID"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalLinkID");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Faq", b =>
                {
                    b.Property<int>("FaqID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FAQID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaqID"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("FaqID");

                    b.ToTable("FAQs", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.Jurisdiction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CountyParish")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JurisdictionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mpo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MPO");

                    b.Property<string>("OtherPartners")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Jurisdictions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.LaneType", b =>
                {
                    b.Property<int>("LaneTypeID")
                        .HasColumnType("int")
                        .HasColumnName("LaneTypeID");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("LaneTypeID");

                    b.ToTable("LaneTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MeasuresDefault", b =>
                {
                    b.Property<string>("Measure")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OptionName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Measure", "OptionName")
                        .HasName("PK_dbo.MeasuresDefaults");

                    b.ToTable("MeasuresDefaults");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("MenuID");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalId");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionID")
                        .HasColumnType("int")
                        .HasColumnName("VersionID");

                    b.HasKey("CommentID")
                        .HasName("PK_dbo.MetricComments");

                    b.HasIndex(new[] { "VersionID" }, "IX_VersionID")
                        .HasDatabaseName("IX_VersionID1");

                    b.ToTable("MetricComments");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricCommentMetricType", b =>
                {
                    b.Property<int>("MetricCommentCommentID")
                        .HasColumnType("int")
                        .HasColumnName("MetricComment_CommentID");

                    b.Property<int>("MetricTypeMetricID")
                        .HasColumnType("int")
                        .HasColumnName("MetricType_MetricID");

                    b.HasKey("MetricCommentCommentID", "MetricTypeMetricID")
                        .HasName("PK_dbo.MetricCommentMetricTypes");

                    b.HasIndex(new[] { "MetricCommentCommentID" }, "IX_MetricComment_CommentID");

                    b.HasIndex(new[] { "MetricTypeMetricID" }, "IX_MetricType_MetricID")
                        .HasDatabaseName("IX_MetricType_MetricID2");

                    b.ToTable("MetricCommentMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricsFilterType", b =>
                {
                    b.Property<int>("FilterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FilterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilterID"), 1L, 1);

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterID")
                        .HasName("PK_dbo.MetricsFilterTypes");

                    b.ToTable("MetricsFilterTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricType", b =>
                {
                    b.Property<int>("MetricID")
                        .HasColumnType("int")
                        .HasColumnName("MetricID");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShowOnAggregationSite")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnWebsite")
                        .HasColumnType("bit");

                    b.HasKey("MetricID")
                        .HasName("PK_dbo.MetricTypes");

                    b.ToTable("MetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MovementType", b =>
                {
                    b.Property<int>("MovementTypeID")
                        .HasColumnType("int")
                        .HasColumnName("MovementTypeID");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("MovementTypeID");

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Region", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.Route", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RoutePhaseDirection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DirectionTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsOverlap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryApproach")
                        .HasColumnType("bit");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<int>("RouteSignalId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "DirectionTypeID" }, "IX_DirectionTypeID")
                        .HasDatabaseName("IX_DirectionTypeID1");

                    b.HasIndex(new[] { "RouteSignalId" }, "IX_RouteSignalId");

                    b.ToTable("RoutePhaseDirections");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RouteSignal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RouteID")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "RouteID" }, "IX_RouteID");

                    b.ToTable("RouteSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Signal", b =>
                {
                    b.Property<int>("VersionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VersionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionID"), 1L, 1);

                    b.Property<int>("ControllerTypeID")
                        .HasColumnType("int")
                        .HasColumnName("ControllerTypeID");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IPAddress")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("JurisdictionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('Initial')");

                    b.Property<bool>("Pedsare1to1")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("RegionID")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<string>("SecondaryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalId");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((10))");

                    b.HasKey("VersionID")
                        .HasName("PK_dbo.Signals");

                    b.HasIndex(new[] { "ControllerTypeID" }, "IX_ControllerTypeID");

                    b.HasIndex(new[] { "JurisdictionID" }, "IX_JurisdictionID");

                    b.HasIndex(new[] { "RegionID" }, "IX_RegionID");

                    b.HasIndex(new[] { "VersionActionID" }, "IX_VersionActionID");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.SignalToAggregate", b =>
                {
                    b.Property<string>("SignalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalId");

                    b.HasKey("SignalId")
                        .HasName("PK_dbo.SignalToAggregates");

                    b.ToTable("SignalToAggregates");
                });

            modelBuilder.Entity("ATSPM.Data.Models.SpmwatchDogErrorEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("DetectorID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DetectorID");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SignalId");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.ToTable("SPMWatchDogErrorEvents", (string)null);
                });

            modelBuilder.Entity("ATSPM.Data.Models.VersionAction", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VersionActions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLog", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Agency", "Agency")
                        .WithMany("ActionLogs")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogs_dbo.Agencies_AgencyID");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLogAction", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Action", "ActionAction")
                        .WithMany("ActionLogActions")
                        .HasForeignKey("ActionActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogActions_dbo.Actions_Action_ActionID");

                    b.HasOne("ATSPM.Data.Models.ActionLog", "ActionLogActionLog")
                        .WithMany("ActionLogActions")
                        .HasForeignKey("ActionLogActionLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogActions_dbo.ActionLogs_ActionLog_ActionLogID");

                    b.Navigation("ActionAction");

                    b.Navigation("ActionLogActionLog");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLogMetricType", b =>
                {
                    b.HasOne("ATSPM.Data.Models.ActionLog", "ActionLogActionLog")
                        .WithMany("ActionLogMetricTypes")
                        .HasForeignKey("ActionLogActionLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.ActionLogs_ActionLog_ActionLogID");

                    b.HasOne("ATSPM.Data.Models.MetricType", "MetricTypeMetric")
                        .WithMany("ActionLogMetricTypes")
                        .HasForeignKey("MetricTypeMetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionLogMetricTypes_dbo.MetricTypes_MetricType_MetricID");

                    b.Navigation("ActionLogActionLog");

                    b.Navigation("MetricTypeMetric");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ApplicationSetting", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Application", "Application")
                        .WithMany("ApplicationSettings")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ApplicationSettings_dbo.Applications_ApplicationID");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Approach", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DirectionType", "DirectionType")
                        .WithMany("Approaches")
                        .HasForeignKey("DirectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Approaches_dbo.DirectionTypes_DirectionTypeID");

                    b.Navigation("DirectionType");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Area", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Signal", null)
                        .WithMany("Area")
                        .HasForeignKey("SignalVersionID");
                });

            modelBuilder.Entity("ATSPM.Data.Models.AreaSignal", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Area", "Area")
                        .WithMany("AreaSignals")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AreaSignals_dbo.Areas_Area_ID");

                    b.HasOne("ATSPM.Data.Models.Signal", "SignalVersion")
                        .WithMany()
                        .HasForeignKey("SignalVersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("SignalVersion");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionTypeDetector", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DetectionType", "DetectionType")
                        .WithMany("DetectionTypeDetectors")
                        .HasForeignKey("DetectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.DetectionTypes_DetectionTypeID");

                    b.HasOne("ATSPM.Data.Models.Detector", "IdNavigation")
                        .WithMany("DetectionTypeDetectors")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeDetector_dbo.Detectors_ID");

                    b.Navigation("DetectionType");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionTypeMetricType", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DetectionType", "DetectionTypeDetectionType")
                        .WithMany("DetectionTypeMetricTypes")
                        .HasForeignKey("DetectionTypeDetectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.DetectionTypes_DetectionType_DetectionTypeID");

                    b.HasOne("ATSPM.Data.Models.MetricType", "MetricTypeMetric")
                        .WithMany("DetectionTypeMetricTypes")
                        .HasForeignKey("MetricTypeMetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectionTypeMetricTypes_dbo.MetricTypes_MetricType_MetricID");

                    b.Navigation("DetectionTypeDetectionType");

                    b.Navigation("MetricTypeMetric");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Detector", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Approach", "Approach")
                        .WithMany("Detectors")
                        .HasForeignKey("ApproachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Detectors_dbo.Approaches_ApproachID");

                    b.HasOne("ATSPM.Data.Models.DetectionHardware", "DetectionHardware")
                        .WithMany("Detectors")
                        .HasForeignKey("DetectionHardwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Detectors_dbo.DetectionHardwares_DetectionHardwareID");

                    b.HasOne("ATSPM.Data.Models.LaneType", "LaneType")
                        .WithMany("Detectors")
                        .HasForeignKey("LaneTypeID")
                        .HasConstraintName("FK_dbo.Detectors_dbo.LaneTypes_LaneTypeID");

                    b.HasOne("ATSPM.Data.Models.MovementType", "MovementType")
                        .WithMany("Detectors")
                        .HasForeignKey("MovementTypeID")
                        .HasConstraintName("FK_dbo.Detectors_dbo.MovementTypes_MovementTypeID");

                    b.Navigation("Approach");

                    b.Navigation("DetectionHardware");

                    b.Navigation("LaneType");

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectorComment", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Detector", "IdNavigation")
                        .WithMany("DetectorComments")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DetectorComments_dbo.Detectors_ID");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricCommentMetricType", b =>
                {
                    b.HasOne("ATSPM.Data.Models.MetricComment", "MetricCommentComment")
                        .WithMany("MetricCommentMetricTypes")
                        .HasForeignKey("MetricCommentCommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricComments_MetricComment_CommentID");

                    b.HasOne("ATSPM.Data.Models.MetricType", "MetricTypeMetric")
                        .WithMany("MetricCommentMetricTypes")
                        .HasForeignKey("MetricTypeMetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MetricCommentMetricTypes_dbo.MetricTypes_MetricType_MetricID");

                    b.Navigation("MetricCommentComment");

                    b.Navigation("MetricTypeMetric");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RoutePhaseDirection", b =>
                {
                    b.HasOne("ATSPM.Data.Models.DirectionType", "DirectionType")
                        .WithMany("RoutePhaseDirections")
                        .HasForeignKey("DirectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.DirectionTypes_DirectionTypeID");

                    b.HasOne("ATSPM.Data.Models.RouteSignal", "RouteSignal")
                        .WithMany("RoutePhaseDirections")
                        .HasForeignKey("RouteSignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoutePhaseDirections_dbo.RouteSignals_RouteSignalId");

                    b.Navigation("DirectionType");

                    b.Navigation("RouteSignal");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RouteSignal", b =>
                {
                    b.HasOne("ATSPM.Data.Models.Route", "Route")
                        .WithMany("RouteSignals")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RouteSignals_dbo.Routes_RouteID");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Signal", b =>
                {
                    b.HasOne("ATSPM.Data.Models.ControllerType", "ControllerType")
                        .WithMany("Signals")
                        .HasForeignKey("ControllerTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Signals_dbo.ControllerTypes_ControllerTypeID");

                    b.HasOne("ATSPM.Data.Models.Jurisdiction", "Jurisdiction")
                        .WithMany("Signals")
                        .HasForeignKey("JurisdictionID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Signals_dbo.Jurisdictions_JurisdictionID");

                    b.HasOne("ATSPM.Data.Models.Region", "Region")
                        .WithMany("Signals")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Signals_dbo.Region_RegionID");

                    b.HasOne("ATSPM.Data.Models.VersionAction", "VersionAction")
                        .WithMany()
                        .HasForeignKey("VersionActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControllerType");

                    b.Navigation("Jurisdiction");

                    b.Navigation("Region");

                    b.Navigation("VersionAction");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Action", b =>
                {
                    b.Navigation("ActionLogActions");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ActionLog", b =>
                {
                    b.Navigation("ActionLogActions");

                    b.Navigation("ActionLogMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Agency", b =>
                {
                    b.Navigation("ActionLogs");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Application", b =>
                {
                    b.Navigation("ApplicationSettings");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Approach", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Area", b =>
                {
                    b.Navigation("AreaSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.ControllerType", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionHardware", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DetectionType", b =>
                {
                    b.Navigation("DetectionTypeDetectors");

                    b.Navigation("DetectionTypeMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Detector", b =>
                {
                    b.Navigation("DetectionTypeDetectors");

                    b.Navigation("DetectorComments");
                });

            modelBuilder.Entity("ATSPM.Data.Models.DirectionType", b =>
                {
                    b.Navigation("Approaches");

                    b.Navigation("RoutePhaseDirections");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Jurisdiction", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.LaneType", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricComment", b =>
                {
                    b.Navigation("MetricCommentMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MetricType", b =>
                {
                    b.Navigation("ActionLogMetricTypes");

                    b.Navigation("DetectionTypeMetricTypes");

                    b.Navigation("MetricCommentMetricTypes");
                });

            modelBuilder.Entity("ATSPM.Data.Models.MovementType", b =>
                {
                    b.Navigation("Detectors");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Region", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Route", b =>
                {
                    b.Navigation("RouteSignals");
                });

            modelBuilder.Entity("ATSPM.Data.Models.RouteSignal", b =>
                {
                    b.Navigation("RoutePhaseDirections");
                });

            modelBuilder.Entity("ATSPM.Data.Models.Signal", b =>
                {
                    b.Navigation("Area");
                });
#pragma warning restore 612, 618
        }
    }
}
