// <auto-generated />
using System;
using ATSPM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ATSPM.Infrastructure.PostgreSQLDatabaseProvider.Migrations.Aggregation
{
    [DbContext(typeof(AggregationContext))]
    [Migration("20240207213050_V5_Initial")]
    partial class V5_Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregationBase", b =>
                {
                    b.Property<string>("LocationIdentifier")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("Date");

                    b.Property<string>("DataType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.HasKey("LocationIdentifier", "ArchiveDate", "DataType");

                    b.ToTable("CompressedAggregations", t =>
                        {
                            t.HasComment("Compressed aggregations");
                        });

                    b.HasDiscriminator<string>("DataType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.ApproachPcdAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("ApproachPcdAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.ApproachSpeedAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("ApproachSpeedAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.ApproachSplitFailAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("ApproachSplitFailAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.ApproachYellowRedActivationAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("ApproachYellowRedActivationAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.DetectorEventCountAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("DetectorEventCountAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.PhaseCycleAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("PhaseCycleAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.PhaseLeftTurnGapAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("PhaseLeftTurnGapAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.PhaseSplitMonitorAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("PhaseSplitMonitorAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.PhaseTerminationAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("PhaseTerminationAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.PreemptionAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("PreemptionAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.PriorityAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("PriorityAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.SignalEventCountAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("SignalEventCountAggregation");
                });

            modelBuilder.Entity("ATSPM.Data.Models.CompressedAggregations<ATSPM.Data.Models.AggregationModels.SignalPlanAggregation>", b =>
                {
                    b.HasBaseType("ATSPM.Data.Models.CompressedAggregationBase");

                    b.HasDiscriminator().HasValue("SignalPlanAggregation");
                });
#pragma warning restore 612, 618
        }
    }
}
