#region license
// Copyright 2024 Utah Departement of Transportation
// for Data - Utah.Udot.Atspm.Data/ConfigContext.cs
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Utah.Udot.Atspm.Data.Configuration;
using Utah.Udot.Atspm.Data.Enums;
using Utah.Udot.Atspm.Data.Models;
using Utah.Udot.Atspm.Data.Models;
using Microsoft.EntityFrameworkCore;
using System.Net;

namespace Utah.Udot.Atspm.Data
{
    /// <summary>
    /// Atspm configuration database context
    /// </summary>
    public partial class ConfigContext : DbContext
    {
        /// <inheritdoc/>
        public ConfigContext() { }

        /// <inheritdoc/>
        public ConfigContext(DbContextOptions<ConfigContext> options): base(options) {}

        /// <summary>
        /// Approaches table
        /// </summary>
        public virtual DbSet<Approach> Approaches { get; set; }

        /// <summary>
        /// Area table
        /// </summary>
        public virtual DbSet<Area> Areas { get; set; }

        /// <summary>
        /// Detection type table
        /// </summary>
        public virtual DbSet<DetectionType> DetectionTypes { get; set; }

        /// <summary>
        /// Detector comments table
        /// </summary>
        public virtual DbSet<DetectorComment> DetectorComments { get; set; }

        /// <summary>
        /// Device table
        /// </summary>
        public virtual DbSet<Device> Devices { get; set; }

        /// <summary>
        /// Device configuration table
        /// </summary>
        public virtual DbSet<DeviceConfiguration> DeviceConfigurations { get; set; }

        /// <summary>
        /// Detectors table
        /// </summary>
        public virtual DbSet<Detector> Detectors { get; set; }

        /// <summary>
        /// Direction type table
        /// </summary>
        public virtual DbSet<DirectionType> DirectionTypes { get; set; }

        /// <summary>
        /// Faqs table
        /// </summary>
        public virtual DbSet<Faq> Faqs { get; set; }

        /// <summary>
        /// Jurisdiction table
        /// </summary>
        public virtual DbSet<Jurisdiction> Jurisdictions { get; set; }

        /// <summary>
        /// Locations table
        /// </summary>
        public virtual DbSet<Location> Locations { get; set; }

        /// <summary>
        /// Location types table
        /// </summary>
        public virtual DbSet<LocationType> LocationTypes { get; set; }

        /// <summary>
        /// Menu table
        /// </summary>
        public virtual DbSet<MenuItem> MenuItems { get; set; }

        /// <summary>
        /// Measure comments table
        /// </summary>
        public virtual DbSet<MeasureComment> MeasureComments { get; set; }

        /// <summary>
        /// Measure options table
        /// </summary>
        public virtual DbSet<MeasureOption> MeasureOptions { get; set; }

        /// <summary>
        /// Measure type table
        /// </summary>
        public virtual DbSet<MeasureType> MeasureType { get; set; }

        /// <summary>
        /// Products table
        /// </summary>
        public virtual DbSet<Product> Products { get; set; }

        /// <summary>
        /// Regions table
        /// </summary>
        public virtual DbSet<Region> Regions { get; set; }
        
        /// <summary>
        /// Routes table
        /// </summary>
        public virtual DbSet<Route> Routes { get; set; }

        /// <summary>
        /// Route distances table
        /// </summary>
        public virtual DbSet<RouteDistance> RouteDistances { get; set; }
        
        /// <summary>
        /// Route Locations table
        /// </summary>
        public virtual DbSet<RouteLocation> RouteLocations { get; set; }

        /// <summary>
        /// User areas table
        /// </summary>
        public virtual DbSet<UserArea> UserAreas { get; set; }

        /// <summary>
        /// User jurisdictions table
        /// </summary>
        public virtual DbSet<UserJurisdiction> UserJurisdictions { get; set; }

        /// <summary>
        /// User regions table
        /// </summary>
        public virtual DbSet<UserRegion> UserRegions { get; set; }

        /// <summary>
        /// Version history table
        /// </summary>
        public virtual DbSet<VersionHistory> VersionHistory { get; set; }

        /// <summary>
        /// Watchdog log events
        /// </summary>
        public virtual DbSet<WatchDogLogEvent> WatchDogLogEvents { get; set; }

        /// <summary>
        /// Watchdog log events
        /// </summary>
        public virtual DbSet<WatchDogIgnoreEvent> WatchDogIgnoreEvents { get; set; }

        /// <inheritdoc/>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
            configurationBuilder.Properties<string>().AreUnicode(false);
            configurationBuilder.Properties<IPAddress>().HaveConversion<string>();
            configurationBuilder.Properties<DetectionHardwareTypes>().HaveConversion<int>();
            configurationBuilder.Properties<LocationVersionActions>().HaveConversion<int>();
            configurationBuilder.Properties<DirectionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<LaneTypes>().HaveConversion<int>();
            configurationBuilder.Properties<MovementTypes>().HaveConversion<int>();
            configurationBuilder.Properties<DetectionTypes>().HaveConversion<int>();
            configurationBuilder.Properties<TransportProtocols>().HaveConversion<string>();
            configurationBuilder.Properties<DeviceTypes>().HaveConversion<string>();
            configurationBuilder.Properties<DeviceStatus>().HaveConversion<string>();

            if (Database.IsNpgsql())
                configurationBuilder.Properties<DateTime>().HaveColumnType("timestamp");
            //else
            //    configurationBuilder.Properties<DateTime>().HaveColumnType("datetime");
        }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new ApproachConfiguration());
            modelBuilder.ApplyConfiguration(new AreaConfiguration());
            modelBuilder.ApplyConfiguration(new DetectionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new DetectorConfiguration());
            modelBuilder.ApplyConfiguration(new DetectorCommentConfiguration());
            modelBuilder.ApplyConfiguration(new DevicesConfiguration());
            modelBuilder.ApplyConfiguration(new DeviceConfigConfiguration());
            modelBuilder.ApplyConfiguration(new DirectionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new FaqConfiguration());
            modelBuilder.ApplyConfiguration(new LocationConfiguration());
            modelBuilder.ApplyConfiguration(new LocationTypeConfiguration());
            modelBuilder.ApplyConfiguration(new JurisdictionConfiguration());
            modelBuilder.ApplyConfiguration(new MenuItemConfiguration());
            modelBuilder.ApplyConfiguration(new MeasureCommentConfiguration());
            modelBuilder.ApplyConfiguration(new MeasureOptionsConfiguration());
            modelBuilder.ApplyConfiguration(new MeasureTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ProductConfiguration());
            modelBuilder.ApplyConfiguration(new RegionConfiguration());
            modelBuilder.ApplyConfiguration(new RouteConfiguration());
            modelBuilder.ApplyConfiguration(new RouteDistanceConfiguration());
            modelBuilder.ApplyConfiguration(new RouteLocationConfiguration());
            modelBuilder.ApplyConfiguration(new UserAreaConfiguration());
            modelBuilder.ApplyConfiguration(new UserJurisdictionConfiguration());
            modelBuilder.ApplyConfiguration(new UserRegionConfiguration());
            modelBuilder.ApplyConfiguration(new VersionHistoryConfiguration());
            //modelBuilder.ApplyConfiguration(new WatchDogIgnoreEventConfiguration());

            //Set keys to null for optional relationships
            foreach (var fk in modelBuilder.Model.GetEntityTypes()
                .SelectMany(t => t.GetForeignKeys())
                .Where(w => !w.IsRequired)
                .Where(w => !w.IsOwnership)
                .Where(w => w.DeleteBehavior == DeleteBehavior.Cascade))
            {
                fk.DeleteBehavior = DeleteBehavior.ClientSetNull;
            }

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}