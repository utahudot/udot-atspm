/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetMapLayerCountParams,
  GetMapLayerFromKeyParams,
  GetMapLayerParams,
  MapLayer,
  PatchMapLayerFromKeyParams,
  PostMapLayerParams,
  PutMapLayerFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Collection of objects from oData query.
 */
export const getMapLayer = (
    params?: GetMapLayerParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MapLayer[]>(
      {url: `/api/v1/MapLayer`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMapLayerQueryKey = (params?: GetMapLayerParams,) => {
    return [`/api/v1/MapLayer`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMapLayerQueryOptions = <TData = Awaited<ReturnType<typeof getMapLayer>>, TError = void>(params?: GetMapLayerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapLayer>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMapLayerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapLayer>>> = ({ signal }) => getMapLayer(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMapLayer>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMapLayerQueryResult = NonNullable<Awaited<ReturnType<typeof getMapLayer>>>
export type GetMapLayerQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useGetMapLayer<TData = Awaited<ReturnType<typeof getMapLayer>>, TError = void>(
 params?: GetMapLayerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapLayer>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMapLayerQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Insert object of specified type
 */
export const postMapLayer = (
    mapLayer: MapLayer,
    params?: PostMapLayerParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MapLayer`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: mapLayer,
        params, signal
    },
      );
    }
  


export const getPostMapLayerMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMapLayer>>, TError,{data: MapLayer;params?: PostMapLayerParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMapLayer>>, TError,{data: MapLayer;params?: PostMapLayerParams}, TContext> => {

const mutationKey = ['postMapLayer'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMapLayer>>, {data: MapLayer;params?: PostMapLayerParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postMapLayer(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMapLayerMutationResult = NonNullable<Awaited<ReturnType<typeof postMapLayer>>>
    export type PostMapLayerMutationBody = MapLayer
    export type PostMapLayerMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const usePostMapLayer = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMapLayer>>, TError,{data: MapLayer;params?: PostMapLayerParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMapLayer>>,
        TError,
        {data: MapLayer;params?: PostMapLayerParams},
        TContext
      > => {

      const mutationOptions = getPostMapLayerMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Collection of objects from oData query.
 */
export const getMapLayerCount = (
    params?: GetMapLayerCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MapLayer[]>(
      {url: `/api/v1/MapLayer/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMapLayerCountQueryKey = (params?: GetMapLayerCountParams,) => {
    return [`/api/v1/MapLayer/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMapLayerCountQueryOptions = <TData = Awaited<ReturnType<typeof getMapLayerCount>>, TError = void>(params?: GetMapLayerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapLayerCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMapLayerCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapLayerCount>>> = ({ signal }) => getMapLayerCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMapLayerCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMapLayerCountQueryResult = NonNullable<Awaited<ReturnType<typeof getMapLayerCount>>>
export type GetMapLayerCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useGetMapLayerCount<TData = Awaited<ReturnType<typeof getMapLayerCount>>, TError = void>(
 params?: GetMapLayerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapLayerCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMapLayerCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary object with key from oData query.
 */
export const getMapLayerFromKey = (
    key: number,
    params?: GetMapLayerFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MapLayer>(
      {url: `/api/v1/MapLayer/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMapLayerFromKeyQueryKey = (key: number,
    params?: GetMapLayerFromKeyParams,) => {
    return [`/api/v1/MapLayer/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMapLayerFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMapLayerFromKey>>, TError = void>(key: number,
    params?: GetMapLayerFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapLayerFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMapLayerFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapLayerFromKey>>> = ({ signal }) => getMapLayerFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMapLayerFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMapLayerFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMapLayerFromKey>>>
export type GetMapLayerFromKeyQueryError = void


/**
 * @summary object with key from oData query.
 */

export function useGetMapLayerFromKey<TData = Awaited<ReturnType<typeof getMapLayerFromKey>>, TError = void>(
 key: number,
    params?: GetMapLayerFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapLayerFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMapLayerFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putMapLayerFromKey = (
    key: number,
    mapLayer: MapLayer,
    params?: PutMapLayerFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MapLayer/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: mapLayer,
        params
    },
      );
    }
  


export const getPutMapLayerFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMapLayerFromKey>>, TError,{key: number;data: MapLayer;params?: PutMapLayerFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMapLayerFromKey>>, TError,{key: number;data: MapLayer;params?: PutMapLayerFromKeyParams}, TContext> => {

const mutationKey = ['putMapLayerFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMapLayerFromKey>>, {key: number;data: MapLayer;params?: PutMapLayerFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putMapLayerFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMapLayerFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMapLayerFromKey>>>
    export type PutMapLayerFromKeyMutationBody = MapLayer
    export type PutMapLayerFromKeyMutationError = void

    export const usePutMapLayerFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMapLayerFromKey>>, TError,{key: number;data: MapLayer;params?: PutMapLayerFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMapLayerFromKey>>,
        TError,
        {key: number;data: MapLayer;params?: PutMapLayerFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutMapLayerFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Update object of specified type
 */
export const patchMapLayerFromKey = (
    key: number,
    mapLayer: MapLayer,
    params?: PatchMapLayerFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MapLayer/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: mapLayer,
        params
    },
      );
    }
  


export const getPatchMapLayerFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMapLayerFromKey>>, TError,{key: number;data: MapLayer;params?: PatchMapLayerFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchMapLayerFromKey>>, TError,{key: number;data: MapLayer;params?: PatchMapLayerFromKeyParams}, TContext> => {

const mutationKey = ['patchMapLayerFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMapLayerFromKey>>, {key: number;data: MapLayer;params?: PatchMapLayerFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchMapLayerFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMapLayerFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchMapLayerFromKey>>>
    export type PatchMapLayerFromKeyMutationBody = MapLayer
    export type PatchMapLayerFromKeyMutationError = void

    /**
 * @summary Update object of specified type
 */
export const usePatchMapLayerFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMapLayerFromKey>>, TError,{key: number;data: MapLayer;params?: PatchMapLayerFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchMapLayerFromKey>>,
        TError,
        {key: number;data: MapLayer;params?: PatchMapLayerFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchMapLayerFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete object of specified type
 */
export const deleteMapLayerFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MapLayer/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMapLayerFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapLayerFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMapLayerFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteMapLayerFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMapLayerFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteMapLayerFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMapLayerFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMapLayerFromKey>>>
    
    export type DeleteMapLayerFromKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useDeleteMapLayerFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapLayerFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMapLayerFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteMapLayerFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    