/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetJurisdictionCountParams,
  GetJurisdictionFromKeyParams,
  GetJurisdictionLocationsCountFromKeyParams,
  GetJurisdictionLocationsFromKeyParams,
  GetJurisdictionParams,
  Jurisdiction,
  Location,
  PatchJurisdictionFromKeyParams,
  PostJurisdictionParams,
  PutJurisdictionFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getJurisdictionLocationsFromKey = (
    key: number,
    params?: GetJurisdictionLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/api/v1/Jurisdiction/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetJurisdictionLocationsFromKeyQueryKey = (key: number,
    params?: GetJurisdictionLocationsFromKeyParams,) => {
    return [`/api/v1/Jurisdiction/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetJurisdictionLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>, TError = void>(key: number,
    params?: GetJurisdictionLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetJurisdictionLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>> = ({ signal }) => getJurisdictionLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetJurisdictionLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>>
export type GetJurisdictionLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetJurisdictionLocationsFromKey<TData = Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetJurisdictionLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetJurisdictionLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getJurisdictionLocationsCountFromKey = (
    key: number,
    params?: GetJurisdictionLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/api/v1/Jurisdiction/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetJurisdictionLocationsCountFromKeyQueryKey = (key: number,
    params?: GetJurisdictionLocationsCountFromKeyParams,) => {
    return [`/api/v1/Jurisdiction/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetJurisdictionLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetJurisdictionLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetJurisdictionLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>> = ({ signal }) => getJurisdictionLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetJurisdictionLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>>
export type GetJurisdictionLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetJurisdictionLocationsCountFromKey<TData = Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetJurisdictionLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetJurisdictionLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getJurisdiction = (
    params?: GetJurisdictionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Jurisdiction[]>(
      {url: `/api/v1/Jurisdiction`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetJurisdictionQueryKey = (params?: GetJurisdictionParams,) => {
    return [`/api/v1/Jurisdiction`, ...(params ? [params]: [])] as const;
    }

    
export const getGetJurisdictionQueryOptions = <TData = Awaited<ReturnType<typeof getJurisdiction>>, TError = void>(params?: GetJurisdictionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdiction>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetJurisdictionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getJurisdiction>>> = ({ signal }) => getJurisdiction(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getJurisdiction>>, TError, TData> & { queryKey: QueryKey }
}

export type GetJurisdictionQueryResult = NonNullable<Awaited<ReturnType<typeof getJurisdiction>>>
export type GetJurisdictionQueryError = void



export function useGetJurisdiction<TData = Awaited<ReturnType<typeof getJurisdiction>>, TError = void>(
 params?: GetJurisdictionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdiction>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetJurisdictionQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postJurisdiction = (
    jurisdiction: Jurisdiction,
    params?: PostJurisdictionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Jurisdiction`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: jurisdiction,
        params, signal
    },
      );
    }
  


export const getPostJurisdictionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postJurisdiction>>, TError,{data: Jurisdiction;params?: PostJurisdictionParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postJurisdiction>>, TError,{data: Jurisdiction;params?: PostJurisdictionParams}, TContext> => {

const mutationKey = ['postJurisdiction'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postJurisdiction>>, {data: Jurisdiction;params?: PostJurisdictionParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postJurisdiction(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostJurisdictionMutationResult = NonNullable<Awaited<ReturnType<typeof postJurisdiction>>>
    export type PostJurisdictionMutationBody = Jurisdiction
    export type PostJurisdictionMutationError = void

    export const usePostJurisdiction = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postJurisdiction>>, TError,{data: Jurisdiction;params?: PostJurisdictionParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postJurisdiction>>,
        TError,
        {data: Jurisdiction;params?: PostJurisdictionParams},
        TContext
      > => {

      const mutationOptions = getPostJurisdictionMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getJurisdictionCount = (
    params?: GetJurisdictionCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Jurisdiction[]>(
      {url: `/api/v1/Jurisdiction/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetJurisdictionCountQueryKey = (params?: GetJurisdictionCountParams,) => {
    return [`/api/v1/Jurisdiction/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetJurisdictionCountQueryOptions = <TData = Awaited<ReturnType<typeof getJurisdictionCount>>, TError = void>(params?: GetJurisdictionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetJurisdictionCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getJurisdictionCount>>> = ({ signal }) => getJurisdictionCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetJurisdictionCountQueryResult = NonNullable<Awaited<ReturnType<typeof getJurisdictionCount>>>
export type GetJurisdictionCountQueryError = void



export function useGetJurisdictionCount<TData = Awaited<ReturnType<typeof getJurisdictionCount>>, TError = void>(
 params?: GetJurisdictionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetJurisdictionCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getJurisdictionFromKey = (
    key: number,
    params?: GetJurisdictionFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Jurisdiction>(
      {url: `/api/v1/Jurisdiction/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetJurisdictionFromKeyQueryKey = (key: number,
    params?: GetJurisdictionFromKeyParams,) => {
    return [`/api/v1/Jurisdiction/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetJurisdictionFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getJurisdictionFromKey>>, TError = void>(key: number,
    params?: GetJurisdictionFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetJurisdictionFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getJurisdictionFromKey>>> = ({ signal }) => getJurisdictionFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetJurisdictionFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getJurisdictionFromKey>>>
export type GetJurisdictionFromKeyQueryError = void



export function useGetJurisdictionFromKey<TData = Awaited<ReturnType<typeof getJurisdictionFromKey>>, TError = void>(
 key: number,
    params?: GetJurisdictionFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getJurisdictionFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetJurisdictionFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putJurisdictionFromKey = (
    key: number,
    jurisdiction: Jurisdiction,
    params?: PutJurisdictionFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Jurisdiction/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: jurisdiction,
        params
    },
      );
    }
  


export const getPutJurisdictionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putJurisdictionFromKey>>, TError,{key: number;data: Jurisdiction;params?: PutJurisdictionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putJurisdictionFromKey>>, TError,{key: number;data: Jurisdiction;params?: PutJurisdictionFromKeyParams}, TContext> => {

const mutationKey = ['putJurisdictionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putJurisdictionFromKey>>, {key: number;data: Jurisdiction;params?: PutJurisdictionFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putJurisdictionFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutJurisdictionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putJurisdictionFromKey>>>
    export type PutJurisdictionFromKeyMutationBody = Jurisdiction
    export type PutJurisdictionFromKeyMutationError = void

    export const usePutJurisdictionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putJurisdictionFromKey>>, TError,{key: number;data: Jurisdiction;params?: PutJurisdictionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putJurisdictionFromKey>>,
        TError,
        {key: number;data: Jurisdiction;params?: PutJurisdictionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutJurisdictionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchJurisdictionFromKey = (
    key: number,
    jurisdiction: Jurisdiction,
    params?: PatchJurisdictionFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Jurisdiction/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: jurisdiction,
        params
    },
      );
    }
  


export const getPatchJurisdictionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchJurisdictionFromKey>>, TError,{key: number;data: Jurisdiction;params?: PatchJurisdictionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchJurisdictionFromKey>>, TError,{key: number;data: Jurisdiction;params?: PatchJurisdictionFromKeyParams}, TContext> => {

const mutationKey = ['patchJurisdictionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchJurisdictionFromKey>>, {key: number;data: Jurisdiction;params?: PatchJurisdictionFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchJurisdictionFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchJurisdictionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchJurisdictionFromKey>>>
    export type PatchJurisdictionFromKeyMutationBody = Jurisdiction
    export type PatchJurisdictionFromKeyMutationError = void

    export const usePatchJurisdictionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchJurisdictionFromKey>>, TError,{key: number;data: Jurisdiction;params?: PatchJurisdictionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchJurisdictionFromKey>>,
        TError,
        {key: number;data: Jurisdiction;params?: PatchJurisdictionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchJurisdictionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteJurisdictionFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Jurisdiction/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteJurisdictionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteJurisdictionFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteJurisdictionFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteJurisdictionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteJurisdictionFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteJurisdictionFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteJurisdictionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteJurisdictionFromKey>>>
    
    export type DeleteJurisdictionFromKeyMutationError = void

    export const useDeleteJurisdictionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteJurisdictionFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteJurisdictionFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteJurisdictionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    