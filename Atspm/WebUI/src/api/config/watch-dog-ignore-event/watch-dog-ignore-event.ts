/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetWatchDogIgnoreEventCountParams,
  GetWatchDogIgnoreEventFromKeyParams,
  GetWatchDogIgnoreEventParams,
  PatchWatchDogIgnoreEventFromKeyParams,
  PostWatchDogIgnoreEventParams,
  PutWatchDogIgnoreEventFromKeyParams,
  WatchDogIgnoreEvent
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getWatchDogIgnoreEvent = (
    params?: GetWatchDogIgnoreEventParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<WatchDogIgnoreEvent[]>(
      {url: `/api/v1/WatchDogIgnoreEvent`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWatchDogIgnoreEventQueryKey = (params?: GetWatchDogIgnoreEventParams,) => {
    return [`/api/v1/WatchDogIgnoreEvent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWatchDogIgnoreEventQueryOptions = <TData = Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>, TError = void>(params?: GetWatchDogIgnoreEventParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWatchDogIgnoreEventQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>> = ({ signal }) => getWatchDogIgnoreEvent(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWatchDogIgnoreEventQueryResult = NonNullable<Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>>
export type GetWatchDogIgnoreEventQueryError = void



export function useGetWatchDogIgnoreEvent<TData = Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>, TError = void>(
 params?: GetWatchDogIgnoreEventParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWatchDogIgnoreEventQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postWatchDogIgnoreEvent = (
    watchDogIgnoreEvent: WatchDogIgnoreEvent,
    params?: PostWatchDogIgnoreEventParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/WatchDogIgnoreEvent`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: watchDogIgnoreEvent,
        params, signal
    },
      );
    }
  


export const getPostWatchDogIgnoreEventMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>, TError,{data: WatchDogIgnoreEvent;params?: PostWatchDogIgnoreEventParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>, TError,{data: WatchDogIgnoreEvent;params?: PostWatchDogIgnoreEventParams}, TContext> => {

const mutationKey = ['postWatchDogIgnoreEvent'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>, {data: WatchDogIgnoreEvent;params?: PostWatchDogIgnoreEventParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postWatchDogIgnoreEvent(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWatchDogIgnoreEventMutationResult = NonNullable<Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>>
    export type PostWatchDogIgnoreEventMutationBody = WatchDogIgnoreEvent
    export type PostWatchDogIgnoreEventMutationError = void

    export const usePostWatchDogIgnoreEvent = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>, TError,{data: WatchDogIgnoreEvent;params?: PostWatchDogIgnoreEventParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>,
        TError,
        {data: WatchDogIgnoreEvent;params?: PostWatchDogIgnoreEventParams},
        TContext
      > => {

      const mutationOptions = getPostWatchDogIgnoreEventMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getWatchDogIgnoreEventCount = (
    params?: GetWatchDogIgnoreEventCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<WatchDogIgnoreEvent[]>(
      {url: `/api/v1/WatchDogIgnoreEvent/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWatchDogIgnoreEventCountQueryKey = (params?: GetWatchDogIgnoreEventCountParams,) => {
    return [`/api/v1/WatchDogIgnoreEvent/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWatchDogIgnoreEventCountQueryOptions = <TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>, TError = void>(params?: GetWatchDogIgnoreEventCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWatchDogIgnoreEventCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>> = ({ signal }) => getWatchDogIgnoreEventCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWatchDogIgnoreEventCountQueryResult = NonNullable<Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>>
export type GetWatchDogIgnoreEventCountQueryError = void



export function useGetWatchDogIgnoreEventCount<TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>, TError = void>(
 params?: GetWatchDogIgnoreEventCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWatchDogIgnoreEventCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getWatchDogIgnoreEventFromKey = (
    key: number,
    params?: GetWatchDogIgnoreEventFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<WatchDogIgnoreEvent>(
      {url: `/api/v1/WatchDogIgnoreEvent/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWatchDogIgnoreEventFromKeyQueryKey = (key: number,
    params?: GetWatchDogIgnoreEventFromKeyParams,) => {
    return [`/api/v1/WatchDogIgnoreEvent/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWatchDogIgnoreEventFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>, TError = void>(key: number,
    params?: GetWatchDogIgnoreEventFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWatchDogIgnoreEventFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>> = ({ signal }) => getWatchDogIgnoreEventFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWatchDogIgnoreEventFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>>
export type GetWatchDogIgnoreEventFromKeyQueryError = void



export function useGetWatchDogIgnoreEventFromKey<TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>, TError = void>(
 key: number,
    params?: GetWatchDogIgnoreEventFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWatchDogIgnoreEventFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putWatchDogIgnoreEventFromKey = (
    key: number,
    watchDogIgnoreEvent: WatchDogIgnoreEvent,
    params?: PutWatchDogIgnoreEventFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/WatchDogIgnoreEvent/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: watchDogIgnoreEvent,
        params
    },
      );
    }
  


export const getPutWatchDogIgnoreEventFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>, TError,{key: number;data: WatchDogIgnoreEvent;params?: PutWatchDogIgnoreEventFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>, TError,{key: number;data: WatchDogIgnoreEvent;params?: PutWatchDogIgnoreEventFromKeyParams}, TContext> => {

const mutationKey = ['putWatchDogIgnoreEventFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>, {key: number;data: WatchDogIgnoreEvent;params?: PutWatchDogIgnoreEventFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putWatchDogIgnoreEventFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutWatchDogIgnoreEventFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>>
    export type PutWatchDogIgnoreEventFromKeyMutationBody = WatchDogIgnoreEvent
    export type PutWatchDogIgnoreEventFromKeyMutationError = void

    export const usePutWatchDogIgnoreEventFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>, TError,{key: number;data: WatchDogIgnoreEvent;params?: PutWatchDogIgnoreEventFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>,
        TError,
        {key: number;data: WatchDogIgnoreEvent;params?: PutWatchDogIgnoreEventFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutWatchDogIgnoreEventFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchWatchDogIgnoreEventFromKey = (
    key: number,
    watchDogIgnoreEvent: WatchDogIgnoreEvent,
    params?: PatchWatchDogIgnoreEventFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/WatchDogIgnoreEvent/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: watchDogIgnoreEvent,
        params
    },
      );
    }
  


export const getPatchWatchDogIgnoreEventFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>, TError,{key: number;data: WatchDogIgnoreEvent;params?: PatchWatchDogIgnoreEventFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>, TError,{key: number;data: WatchDogIgnoreEvent;params?: PatchWatchDogIgnoreEventFromKeyParams}, TContext> => {

const mutationKey = ['patchWatchDogIgnoreEventFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>, {key: number;data: WatchDogIgnoreEvent;params?: PatchWatchDogIgnoreEventFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchWatchDogIgnoreEventFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchWatchDogIgnoreEventFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>>
    export type PatchWatchDogIgnoreEventFromKeyMutationBody = WatchDogIgnoreEvent
    export type PatchWatchDogIgnoreEventFromKeyMutationError = void

    export const usePatchWatchDogIgnoreEventFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>, TError,{key: number;data: WatchDogIgnoreEvent;params?: PatchWatchDogIgnoreEventFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>,
        TError,
        {key: number;data: WatchDogIgnoreEvent;params?: PatchWatchDogIgnoreEventFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchWatchDogIgnoreEventFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteWatchDogIgnoreEventFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/WatchDogIgnoreEvent/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteWatchDogIgnoreEventFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteWatchDogIgnoreEventFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteWatchDogIgnoreEventFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWatchDogIgnoreEventFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>>
    
    export type DeleteWatchDogIgnoreEventFromKeyMutationError = void

    export const useDeleteWatchDogIgnoreEventFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteWatchDogIgnoreEventFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    