/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Approach,
  DirectionType,
  GetDirectionTypeApproachesCountFromKeyParams,
  GetDirectionTypeApproachesFromKeyParams,
  GetDirectionTypeCountParams,
  GetDirectionTypeFromKeyParams,
  GetDirectionTypeOpposingDirectionsCountFromKeyParams,
  GetDirectionTypeOpposingDirectionsFromKeyParams,
  GetDirectionTypeParams,
  GetDirectionTypePrimaryDirectionsCountFromKeyParams,
  GetDirectionTypePrimaryDirectionsFromKeyParams,
  PatchDirectionTypeFromKeyParams,
  PostDirectionTypeParams,
  PutDirectionTypeFromKeyParams,
  RouteLocation
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getDirectionTypeApproachesFromKey = (
    key: string,
    params?: GetDirectionTypeApproachesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach[]>(
      {url: `/DirectionType/${key}/approaches`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeApproachesFromKeyQueryKey = (key: string,
    params?: GetDirectionTypeApproachesFromKeyParams,) => {
    return [`/DirectionType/${key}/approaches`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeApproachesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypeApproachesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeApproachesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>> = ({ signal }) => getDirectionTypeApproachesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeApproachesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>>
export type GetDirectionTypeApproachesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useGetDirectionTypeApproachesFromKey<TData = Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypeApproachesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeApproachesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getDirectionTypeApproachesCountFromKey = (
    key: string,
    params?: GetDirectionTypeApproachesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach[]>(
      {url: `/DirectionType/${key}/approaches/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeApproachesCountFromKeyQueryKey = (key: string,
    params?: GetDirectionTypeApproachesCountFromKeyParams,) => {
    return [`/DirectionType/${key}/approaches/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeApproachesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypeApproachesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeApproachesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>> = ({ signal }) => getDirectionTypeApproachesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeApproachesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>>
export type GetDirectionTypeApproachesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useGetDirectionTypeApproachesCountFromKey<TData = Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypeApproachesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeApproachesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypePrimaryDirectionsFromKey = (
    key: string,
    params?: GetDirectionTypePrimaryDirectionsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/DirectionType/${key}/primaryDirections`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypePrimaryDirectionsFromKeyQueryKey = (key: string,
    params?: GetDirectionTypePrimaryDirectionsFromKeyParams,) => {
    return [`/DirectionType/${key}/primaryDirections`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypePrimaryDirectionsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypePrimaryDirectionsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypePrimaryDirectionsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>> = ({ signal }) => getDirectionTypePrimaryDirectionsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypePrimaryDirectionsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>>
export type GetDirectionTypePrimaryDirectionsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetDirectionTypePrimaryDirectionsFromKey<TData = Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypePrimaryDirectionsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypePrimaryDirectionsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypePrimaryDirectionsCountFromKey = (
    key: string,
    params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/DirectionType/${key}/primaryDirections/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypePrimaryDirectionsCountFromKeyQueryKey = (key: string,
    params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams,) => {
    return [`/DirectionType/${key}/primaryDirections/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypePrimaryDirectionsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypePrimaryDirectionsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>> = ({ signal }) => getDirectionTypePrimaryDirectionsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypePrimaryDirectionsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>>
export type GetDirectionTypePrimaryDirectionsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetDirectionTypePrimaryDirectionsCountFromKey<TData = Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypePrimaryDirectionsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypeOpposingDirectionsFromKey = (
    key: string,
    params?: GetDirectionTypeOpposingDirectionsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/DirectionType/${key}/opposingDirections`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeOpposingDirectionsFromKeyQueryKey = (key: string,
    params?: GetDirectionTypeOpposingDirectionsFromKeyParams,) => {
    return [`/DirectionType/${key}/opposingDirections`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeOpposingDirectionsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypeOpposingDirectionsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeOpposingDirectionsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>> = ({ signal }) => getDirectionTypeOpposingDirectionsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeOpposingDirectionsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>>
export type GetDirectionTypeOpposingDirectionsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetDirectionTypeOpposingDirectionsFromKey<TData = Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypeOpposingDirectionsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeOpposingDirectionsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypeOpposingDirectionsCountFromKey = (
    key: string,
    params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/DirectionType/${key}/opposingDirections/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeOpposingDirectionsCountFromKeyQueryKey = (key: string,
    params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams,) => {
    return [`/DirectionType/${key}/opposingDirections/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeOpposingDirectionsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeOpposingDirectionsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>> = ({ signal }) => getDirectionTypeOpposingDirectionsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeOpposingDirectionsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>>
export type GetDirectionTypeOpposingDirectionsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetDirectionTypeOpposingDirectionsCountFromKey<TData = Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeOpposingDirectionsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDirectionType = (
    params?: GetDirectionTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DirectionType[]>(
      {url: `/DirectionType`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeQueryKey = (params?: GetDirectionTypeParams,) => {
    return [`/DirectionType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionType>>, TError = void>(params?: GetDirectionTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionType>>> = ({ signal }) => getDirectionType(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionType>>>
export type GetDirectionTypeQueryError = void



export function useGetDirectionType<TData = Awaited<ReturnType<typeof getDirectionType>>, TError = void>(
 params?: GetDirectionTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionType>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postDirectionType = (
    directionType: DirectionType,
    params?: PostDirectionTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/DirectionType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: directionType,
        params, signal
    },
      );
    }
  


export const getPostDirectionTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDirectionType>>, TError,{data: DirectionType;params?: PostDirectionTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postDirectionType>>, TError,{data: DirectionType;params?: PostDirectionTypeParams}, TContext> => {

const mutationKey = ['postDirectionType'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDirectionType>>, {data: DirectionType;params?: PostDirectionTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postDirectionType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDirectionTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postDirectionType>>>
    export type PostDirectionTypeMutationBody = DirectionType
    export type PostDirectionTypeMutationError = void

    export const usePostDirectionType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDirectionType>>, TError,{data: DirectionType;params?: PostDirectionTypeParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postDirectionType>>,
        TError,
        {data: DirectionType;params?: PostDirectionTypeParams},
        TContext
      > => {

      const mutationOptions = getPostDirectionTypeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getDirectionTypeCount = (
    params?: GetDirectionTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DirectionType[]>(
      {url: `/DirectionType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeCountQueryKey = (params?: GetDirectionTypeCountParams,) => {
    return [`/DirectionType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypeCount>>, TError = void>(params?: GetDirectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypeCount>>> = ({ signal }) => getDirectionTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypeCount>>>
export type GetDirectionTypeCountQueryError = void



export function useGetDirectionTypeCount<TData = Awaited<ReturnType<typeof getDirectionTypeCount>>, TError = void>(
 params?: GetDirectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDirectionTypeFromKey = (
    key: string,
    params?: GetDirectionTypeFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DirectionType>(
      {url: `/DirectionType/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDirectionTypeFromKeyQueryKey = (key: string,
    params?: GetDirectionTypeFromKeyParams,) => {
    return [`/DirectionType/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDirectionTypeFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDirectionTypeFromKey>>, TError = void>(key: string,
    params?: GetDirectionTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionTypeFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirectionTypeFromKey>>> = ({ signal }) => getDirectionTypeFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionTypeFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDirectionTypeFromKey>>>
export type GetDirectionTypeFromKeyQueryError = void



export function useGetDirectionTypeFromKey<TData = Awaited<ReturnType<typeof getDirectionTypeFromKey>>, TError = void>(
 key: string,
    params?: GetDirectionTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDirectionTypeFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionTypeFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putDirectionTypeFromKey = (
    key: string,
    directionType: DirectionType,
    params?: PutDirectionTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/DirectionType/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: directionType,
        params
    },
      );
    }
  


export const getPutDirectionTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDirectionTypeFromKey>>, TError,{key: string;data: DirectionType;params?: PutDirectionTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putDirectionTypeFromKey>>, TError,{key: string;data: DirectionType;params?: PutDirectionTypeFromKeyParams}, TContext> => {

const mutationKey = ['putDirectionTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDirectionTypeFromKey>>, {key: string;data: DirectionType;params?: PutDirectionTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putDirectionTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDirectionTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putDirectionTypeFromKey>>>
    export type PutDirectionTypeFromKeyMutationBody = DirectionType
    export type PutDirectionTypeFromKeyMutationError = void

    export const usePutDirectionTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDirectionTypeFromKey>>, TError,{key: string;data: DirectionType;params?: PutDirectionTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putDirectionTypeFromKey>>,
        TError,
        {key: string;data: DirectionType;params?: PutDirectionTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutDirectionTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchDirectionTypeFromKey = (
    key: string,
    directionType: DirectionType,
    params?: PatchDirectionTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/DirectionType/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: directionType,
        params
    },
      );
    }
  


export const getPatchDirectionTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDirectionTypeFromKey>>, TError,{key: string;data: DirectionType;params?: PatchDirectionTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchDirectionTypeFromKey>>, TError,{key: string;data: DirectionType;params?: PatchDirectionTypeFromKeyParams}, TContext> => {

const mutationKey = ['patchDirectionTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchDirectionTypeFromKey>>, {key: string;data: DirectionType;params?: PatchDirectionTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchDirectionTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchDirectionTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchDirectionTypeFromKey>>>
    export type PatchDirectionTypeFromKeyMutationBody = DirectionType
    export type PatchDirectionTypeFromKeyMutationError = void

    export const usePatchDirectionTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDirectionTypeFromKey>>, TError,{key: string;data: DirectionType;params?: PatchDirectionTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchDirectionTypeFromKey>>,
        TError,
        {key: string;data: DirectionType;params?: PatchDirectionTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchDirectionTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteDirectionTypeFromKey = (
    key: string,
 ) => {
      
      
      return configRequest<void>(
      {url: `/DirectionType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDirectionTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>, TError,{key: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>, TError,{key: string}, TContext> => {

const mutationKey = ['deleteDirectionTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>, {key: string}> = (props) => {
          const {key} = props ?? {};

          return  deleteDirectionTypeFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDirectionTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>>
    
    export type DeleteDirectionTypeFromKeyMutationError = void

    export const useDeleteDirectionTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>, TError,{key: string}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>,
        TError,
        {key: string},
        TContext
      > => {

      const mutationOptions = getDeleteDirectionTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    