/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  DetectionType,
  GetMeasureTypeCountParams,
  GetMeasureTypeDetectionTypesCountFromKeyParams,
  GetMeasureTypeDetectionTypesFromKeyParams,
  GetMeasureTypeFromKeyParams,
  GetMeasureTypeMeasureCommentsCountFromKeyParams,
  GetMeasureTypeMeasureCommentsFromKeyParams,
  GetMeasureTypeMeasureOptionPresetsCountFromKeyParams,
  GetMeasureTypeMeasureOptionPresetsFromKeyParams,
  GetMeasureTypeParams,
  MeasureComment,
  MeasureOptionPreset,
  MeasureType,
  PatchMeasureTypeFromKeyParams,
  PostMeasureTypeParams,
  PutMeasureTypeFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getMeasureTypeDetectionTypesFromKey = (
    key: number,
    params?: GetMeasureTypeDetectionTypesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType[]>(
      {url: `/api/v1/MeasureType/${key}/detectionTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeDetectionTypesFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeDetectionTypesFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}/detectionTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeDetectionTypesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeDetectionTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeDetectionTypesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>> = ({ signal }) => getMeasureTypeDetectionTypesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeDetectionTypesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>>
export type GetMeasureTypeDetectionTypesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useGetMeasureTypeDetectionTypesFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeDetectionTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeDetectionTypesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getMeasureTypeDetectionTypesCountFromKey = (
    key: number,
    params?: GetMeasureTypeDetectionTypesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType[]>(
      {url: `/api/v1/MeasureType/${key}/detectionTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeDetectionTypesCountFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeDetectionTypesCountFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}/detectionTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeDetectionTypesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeDetectionTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeDetectionTypesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>> = ({ signal }) => getMeasureTypeDetectionTypesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeDetectionTypesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>>
export type GetMeasureTypeDetectionTypesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useGetMeasureTypeDetectionTypesCountFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeDetectionTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeDetectionTypesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const getMeasureTypeMeasureCommentsFromKey = (
    key: number,
    params?: GetMeasureTypeMeasureCommentsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureComment[]>(
      {url: `/api/v1/MeasureType/${key}/measureComments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeMeasureCommentsFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeMeasureCommentsFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}/measureComments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeMeasureCommentsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeMeasureCommentsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeMeasureCommentsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>> = ({ signal }) => getMeasureTypeMeasureCommentsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeMeasureCommentsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>>
export type GetMeasureTypeMeasureCommentsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */

export function useGetMeasureTypeMeasureCommentsFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeMeasureCommentsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeMeasureCommentsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const getMeasureTypeMeasureCommentsCountFromKey = (
    key: number,
    params?: GetMeasureTypeMeasureCommentsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureComment[]>(
      {url: `/api/v1/MeasureType/${key}/measureComments/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeMeasureCommentsCountFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeMeasureCommentsCountFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}/measureComments/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeMeasureCommentsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeMeasureCommentsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeMeasureCommentsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>> = ({ signal }) => getMeasureTypeMeasureCommentsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeMeasureCommentsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>>
export type GetMeasureTypeMeasureCommentsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */

export function useGetMeasureTypeMeasureCommentsCountFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeMeasureCommentsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeMeasureCommentsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureOptionPreset navigation property action
 */
export const getMeasureTypeMeasureOptionPresetsFromKey = (
    key: number,
    params?: GetMeasureTypeMeasureOptionPresetsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOptionPreset[]>(
      {url: `/api/v1/MeasureType/${key}/measureOptionPresets`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeMeasureOptionPresetsFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeMeasureOptionPresetsFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}/measureOptionPresets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeMeasureOptionPresetsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeMeasureOptionPresetsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeMeasureOptionPresetsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>> = ({ signal }) => getMeasureTypeMeasureOptionPresetsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeMeasureOptionPresetsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>>
export type GetMeasureTypeMeasureOptionPresetsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureOptionPreset navigation property action
 */

export function useGetMeasureTypeMeasureOptionPresetsFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeMeasureOptionPresetsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeMeasureOptionPresetsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureOptionPreset navigation property action
 */
export const getMeasureTypeMeasureOptionPresetsCountFromKey = (
    key: number,
    params?: GetMeasureTypeMeasureOptionPresetsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOptionPreset[]>(
      {url: `/api/v1/MeasureType/${key}/measureOptionPresets/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeMeasureOptionPresetsCountFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeMeasureOptionPresetsCountFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}/measureOptionPresets/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeMeasureOptionPresetsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeMeasureOptionPresetsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeMeasureOptionPresetsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>> = ({ signal }) => getMeasureTypeMeasureOptionPresetsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeMeasureOptionPresetsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>>
export type GetMeasureTypeMeasureOptionPresetsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureOptionPreset navigation property action
 */

export function useGetMeasureTypeMeasureOptionPresetsCountFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeMeasureOptionPresetsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeMeasureOptionPresetsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeMeasureOptionPresetsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureType = (
    params?: GetMeasureTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType[]>(
      {url: `/api/v1/MeasureType`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeQueryKey = (params?: GetMeasureTypeParams,) => {
    return [`/api/v1/MeasureType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureType>>, TError = void>(params?: GetMeasureTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureType>>> = ({ signal }) => getMeasureType(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureType>>>
export type GetMeasureTypeQueryError = void



export function useGetMeasureType<TData = Awaited<ReturnType<typeof getMeasureType>>, TError = void>(
 params?: GetMeasureTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureType>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postMeasureType = (
    measureType: MeasureType,
    params?: PostMeasureTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureType,
        params, signal
    },
      );
    }
  


export const getPostMeasureTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureType>>, TError,{data: MeasureType;params?: PostMeasureTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMeasureType>>, TError,{data: MeasureType;params?: PostMeasureTypeParams}, TContext> => {

const mutationKey = ['postMeasureType'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeasureType>>, {data: MeasureType;params?: PostMeasureTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postMeasureType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeasureTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeasureType>>>
    export type PostMeasureTypeMutationBody = MeasureType
    export type PostMeasureTypeMutationError = void

    export const usePostMeasureType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureType>>, TError,{data: MeasureType;params?: PostMeasureTypeParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMeasureType>>,
        TError,
        {data: MeasureType;params?: PostMeasureTypeParams},
        TContext
      > => {

      const mutationOptions = getPostMeasureTypeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getMeasureTypeCount = (
    params?: GetMeasureTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType[]>(
      {url: `/api/v1/MeasureType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeCountQueryKey = (params?: GetMeasureTypeCountParams,) => {
    return [`/api/v1/MeasureType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeCount>>, TError = void>(params?: GetMeasureTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeCount>>> = ({ signal }) => getMeasureTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeCount>>>
export type GetMeasureTypeCountQueryError = void



export function useGetMeasureTypeCount<TData = Awaited<ReturnType<typeof getMeasureTypeCount>>, TError = void>(
 params?: GetMeasureTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureTypeFromKey = (
    key: number,
    params?: GetMeasureTypeFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType>(
      {url: `/api/v1/MeasureType/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureTypeFromKeyQueryKey = (key: number,
    params?: GetMeasureTypeFromKeyParams,) => {
    return [`/api/v1/MeasureType/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureTypeFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureTypeFromKey>>, TError = void>(key: number,
    params?: GetMeasureTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureTypeFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureTypeFromKey>>> = ({ signal }) => getMeasureTypeFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureTypeFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureTypeFromKey>>>
export type GetMeasureTypeFromKeyQueryError = void



export function useGetMeasureTypeFromKey<TData = Awaited<ReturnType<typeof getMeasureTypeFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureTypeFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureTypeFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putMeasureTypeFromKey = (
    key: number,
    measureType: MeasureType,
    params?: PutMeasureTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureType/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureType,
        params
    },
      );
    }
  


export const getPutMeasureTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureTypeFromKey>>, TError,{key: number;data: MeasureType;params?: PutMeasureTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMeasureTypeFromKey>>, TError,{key: number;data: MeasureType;params?: PutMeasureTypeFromKeyParams}, TContext> => {

const mutationKey = ['putMeasureTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeasureTypeFromKey>>, {key: number;data: MeasureType;params?: PutMeasureTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putMeasureTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeasureTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMeasureTypeFromKey>>>
    export type PutMeasureTypeFromKeyMutationBody = MeasureType
    export type PutMeasureTypeFromKeyMutationError = void

    export const usePutMeasureTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureTypeFromKey>>, TError,{key: number;data: MeasureType;params?: PutMeasureTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMeasureTypeFromKey>>,
        TError,
        {key: number;data: MeasureType;params?: PutMeasureTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutMeasureTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchMeasureTypeFromKey = (
    key: number,
    measureType: MeasureType,
    params?: PatchMeasureTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureType/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureType,
        params
    },
      );
    }
  


export const getPatchMeasureTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureTypeFromKey>>, TError,{key: number;data: MeasureType;params?: PatchMeasureTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchMeasureTypeFromKey>>, TError,{key: number;data: MeasureType;params?: PatchMeasureTypeFromKeyParams}, TContext> => {

const mutationKey = ['patchMeasureTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMeasureTypeFromKey>>, {key: number;data: MeasureType;params?: PatchMeasureTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchMeasureTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMeasureTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchMeasureTypeFromKey>>>
    export type PatchMeasureTypeFromKeyMutationBody = MeasureType
    export type PatchMeasureTypeFromKeyMutationError = void

    export const usePatchMeasureTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureTypeFromKey>>, TError,{key: number;data: MeasureType;params?: PatchMeasureTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchMeasureTypeFromKey>>,
        TError,
        {key: number;data: MeasureType;params?: PatchMeasureTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchMeasureTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteMeasureTypeFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMeasureTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteMeasureTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteMeasureTypeFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeasureTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>>
    
    export type DeleteMeasureTypeFromKeyMutationError = void

    export const useDeleteMeasureTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeasureTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    