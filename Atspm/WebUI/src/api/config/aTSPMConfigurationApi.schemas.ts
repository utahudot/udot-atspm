/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
export interface Approach {
  /** @nullable */
  description?: string | null;
  /** @nullable */
  mph?: number | null;
  protectedPhaseNumber?: number;
  isProtectedPhaseOverlap?: boolean;
  /** @nullable */
  permissivePhaseNumber?: number | null;
  isPermissivePhaseOverlap?: boolean;
  /** @nullable */
  pedestrianPhaseNumber?: number | null;
  isPedestrianPhaseOverlap?: boolean;
  /** @nullable */
  pedestrianDetectors?: string | null;
  locationId?: number;
  location?: Location;
  directionTypeId?: DirectionTypes;
  directionType?: DirectionType;
  /** @nullable */
  detectors?: Detector[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
}

export interface ApproachDelayOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
  getPermissivePhase?: boolean;
  getVolume?: boolean;
}

export interface ApproachDto {
  /** @nullable */
  id?: number | null;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  mph?: number | null;
  protectedPhaseNumber?: number;
  isProtectedPhaseOverlap?: boolean;
  /** @nullable */
  permissivePhaseNumber?: number | null;
  isPermissivePhaseOverlap?: boolean;
  /** @nullable */
  pedestrianPhaseNumber?: number | null;
  isPedestrianPhaseOverlap?: boolean;
  /** @nullable */
  pedestrianDetectors?: string | null;
  locationId?: number;
  directionTypeId?: DirectionTypes;
  /** @nullable */
  detectors?: DetectorDto[] | null;
}

export interface ApproachSpeedOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
  readonly metricTypeId?: number;
}

export interface ApproachVolumeOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
  showDirectionalSplits?: boolean;
  getVolume?: boolean;
  showNbEbVolume?: boolean;
  showSbWbVolume?: boolean;
  showTMCDetection?: boolean;
  showAdvanceDetection?: boolean;
  readonly metricTypeId?: number;
}

export interface Area {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  userAreas?: UserArea[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  locations?: Location[] | null;
}

export interface ArrivalOnRedOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
  getPermissivePhase?: boolean;
}

export interface AtspmOptionsBase { [key: string]: unknown }

export type DetectionHardwareTypes = typeof DetectionHardwareTypes[keyof typeof DetectionHardwareTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetectionHardwareTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface DetectionType {
  /** @nullable */
  description?: string | null;
  /** @nullable */
  abbreviation?: string | null;
  displayOrder?: number;
  /** @nullable */
  measureTypes?: MeasureType[] | null;
  id?: DetectionTypes;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  detectors?: Detector[] | null;
}

export interface DetectionTypeDto {
  id?: DetectionTypes;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  abbreviation?: string | null;
  displayOrder?: number;
  /** @nullable */
  measureTypes?: MeasureTypeDto[] | null;
}

export interface DetectionTypeGroup {
  /** @nullable */
  id?: string | null;
  count?: number;
}

export type DetectionTypes = typeof DetectionTypes[keyof typeof DetectionTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetectionTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
} as const;

export interface Detector {
  /** @nullable */
  dectectorIdentifier?: string | null;
  detectorChannel?: number;
  /** @nullable */
  distanceFromStopBar?: number | null;
  /** @nullable */
  minSpeedFilter?: number | null;
  dateAdded?: string;
  /** @nullable */
  dateDisabled?: string | null;
  /** @nullable */
  laneNumber?: number | null;
  movementType?: MovementTypes;
  laneType?: LaneTypes;
  detectionHardware?: DetectionHardwareTypes;
  /** @nullable */
  decisionPoint?: number | null;
  /** @nullable */
  movementDelay?: number | null;
  latencyCorrection?: number;
  approachId?: number;
  /** @nullable */
  detectorComments?: DetectorComment[] | null;
  /** @nullable */
  detectionTypes?: DetectionType[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  approach?: Approach;
}

export interface DetectorComment {
  timeStamp?: string;
  /** @nullable */
  comment?: string | null;
  detectorId?: number;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  detector?: Detector;
}

export interface DetectorDto {
  /** @nullable */
  id?: number | null;
  /** @nullable */
  dectectorIdentifier?: string | null;
  detectorChannel?: number;
  /** @nullable */
  distanceFromStopBar?: number | null;
  /** @nullable */
  minSpeedFilter?: number | null;
  dateAdded?: string;
  /** @nullable */
  dateDisabled?: string | null;
  /** @nullable */
  laneNumber?: number | null;
  movementType?: MovementTypes;
  laneType?: LaneTypes;
  detectionHardware?: DetectionHardwareTypes;
  /** @nullable */
  decisionPoint?: number | null;
  /** @nullable */
  movementDelay?: number | null;
  latencyCorrection?: number;
  /** @nullable */
  approachId?: number | null;
  /** @nullable */
  detectionTypes?: DetectionTypeDto[] | null;
}

export interface Device {
  /** @nullable */
  deviceIdentifier?: string | null;
  loggingEnabled?: boolean;
  /** @nullable */
  ipaddress?: string | null;
  deviceStatus?: DeviceStatus;
  deviceType?: DeviceTypes;
  /** @nullable */
  notes?: string | null;
  locationId?: number;
  /** @nullable */
  deviceConfigurationId?: number | null;
  deviceConfiguration?: DeviceConfiguration;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  location?: Location;
}

export interface DeviceConfiguration {
  /** @nullable */
  description?: string | null;
  /** @nullable */
  notes?: string | null;
  protocol?: TransportProtocols;
  port?: number;
  /** @nullable */
  path?: string | null;
  /** @nullable */
  query?: string[] | null;
  connectionTimeout?: number;
  operationTimeout?: number;
  loggingOffset?: number;
  /** @nullable */
  decoders?: string[] | null;
  /** @nullable */
  userName?: string | null;
  /** @nullable */
  password?: string | null;
  /** @nullable */
  productId?: number | null;
  product?: Product;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  devices?: Device[] | null;
}

export interface DeviceGroup {
  /** @nullable */
  manufacturer?: string | null;
  /** @nullable */
  model?: string | null;
  /** @nullable */
  firmware?: string | null;
  count?: number;
}

export type DeviceStatus = typeof DeviceStatus[keyof typeof DeviceStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export type DeviceTypes = typeof DeviceTypes[keyof typeof DeviceTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const;

export interface DirectionType {
  /** @nullable */
  description?: string | null;
  /** @nullable */
  abbreviation?: string | null;
  displayOrder?: number;
  /** @nullable */
  primaryDirections?: RouteLocation[] | null;
  id?: DirectionTypes;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  opposingDirections?: RouteLocation[] | null;
  /** @nullable */
  approaches?: Approach[] | null;
}

export type DirectionTypes = typeof DirectionTypes[keyof typeof DirectionTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DirectionTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
} as const;

export interface Faq {
  /** @nullable */
  header?: string | null;
  /** @nullable */
  body?: string | null;
  displayOrder?: number;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
}

export interface GapDurationOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  approachId?: number;
  startHour?: number;
  startMinute?: number;
  endHour?: number;
  endMinute?: number;
  /** @nullable */
  daysOfWeek?: number[] | null;
}

export interface GreenTimeUtilizationOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  metricTypeId?: number;
  xAxisBinSize?: number;
  yAxisBinSize?: number;
}

export interface Jurisdiction {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  mpo?: string | null;
  /** @nullable */
  countyParish?: string | null;
  /** @nullable */
  otherPartners?: string | null;
  /** @nullable */
  userJurisdictions?: UserJurisdiction[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  locations?: Location[] | null;
}

export type LaneTypes = typeof LaneTypes[keyof typeof LaneTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LaneTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface LeftTurnGapAnalysisOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  gap1Min?: number;
  gap1Max?: number;
  gap2Min?: number;
  gap2Max?: number;
  gap3Min?: number;
  gap3Max?: number;
  gap4Min?: number;
  /** @nullable */
  gap4Max?: number | null;
  /** @nullable */
  gap5Min?: number | null;
  /** @nullable */
  gap5Max?: number | null;
  /** @nullable */
  gap6Min?: number | null;
  /** @nullable */
  gap6Max?: number | null;
  /** @nullable */
  gap7Min?: number | null;
  /** @nullable */
  gap7Max?: number | null;
  /** @nullable */
  gap8Min?: number | null;
  /** @nullable */
  gap8Max?: number | null;
  /** @nullable */
  gap9Min?: number | null;
  /** @nullable */
  gap9Max?: number | null;
  /** @nullable */
  gap10Min?: number | null;
  /** @nullable */
  gap10Max?: number | null;
  /** @nullable */
  sumDurationGap1?: number | null;
  /** @nullable */
  sumDurationGap2?: number | null;
  /** @nullable */
  sumDurationGap3?: number | null;
  trendLineGapThreshold?: number;
  binSize?: number;
}

export interface LeftTurnGapDataCheckOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  approachId?: number;
  volumePerHourThreshold?: number;
  gapOutThreshold?: number;
  pedestrianThreshold?: number;
  /** @nullable */
  daysOfWeek?: number[] | null;
}

export interface LeftTurnGapReportOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  /** @nullable */
  approachIds?: number[] | null;
  /** @nullable */
  daysOfWeek?: number[] | null;
  /** @nullable */
  startHour?: number | null;
  /** @nullable */
  startMinute?: number | null;
  /** @nullable */
  endHour?: number | null;
  /** @nullable */
  endMinute?: number | null;
  getAMPMPeakPeriod?: boolean;
  getAMPMPeakHour?: boolean;
  get24HourPeriod?: boolean;
  getGapReport?: boolean;
  acceptableGapPercentage?: number;
  getSplitFail?: boolean;
  acceptableSplitFailPercentage?: number;
  getPedestrianCall?: boolean;
  getConflictingVolume?: boolean;
}

export interface LeftTurnSplitFailOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  approachId?: number;
  startHour?: number;
  startMinute?: number;
  endHour?: number;
  endMinute?: number;
  /** @nullable */
  daysOfWeek?: number[] | null;
}

export interface LinkPivotOptions {
  routeId?: number;
  cycleLength?: number;
  /** @nullable */
  direction?: string | null;
  bias?: number;
  /** @nullable */
  biasDirection?: string | null;
  /** @nullable */
  daysOfWeek?: number[] | null;
  startDate?: string;
  endDate?: string;
  startTime?: string;
  endTime?: string;
}

export interface LinkPivotPcdOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  /** @nullable */
  downstreamLocationIdentifier?: string | null;
  delta?: number;
  /** @nullable */
  downstreamApproachDirection?: string | null;
  /** @nullable */
  upstreamApproachDirection?: string | null;
  startDate?: string;
  /** @nullable */
  selectedEndDate?: string | null;
  startTime?: string;
  endTime?: string;
  endDate?: string;
}

export interface Location {
  latitude?: number;
  longitude?: number;
  /** @nullable */
  primaryName?: string | null;
  /** @nullable */
  secondaryName?: string | null;
  chartEnabled?: boolean;
  versionAction?: LocationVersionActions;
  /** @nullable */
  note?: string | null;
  start?: string;
  pedsAre1to1?: boolean;
  /** @nullable */
  locationIdentifier?: string | null;
  /** @nullable */
  jurisdictionId?: number | null;
  jurisdiction?: Jurisdiction;
  locationTypeId?: number;
  locationType?: LocationType;
  /** @nullable */
  regionId?: number | null;
  region?: Region;
  /** @nullable */
  areas?: Area[] | null;
  /** @nullable */
  devices?: Device[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  approaches?: Approach[] | null;
}

export interface LocationPhases {
  /** @nullable */
  locationIdentifier?: string | null;
  /** @nullable */
  controllerManufacturer?: string | null;
  /** @nullable */
  designatedPhases?: number[] | null;
}

export interface LocationType {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  icon?: string | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  locations?: Location[] | null;
}

export type LocationVersionActions = typeof LocationVersionActions[keyof typeof LocationVersionActions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocationVersionActions = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_10: 10,
} as const;

export interface LocationWithCoordPhases {
  /** @nullable */
  locationIdentifier?: string | null;
  /** @nullable */
  coordinatedPhases?: number[] | null;
}

export interface LocationWithSequence {
  /** @nullable */
  locationIdentifier?: string | null;
  /** @nullable */
  sequence?: number[][] | null;
}

export interface MeasureComment {
  timeStamp?: string;
  /** @nullable */
  comment?: string | null;
  /** @nullable */
  locationIdentifier?: string | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  measureTypes?: MeasureType[] | null;
}

export interface MeasureCommentsDto {
  /** @nullable */
  id?: number | null;
  timeStamp?: string;
  /** @nullable */
  comment?: string | null;
  /** @nullable */
  locationIdentifier?: string | null;
}

export interface MeasureOption {
  /** @nullable */
  option?: string | null;
  /** @nullable */
  value?: string | null;
  measureTypeId?: number;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  measureType?: MeasureType;
}

export interface MeasureOptionDto {
  /** @nullable */
  id?: number | null;
  /** @nullable */
  option?: string | null;
  /** @nullable */
  value?: string | null;
  measureTypeId?: number;
}

export interface MeasureOptionPreset {
  /** @nullable */
  name?: string | null;
  option?: AtspmOptionsBase;
  measureTypeId?: number;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  measureType?: MeasureType;
}

export interface MeasureOptionsBase {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
}

export interface MeasureType {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  abbreviation?: string | null;
  showOnWebsite?: boolean;
  showOnAggregationSite?: boolean;
  displayOrder?: number;
  /** @nullable */
  measureComments?: MeasureComment[] | null;
  /** @nullable */
  measureOptions?: MeasureOption[] | null;
  /** @nullable */
  measureOptionPresets?: MeasureOptionPreset[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  detectionTypes?: DetectionType[] | null;
}

export interface MeasureTypeDto {
  /** @nullable */
  id?: number | null;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  abbreviation?: string | null;
  showOnWebsite?: boolean;
  showOnAggregationSite?: boolean;
  displayOrder?: number;
  /** @nullable */
  measureComments?: MeasureCommentsDto[] | null;
  /** @nullable */
  measureOptions?: MeasureOptionDto[] | null;
}

export interface MenuItem {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  icon?: string | null;
  displayOrder?: number;
  /** @nullable */
  link?: string | null;
  /** @nullable */
  document?: string | null;
  /** @nullable */
  parentId?: number | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  parent?: MenuItem;
  /** @nullable */
  children?: MenuItem[] | null;
}

export type MovementTypes = typeof MovementTypes[keyof typeof MovementTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MovementTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface PeakHourOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  approachId?: number;
  /** @nullable */
  daysOfWeek?: number[] | null;
}

export interface PedActuationOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  approachId?: number;
  startHour?: number;
  startMinute?: number;
  endHour?: number;
  endMinute?: number;
  /** @nullable */
  daysOfWeek?: number[] | null;
}

export interface PedDelayOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  timeBuffer?: number;
  showPedBeginWalk?: boolean;
  showCycleLength?: boolean;
  showPercentDelay?: boolean;
  showPedRecall?: boolean;
  pedRecallThreshold?: number;
}

export interface PreemptDetailOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
}

export interface PreemptServiceOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
}

export interface PreemptServiceRequestOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
}

export interface Product {
  /** @nullable */
  manufacturer?: string | null;
  /** @nullable */
  model?: string | null;
  /** @nullable */
  webPage?: string | null;
  /** @nullable */
  notes?: string | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
}

export interface PurdueCoordinationDiagramOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
  getVolume?: boolean;
  showPlanStatistics?: boolean;
}

export interface PurduePhaseTerminationOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  selectedConsecutiveCount?: number;
  selectedPhaseNumber?: number;
}

export interface RampMeteringOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  combineLanes?: boolean;
}

export interface Region {
  /** @nullable */
  description?: string | null;
  /** @nullable */
  userRegions?: UserRegion[] | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  locations?: Location[] | null;
}

export interface Route {
  /** @nullable */
  name?: string | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  routeLocations?: RouteLocation[] | null;
}

export interface RouteApproachDto {
  id?: number;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  mph?: number | null;
  protectedPhaseNumber?: number;
  isProtectedPhaseOverlap?: boolean;
  /** @nullable */
  permissivePhaseNumber?: number | null;
  isPermissivePhaseOverlap?: boolean;
  /** @nullable */
  pedestrianPhaseNumber?: number | null;
  isPedestrianPhaseOverlap?: boolean;
  /** @nullable */
  pedestrianDetectors?: string | null;
  locationId?: number;
  /** @nullable */
  detectors?: RouteDetectorDto[] | null;
}

export interface RouteDetectorDto {
  id?: number;
  /** @nullable */
  dectectorIdentifier?: string | null;
  detectorChannel?: number;
  /** @nullable */
  distanceFromStopBar?: number | null;
  /** @nullable */
  minSpeedFilter?: number | null;
  dateAdded?: string;
  /** @nullable */
  dateDisabled?: string | null;
  /** @nullable */
  laneNumber?: number | null;
  movementType?: MovementTypes;
  laneType?: LaneTypes;
  detectionHardware?: DetectionHardwareTypes;
  /** @nullable */
  decisionPoint?: number | null;
  /** @nullable */
  movementDelay?: number | null;
  latencyCorrection?: number;
  approachId?: number;
}

export interface RouteDistance {
  distance?: number;
  /** @nullable */
  locationIdentifierA?: string | null;
  /** @nullable */
  locationIdentifierB?: string | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  /** @nullable */
  previousLocations?: RouteLocation[] | null;
  /** @nullable */
  nextLocations?: RouteLocation[] | null;
}

export interface RouteDistanceDto {
  id?: number;
  distance?: number;
  /** @nullable */
  locationIdentifierA?: string | null;
  /** @nullable */
  locationIdentifierB?: string | null;
}

export interface RouteDto {
  /** @nullable */
  id?: number | null;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  routeLocations?: RouteLocationDto[] | null;
}

export interface RouteLocation {
  order?: number;
  primaryPhase?: number;
  opposingPhase?: number;
  primaryDirectionId?: DirectionTypes;
  opposingDirectionId?: DirectionTypes;
  isPrimaryOverlap?: boolean;
  isOpposingOverlap?: boolean;
  /** @nullable */
  previousLocationDistanceId?: number | null;
  previousLocationDistance?: RouteDistance;
  /** @nullable */
  nextLocationDistanceId?: number | null;
  /** @nullable */
  locationIdentifier?: string | null;
  routeId?: number;
  route?: Route;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  primaryDirection?: DirectionType;
  opposingDirection?: DirectionType;
  nextLocationDistance?: RouteDistance;
}

export interface RouteLocationDto {
  id?: number;
  order?: number;
  primaryPhase?: number;
  opposingPhase?: number;
  primaryDirectionId?: number;
  /** @nullable */
  primaryDirectionDescription?: string | null;
  opposingDirectionId?: number;
  /** @nullable */
  opposingDirectionDescription?: string | null;
  isPrimaryOverlap?: boolean;
  isOpposingOverlap?: boolean;
  /** @nullable */
  previousLocationDistanceId?: number | null;
  previousLocationDistance?: RouteDistanceDto;
  /** @nullable */
  nextLocationDistanceId?: number | null;
  nextLocationDistance?: RouteDistanceDto;
  /** @nullable */
  locationIdentifier?: string | null;
  longitude?: number;
  latitude?: number;
  /** @nullable */
  primaryName?: string | null;
  /** @nullable */
  secondaryName?: string | null;
  /** @nullable */
  locationId?: number | null;
  routeId?: number;
  /** @nullable */
  approaches?: RouteApproachDto[] | null;
}

export interface SearchLocation {
  id?: number;
  /** @nullable */
  locationIdentifier?: string | null;
  latitude?: number;
  longitude?: number;
  /** @nullable */
  primaryName?: string | null;
  /** @nullable */
  secondaryName?: string | null;
  chartEnabled?: boolean;
  /** @nullable */
  regionId?: number | null;
  /** @nullable */
  jurisdictionId?: number | null;
  /** @nullable */
  areas?: number[] | null;
  /** @nullable */
  charts?: number[] | null;
  start?: string;
  locationTypeId?: number;
  /** @nullable */
  hasRampDevice?: boolean | null;
}

export interface SplitFailOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  firstSecondsOfRed?: number;
  metricTypeId?: number;
  getPermissivePhase?: boolean;
}

export interface SplitMonitorOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  percentileSplit?: number;
}

export interface TimeSpaceDiagramAverageOptions {
  routeId?: number;
  startDate?: string;
  endDate?: string;
  startTime?: string;
  endTime?: string;
  /** @nullable */
  sequence?: LocationWithSequence[] | null;
  /** @nullable */
  coordinatedPhases?: LocationWithCoordPhases[] | null;
  /** @nullable */
  daysOfWeek?: number[] | null;
  /** @nullable */
  speedLimit?: number | null;
}

export interface TimeSpaceDiagramOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  routeId?: number;
  /** @nullable */
  speedLimit?: number | null;
  extendStartStopSearch?: number;
  showAllLanesInfo?: boolean;
}

export interface TimingAndActuationsOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  /** @nullable */
  globalEventCodesList?: number[] | null;
  /** @nullable */
  globalEventParamsList?: number[] | null;
  /** @nullable */
  phaseEventCodesList?: number[] | null;
}

export interface TransitSignalPriorityOptions {
  /** @nullable */
  locationsAndPhases?: LocationPhases[] | null;
  /** @nullable */
  dates?: string[] | null;
}

export type TransportProtocols = typeof TransportProtocols[keyof typeof TransportProtocols];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransportProtocols = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export interface TurningMovementCountsOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
  readonly metricTypeId?: number;
}

export interface UserArea {
  /** @nullable */
  userId?: string | null;
  areaId?: number;
  area?: Area;
}

export interface UserJurisdiction {
  /** @nullable */
  userId?: string | null;
  jurisdictionId?: number;
  jurisdiction?: Jurisdiction;
}

export interface UserRegion {
  /** @nullable */
  userId?: string | null;
  regionId?: number;
  region?: Region;
}

export interface VersionHistory {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  notes?: string | null;
  date?: string;
  /** @nullable */
  version?: string | null;
  /** @nullable */
  parentId?: number | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  parent?: VersionHistory;
  /** @nullable */
  children?: VersionHistory[] | null;
}

export interface VolumeOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  approachId?: number;
  startHour?: number;
  startMinute?: number;
  endHour?: number;
  endMinute?: number;
  /** @nullable */
  daysOfWeek?: number[] | null;
}

export interface WaitTimeOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  binSize?: number;
}

export type WatchDogComponentTypes = typeof WatchDogComponentTypes[keyof typeof WatchDogComponentTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WatchDogComponentTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface WatchDogIgnoreEvent {
  locationId?: number;
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  componentType?: WatchDogComponentTypes;
  /** @nullable */
  componentId?: number | null;
  issueType?: WatchDogIssueTypes;
  /** @nullable */
  phase?: number | null;
  id?: number;
  /** @nullable */
  created?: string | null;
  /** @nullable */
  modified?: string | null;
  /** @nullable */
  createdBy?: string | null;
  /** @nullable */
  modifiedBy?: string | null;
  location?: Location;
}

export type WatchDogIssueTypes = typeof WatchDogIssueTypes[keyof typeof WatchDogIssueTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WatchDogIssueTypes = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

export interface YellowRedActivationsOptions {
  /** @nullable */
  locationIdentifier?: string | null;
  start?: string;
  end?: string;
  severeLevelSeconds?: number;
  metricTypeId?: number;
}

export type GetApproachDetectorsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetApproachDetectorsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type UpsertApproachApproachParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetApproachApproachDtoFromIdParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetApproachParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostApproachParams = {
select?: string;
expand?: string;
};

export type GetApproachCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetApproachFromKeyParams = {
select?: string;
expand?: string;
};

export type PutApproachFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchApproachFromKeyParams = {
select?: string;
expand?: string;
};

export type GetAreaLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetAreaLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetAreaParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostAreaParams = {
select?: string;
expand?: string;
};

export type GetAreaCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetAreaFromKeyParams = {
select?: string;
expand?: string;
};

export type PutAreaFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchAreaFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectionTypeDetectorsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeDetectorsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeMeasureTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeMeasureTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDetectionTypeParams = {
select?: string;
expand?: string;
};

export type GetDetectionTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDetectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchDetectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectorDetectorCommentsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectorCommentsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectionTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectionTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDetectorParams = {
select?: string;
expand?: string;
};

export type GetDetectorCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDetectorFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchDetectorFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectorCommentParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDetectorCommentParams = {
select?: string;
expand?: string;
};

export type GetDetectorCommentCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDetectorCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchDetectorCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDeviceActiveDevicesByLocationFromLocationIdParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceActiveDevicesCountParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDeviceParams = {
select?: string;
expand?: string;
};

export type GetDeviceCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDeviceFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchDeviceFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDeviceConfigurationDevicesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationDevicesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationEventLogDecodersParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDeviceConfigurationParams = {
select?: string;
expand?: string;
};

export type GetDeviceConfigurationCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDeviceConfigurationFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchDeviceConfigurationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDirectionTypeApproachesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeApproachesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypePrimaryDirectionsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypePrimaryDirectionsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeOpposingDirectionsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeOpposingDirectionsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDirectionTypeParams = {
select?: string;
expand?: string;
};

export type GetDirectionTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDirectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchDirectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetFaqParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostFaqParams = {
select?: string;
expand?: string;
};

export type GetFaqCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetFaqFromKeyParams = {
select?: string;
expand?: string;
};

export type PutFaqFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchFaqFromKeyParams = {
select?: string;
expand?: string;
};

export type GetJurisdictionLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetJurisdictionLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetJurisdictionParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostJurisdictionParams = {
select?: string;
expand?: string;
};

export type GetJurisdictionCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetJurisdictionFromKeyParams = {
select?: string;
expand?: string;
};

export type PutJurisdictionFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchJurisdictionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationApproachesFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationApproachesCountFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationAreasFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationAreasCountFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationDevicesFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationDevicesCountFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationCopyLocationToNewVersionFromKeyParams = {
/**
 * Label of new version
 */
newVersionLabel?: string;
select?: string;
expand?: string;
};

export type DeleteLocationSetLocationTodFromKeyParams = {
select?: string;
expand?: string;
};

export type DeleteLocationAllVersionsFromKeyParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetLocationLatestVersionOfLocationFromIdentifierParams = {
select?: string;
expand?: string;
};

export type GetLocationAllVersionsOfLocationFromIdentifierParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationLatestVersionOfAllLocationsParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationDetectionTypeCountParams = {
date?: string;
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationLocationsForSearchParams = {
/**
 * Locations by area
 */
areaId?: number;
/**
 * Locations by region
 */
regionId?: number;
/**
 * Locations by jurisdiction
 */
jurisdictionId?: number;
/**
 * Locations by chart type
 */
metricTypeId?: number;
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostLocationParams = {
select?: string;
expand?: string;
};

export type GetLocationCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type PutLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationTypeLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationTypeLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostLocationTypeParams = {
select?: string;
expand?: string;
};

export type GetLocationTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutLocationTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchLocationTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureCommentMeasureTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureCommentMeasureTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureCommentParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureCommentParams = {
select?: string;
expand?: string;
};

export type GetMeasureCommentCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchMeasureCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureOptionParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureOptionFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureOptionFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchMeasureOptionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionPresetMeasureOptionPresetTypesParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureOptionPresetParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureOptionPresetParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionPresetCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureOptionPresetFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureOptionPresetFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchMeasureOptionPresetFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureTypeDetectionTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeDetectionTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeMeasureCommentsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeMeasureCommentsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeMeasureOptionPresetsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeMeasureOptionPresetsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureTypeParams = {
select?: string;
expand?: string;
};

export type GetMeasureTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchMeasureTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMenuItemsParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMenuItemsParams = {
select?: string;
expand?: string;
};

export type GetMenuItemsCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMenuItemsFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMenuItemsFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchMenuItemsFromKeyParams = {
select?: string;
expand?: string;
};

export type GetProductParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostProductParams = {
select?: string;
expand?: string;
};

export type GetProductCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetProductFromKeyParams = {
select?: string;
expand?: string;
};

export type PutProductFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchProductFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRegionLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRegionLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRegionParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRegionParams = {
select?: string;
expand?: string;
};

export type GetRegionCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRegionFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRegionFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchRegionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteRouteLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteRouteLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type UpsertRouteRouteParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetRouteRouteViewFromIdParams = {
includeLocationDetail?: boolean;
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetRouteParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRouteParams = {
select?: string;
expand?: string;
};

export type GetRouteCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRouteFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchRouteFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteDistancePreviousLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistancePreviousLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistanceNextLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistanceNextLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams = {
select?: string;
};

export type GetRouteDistanceParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRouteDistanceParams = {
select?: string;
expand?: string;
};

export type GetRouteDistanceCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistanceFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRouteDistanceFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchRouteDistanceFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteLocationParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRouteLocationParams = {
select?: string;
expand?: string;
};

export type GetRouteLocationCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRouteLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchRouteLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetVersionHistoryParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostVersionHistoryParams = {
select?: string;
expand?: string;
};

export type GetVersionHistoryCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetVersionHistoryFromKeyParams = {
select?: string;
expand?: string;
};

export type PutVersionHistoryFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchVersionHistoryFromKeyParams = {
select?: string;
expand?: string;
};

export type GetWatchDogIgnoreEventParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostWatchDogIgnoreEventParams = {
select?: string;
expand?: string;
};

export type GetWatchDogIgnoreEventCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetWatchDogIgnoreEventFromKeyParams = {
select?: string;
expand?: string;
};

export type PutWatchDogIgnoreEventFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchWatchDogIgnoreEventFromKeyParams = {
select?: string;
expand?: string;
};

