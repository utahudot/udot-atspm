/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetRouteCountParams,
  GetRouteFromKeyParams,
  GetRouteParams,
  GetRouteRouteLocationsCountFromKeyParams,
  GetRouteRouteLocationsFromKeyParams,
  GetRouteRouteViewFromIdParams,
  PatchRouteFromKeyParams,
  PostRouteParams,
  PutRouteFromKeyParams,
  Route,
  RouteDto,
  RouteLocation,
  UpsertRouteRouteParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteRouteLocationsFromKey = (
    key: number,
    params?: GetRouteRouteLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/Route/${key}/routeLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteRouteLocationsFromKeyQueryKey = (key: number,
    params?: GetRouteRouteLocationsFromKeyParams,) => {
    return [`/api/v1/Route/${key}/routeLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteRouteLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>, TError = void>(key: number,
    params?: GetRouteRouteLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteRouteLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>> = ({ signal }) => getRouteRouteLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteRouteLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>>
export type GetRouteRouteLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetRouteRouteLocationsFromKey<TData = Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetRouteRouteLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteRouteLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteRouteLocationsCountFromKey = (
    key: number,
    params?: GetRouteRouteLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/Route/${key}/routeLocations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteRouteLocationsCountFromKeyQueryKey = (key: number,
    params?: GetRouteRouteLocationsCountFromKeyParams,) => {
    return [`/api/v1/Route/${key}/routeLocations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteRouteLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetRouteRouteLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteRouteLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>> = ({ signal }) => getRouteRouteLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteRouteLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>>
export type GetRouteRouteLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetRouteRouteLocationsCountFromKey<TData = Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetRouteRouteLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteRouteLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Creates a route with its associated route locations
 */
export const upsertRouteRoute = (
    routeDto: RouteDto,
    params?: UpsertRouteRouteParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/UpsertRoute`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeDto,
        params, signal
    },
      );
    }
  


export const getUpsertRouteRouteMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof upsertRouteRoute>>, TError,{data: RouteDto;params?: UpsertRouteRouteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof upsertRouteRoute>>, TError,{data: RouteDto;params?: UpsertRouteRouteParams}, TContext> => {

const mutationKey = ['upsertRouteRoute'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof upsertRouteRoute>>, {data: RouteDto;params?: UpsertRouteRouteParams}> = (props) => {
          const {data,params} = props ?? {};

          return  upsertRouteRoute(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpsertRouteRouteMutationResult = NonNullable<Awaited<ReturnType<typeof upsertRouteRoute>>>
    export type UpsertRouteRouteMutationBody = RouteDto
    export type UpsertRouteRouteMutationError = void

    /**
 * @summary Creates a route with its associated route locations
 */
export const useUpsertRouteRoute = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof upsertRouteRoute>>, TError,{data: RouteDto;params?: UpsertRouteRouteParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof upsertRouteRoute>>,
        TError,
        {data: RouteDto;params?: UpsertRouteRouteParams},
        TContext
      > => {

      const mutationOptions = getUpsertRouteRouteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getRouteRouteViewFromId = (
    id: number,
    params?: GetRouteRouteViewFromIdParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/GetRouteView/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteRouteViewFromIdQueryKey = (id: number,
    params?: GetRouteRouteViewFromIdParams,) => {
    return [`/api/v1/GetRouteView/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteRouteViewFromIdQueryOptions = <TData = Awaited<ReturnType<typeof getRouteRouteViewFromId>>, TError = void>(id: number,
    params?: GetRouteRouteViewFromIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteViewFromId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteRouteViewFromIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteRouteViewFromId>>> = ({ signal }) => getRouteRouteViewFromId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteViewFromId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteRouteViewFromIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteRouteViewFromId>>>
export type GetRouteRouteViewFromIdQueryError = void



export function useGetRouteRouteViewFromId<TData = Awaited<ReturnType<typeof getRouteRouteViewFromId>>, TError = void>(
 id: number,
    params?: GetRouteRouteViewFromIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteRouteViewFromId>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteRouteViewFromIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRoute = (
    params?: GetRouteParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Route[]>(
      {url: `/api/v1/Route`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteQueryKey = (params?: GetRouteParams,) => {
    return [`/api/v1/Route`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteQueryOptions = <TData = Awaited<ReturnType<typeof getRoute>>, TError = void>(params?: GetRouteParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoute>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoute>>> = ({ signal }) => getRoute(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoute>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoute>>>
export type GetRouteQueryError = void



export function useGetRoute<TData = Awaited<ReturnType<typeof getRoute>>, TError = void>(
 params?: GetRouteParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoute>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postRoute = (
    route: Route,
    params?: PostRouteParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Route`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: route,
        params, signal
    },
      );
    }
  


export const getPostRouteMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoute>>, TError,{data: Route;params?: PostRouteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRoute>>, TError,{data: Route;params?: PostRouteParams}, TContext> => {

const mutationKey = ['postRoute'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoute>>, {data: Route;params?: PostRouteParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postRoute(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRouteMutationResult = NonNullable<Awaited<ReturnType<typeof postRoute>>>
    export type PostRouteMutationBody = Route
    export type PostRouteMutationError = void

    export const usePostRoute = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoute>>, TError,{data: Route;params?: PostRouteParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postRoute>>,
        TError,
        {data: Route;params?: PostRouteParams},
        TContext
      > => {

      const mutationOptions = getPostRouteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getRouteCount = (
    params?: GetRouteCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Route[]>(
      {url: `/api/v1/Route/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteCountQueryKey = (params?: GetRouteCountParams,) => {
    return [`/api/v1/Route/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteCountQueryOptions = <TData = Awaited<ReturnType<typeof getRouteCount>>, TError = void>(params?: GetRouteCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteCount>>> = ({ signal }) => getRouteCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteCountQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteCount>>>
export type GetRouteCountQueryError = void



export function useGetRouteCount<TData = Awaited<ReturnType<typeof getRouteCount>>, TError = void>(
 params?: GetRouteCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRouteFromKey = (
    key: number,
    params?: GetRouteFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Route>(
      {url: `/api/v1/Route/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteFromKeyQueryKey = (key: number,
    params?: GetRouteFromKeyParams,) => {
    return [`/api/v1/Route/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteFromKey>>, TError = void>(key: number,
    params?: GetRouteFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteFromKey>>> = ({ signal }) => getRouteFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteFromKey>>>
export type GetRouteFromKeyQueryError = void



export function useGetRouteFromKey<TData = Awaited<ReturnType<typeof getRouteFromKey>>, TError = void>(
 key: number,
    params?: GetRouteFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putRouteFromKey = (
    key: number,
    route: Route,
    params?: PutRouteFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Route/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: route,
        params
    },
      );
    }
  


export const getPutRouteFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRouteFromKey>>, TError,{key: number;data: Route;params?: PutRouteFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putRouteFromKey>>, TError,{key: number;data: Route;params?: PutRouteFromKeyParams}, TContext> => {

const mutationKey = ['putRouteFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRouteFromKey>>, {key: number;data: Route;params?: PutRouteFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putRouteFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutRouteFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putRouteFromKey>>>
    export type PutRouteFromKeyMutationBody = Route
    export type PutRouteFromKeyMutationError = void

    export const usePutRouteFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRouteFromKey>>, TError,{key: number;data: Route;params?: PutRouteFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putRouteFromKey>>,
        TError,
        {key: number;data: Route;params?: PutRouteFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutRouteFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchRouteFromKey = (
    key: number,
    route: Route,
    params?: PatchRouteFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Route/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: route,
        params
    },
      );
    }
  


export const getPatchRouteFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRouteFromKey>>, TError,{key: number;data: Route;params?: PatchRouteFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchRouteFromKey>>, TError,{key: number;data: Route;params?: PatchRouteFromKeyParams}, TContext> => {

const mutationKey = ['patchRouteFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchRouteFromKey>>, {key: number;data: Route;params?: PatchRouteFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchRouteFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchRouteFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchRouteFromKey>>>
    export type PatchRouteFromKeyMutationBody = Route
    export type PatchRouteFromKeyMutationError = void

    export const usePatchRouteFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRouteFromKey>>, TError,{key: number;data: Route;params?: PatchRouteFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchRouteFromKey>>,
        TError,
        {key: number;data: Route;params?: PatchRouteFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchRouteFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteRouteFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Route/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRouteFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouteFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteRouteFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteRouteFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRouteFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteRouteFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRouteFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRouteFromKey>>>
    
    export type DeleteRouteFromKeyMutationError = void

    export const useDeleteRouteFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouteFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteRouteFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteRouteFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    