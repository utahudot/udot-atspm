/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetMeasureCommentCountParams,
  GetMeasureCommentFromKeyParams,
  GetMeasureCommentMeasureTypesCountFromKeyParams,
  GetMeasureCommentMeasureTypesFromKeyParams,
  GetMeasureCommentParams,
  MeasureComment,
  MeasureType,
  PatchMeasureCommentFromKeyParams,
  PostMeasureCommentParams,
  PutMeasureCommentFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getMeasureCommentMeasureTypesFromKey = (
    key: number,
    params?: GetMeasureCommentMeasureTypesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType[]>(
      {url: `/api/v1/MeasureComment/${key}/measureTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureCommentMeasureTypesFromKeyQueryKey = (key: number,
    params?: GetMeasureCommentMeasureTypesFromKeyParams,) => {
    return [`/api/v1/MeasureComment/${key}/measureTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureCommentMeasureTypesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>, TError = void>(key: number,
    params?: GetMeasureCommentMeasureTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureCommentMeasureTypesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>> = ({ signal }) => getMeasureCommentMeasureTypesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureCommentMeasureTypesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>>
export type GetMeasureCommentMeasureTypesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useGetMeasureCommentMeasureTypesFromKey<TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureCommentMeasureTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureCommentMeasureTypesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getMeasureCommentMeasureTypesCountFromKey = (
    key: number,
    params?: GetMeasureCommentMeasureTypesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType[]>(
      {url: `/api/v1/MeasureComment/${key}/measureTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureCommentMeasureTypesCountFromKeyQueryKey = (key: number,
    params?: GetMeasureCommentMeasureTypesCountFromKeyParams,) => {
    return [`/api/v1/MeasureComment/${key}/measureTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureCommentMeasureTypesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>, TError = void>(key: number,
    params?: GetMeasureCommentMeasureTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureCommentMeasureTypesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>> = ({ signal }) => getMeasureCommentMeasureTypesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureCommentMeasureTypesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>>
export type GetMeasureCommentMeasureTypesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useGetMeasureCommentMeasureTypesCountFromKey<TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureCommentMeasureTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureCommentMeasureTypesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureComment = (
    params?: GetMeasureCommentParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureComment[]>(
      {url: `/api/v1/MeasureComment`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureCommentQueryKey = (params?: GetMeasureCommentParams,) => {
    return [`/api/v1/MeasureComment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureCommentQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureComment>>, TError = void>(params?: GetMeasureCommentParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureComment>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureCommentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureComment>>> = ({ signal }) => getMeasureComment(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureComment>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureCommentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureComment>>>
export type GetMeasureCommentQueryError = void



export function useGetMeasureComment<TData = Awaited<ReturnType<typeof getMeasureComment>>, TError = void>(
 params?: GetMeasureCommentParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureComment>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureCommentQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postMeasureComment = (
    measureComment: MeasureComment,
    params?: PostMeasureCommentParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureComment`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureComment,
        params, signal
    },
      );
    }
  


export const getPostMeasureCommentMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureComment>>, TError,{data: MeasureComment;params?: PostMeasureCommentParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMeasureComment>>, TError,{data: MeasureComment;params?: PostMeasureCommentParams}, TContext> => {

const mutationKey = ['postMeasureComment'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeasureComment>>, {data: MeasureComment;params?: PostMeasureCommentParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postMeasureComment(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeasureCommentMutationResult = NonNullable<Awaited<ReturnType<typeof postMeasureComment>>>
    export type PostMeasureCommentMutationBody = MeasureComment
    export type PostMeasureCommentMutationError = void

    export const usePostMeasureComment = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureComment>>, TError,{data: MeasureComment;params?: PostMeasureCommentParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMeasureComment>>,
        TError,
        {data: MeasureComment;params?: PostMeasureCommentParams},
        TContext
      > => {

      const mutationOptions = getPostMeasureCommentMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getMeasureCommentCount = (
    params?: GetMeasureCommentCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureComment[]>(
      {url: `/api/v1/MeasureComment/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureCommentCountQueryKey = (params?: GetMeasureCommentCountParams,) => {
    return [`/api/v1/MeasureComment/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureCommentCountQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureCommentCount>>, TError = void>(params?: GetMeasureCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureCommentCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureCommentCount>>> = ({ signal }) => getMeasureCommentCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureCommentCountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureCommentCount>>>
export type GetMeasureCommentCountQueryError = void



export function useGetMeasureCommentCount<TData = Awaited<ReturnType<typeof getMeasureCommentCount>>, TError = void>(
 params?: GetMeasureCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureCommentCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureCommentFromKey = (
    key: number,
    params?: GetMeasureCommentFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureComment>(
      {url: `/api/v1/MeasureComment/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureCommentFromKeyQueryKey = (key: number,
    params?: GetMeasureCommentFromKeyParams,) => {
    return [`/api/v1/MeasureComment/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureCommentFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureCommentFromKey>>, TError = void>(key: number,
    params?: GetMeasureCommentFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureCommentFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureCommentFromKey>>> = ({ signal }) => getMeasureCommentFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureCommentFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureCommentFromKey>>>
export type GetMeasureCommentFromKeyQueryError = void



export function useGetMeasureCommentFromKey<TData = Awaited<ReturnType<typeof getMeasureCommentFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureCommentFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureCommentFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureCommentFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putMeasureCommentFromKey = (
    key: number,
    measureComment: MeasureComment,
    params?: PutMeasureCommentFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureComment/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureComment,
        params
    },
      );
    }
  


export const getPutMeasureCommentFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureCommentFromKey>>, TError,{key: number;data: MeasureComment;params?: PutMeasureCommentFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMeasureCommentFromKey>>, TError,{key: number;data: MeasureComment;params?: PutMeasureCommentFromKeyParams}, TContext> => {

const mutationKey = ['putMeasureCommentFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeasureCommentFromKey>>, {key: number;data: MeasureComment;params?: PutMeasureCommentFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putMeasureCommentFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeasureCommentFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMeasureCommentFromKey>>>
    export type PutMeasureCommentFromKeyMutationBody = MeasureComment
    export type PutMeasureCommentFromKeyMutationError = void

    export const usePutMeasureCommentFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureCommentFromKey>>, TError,{key: number;data: MeasureComment;params?: PutMeasureCommentFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMeasureCommentFromKey>>,
        TError,
        {key: number;data: MeasureComment;params?: PutMeasureCommentFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutMeasureCommentFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchMeasureCommentFromKey = (
    key: number,
    measureComment: MeasureComment,
    params?: PatchMeasureCommentFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureComment/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureComment,
        params
    },
      );
    }
  


export const getPatchMeasureCommentFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureCommentFromKey>>, TError,{key: number;data: MeasureComment;params?: PatchMeasureCommentFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchMeasureCommentFromKey>>, TError,{key: number;data: MeasureComment;params?: PatchMeasureCommentFromKeyParams}, TContext> => {

const mutationKey = ['patchMeasureCommentFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMeasureCommentFromKey>>, {key: number;data: MeasureComment;params?: PatchMeasureCommentFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchMeasureCommentFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMeasureCommentFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchMeasureCommentFromKey>>>
    export type PatchMeasureCommentFromKeyMutationBody = MeasureComment
    export type PatchMeasureCommentFromKeyMutationError = void

    export const usePatchMeasureCommentFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureCommentFromKey>>, TError,{key: number;data: MeasureComment;params?: PatchMeasureCommentFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchMeasureCommentFromKey>>,
        TError,
        {key: number;data: MeasureComment;params?: PatchMeasureCommentFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchMeasureCommentFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteMeasureCommentFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureComment/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMeasureCommentFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteMeasureCommentFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteMeasureCommentFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeasureCommentFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>>
    
    export type DeleteMeasureCommentFromKeyMutationError = void

    export const useDeleteMeasureCommentFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeasureCommentFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    