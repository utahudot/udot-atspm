/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetRouteDistanceCountParams,
  GetRouteDistanceFromKeyParams,
  GetRouteDistanceNextLocationsCountFromKeyParams,
  GetRouteDistanceNextLocationsFromKeyParams,
  GetRouteDistanceParams,
  GetRouteDistancePreviousLocationsCountFromKeyParams,
  GetRouteDistancePreviousLocationsFromKeyParams,
  GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,
  PatchRouteDistanceFromKeyParams,
  PostRouteDistanceParams,
  PutRouteDistanceFromKeyParams,
  RouteDistance,
  RouteLocation
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistancePreviousLocationsFromKey = (
    key: number,
    params?: GetRouteDistancePreviousLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/previousLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistancePreviousLocationsFromKeyQueryKey = (key: number,
    params?: GetRouteDistancePreviousLocationsFromKeyParams,) => {
    return [`/api/v1/RouteDistance/${key}/previousLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistancePreviousLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>, TError = void>(key: number,
    params?: GetRouteDistancePreviousLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistancePreviousLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>> = ({ signal }) => getRouteDistancePreviousLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistancePreviousLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>>
export type GetRouteDistancePreviousLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetRouteDistancePreviousLocationsFromKey<TData = Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetRouteDistancePreviousLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistancePreviousLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistancePreviousLocationsCountFromKey = (
    key: number,
    params?: GetRouteDistancePreviousLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/previousLocations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistancePreviousLocationsCountFromKeyQueryKey = (key: number,
    params?: GetRouteDistancePreviousLocationsCountFromKeyParams,) => {
    return [`/api/v1/RouteDistance/${key}/previousLocations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistancePreviousLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetRouteDistancePreviousLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistancePreviousLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>> = ({ signal }) => getRouteDistancePreviousLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistancePreviousLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>>
export type GetRouteDistancePreviousLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetRouteDistancePreviousLocationsCountFromKey<TData = Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetRouteDistancePreviousLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistancePreviousLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistanceNextLocationsFromKey = (
    key: number,
    params?: GetRouteDistanceNextLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/nextLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistanceNextLocationsFromKeyQueryKey = (key: number,
    params?: GetRouteDistanceNextLocationsFromKeyParams,) => {
    return [`/api/v1/RouteDistance/${key}/nextLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistanceNextLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>, TError = void>(key: number,
    params?: GetRouteDistanceNextLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistanceNextLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>> = ({ signal }) => getRouteDistanceNextLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistanceNextLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>>
export type GetRouteDistanceNextLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetRouteDistanceNextLocationsFromKey<TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetRouteDistanceNextLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistanceNextLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistanceNextLocationsCountFromKey = (
    key: number,
    params?: GetRouteDistanceNextLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/nextLocations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistanceNextLocationsCountFromKeyQueryKey = (key: number,
    params?: GetRouteDistanceNextLocationsCountFromKeyParams,) => {
    return [`/api/v1/RouteDistance/${key}/nextLocations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistanceNextLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetRouteDistanceNextLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistanceNextLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>> = ({ signal }) => getRouteDistanceNextLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistanceNextLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>>
export type GetRouteDistanceNextLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useGetRouteDistanceNextLocationsCountFromKey<TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetRouteDistanceNextLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistanceNextLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Gets the Utah.Udot.Atspm.Data.Models.RouteDistance that contains locationA and locationB
 */
export const getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB = (
    locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteDistance | void>(
      {url: `/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=${locationA},locationB=${locationB})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryKey = (locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,) => {
    return [`/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=${locationA},locationB=${locationB})`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>, TError = void>(locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryKey(locationA,locationB,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>> = ({ signal }) => getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB(locationA,locationB,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationA && locationB), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>>
export type GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryError = void


/**
 * @summary Gets the Utah.Udot.Atspm.Data.Models.RouteDistance that contains locationA and locationB
 */

export function useGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB<TData = Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>, TError = void>(
 locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryOptions(locationA,locationB,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRouteDistance = (
    params?: GetRouteDistanceParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteDistance[]>(
      {url: `/api/v1/RouteDistance`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistanceQueryKey = (params?: GetRouteDistanceParams,) => {
    return [`/api/v1/RouteDistance`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistanceQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistance>>, TError = void>(params?: GetRouteDistanceParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistance>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistanceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistance>>> = ({ signal }) => getRouteDistance(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistance>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistanceQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistance>>>
export type GetRouteDistanceQueryError = void



export function useGetRouteDistance<TData = Awaited<ReturnType<typeof getRouteDistance>>, TError = void>(
 params?: GetRouteDistanceParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistance>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistanceQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postRouteDistance = (
    routeDistance: RouteDistance,
    params?: PostRouteDistanceParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteDistance`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeDistance,
        params, signal
    },
      );
    }
  


export const getPostRouteDistanceMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRouteDistance>>, TError,{data: RouteDistance;params?: PostRouteDistanceParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRouteDistance>>, TError,{data: RouteDistance;params?: PostRouteDistanceParams}, TContext> => {

const mutationKey = ['postRouteDistance'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRouteDistance>>, {data: RouteDistance;params?: PostRouteDistanceParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postRouteDistance(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRouteDistanceMutationResult = NonNullable<Awaited<ReturnType<typeof postRouteDistance>>>
    export type PostRouteDistanceMutationBody = RouteDistance
    export type PostRouteDistanceMutationError = void

    export const usePostRouteDistance = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRouteDistance>>, TError,{data: RouteDistance;params?: PostRouteDistanceParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postRouteDistance>>,
        TError,
        {data: RouteDistance;params?: PostRouteDistanceParams},
        TContext
      > => {

      const mutationOptions = getPostRouteDistanceMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getRouteDistanceCount = (
    params?: GetRouteDistanceCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteDistance[]>(
      {url: `/api/v1/RouteDistance/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistanceCountQueryKey = (params?: GetRouteDistanceCountParams,) => {
    return [`/api/v1/RouteDistance/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistanceCountQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistanceCount>>, TError = void>(params?: GetRouteDistanceCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistanceCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistanceCount>>> = ({ signal }) => getRouteDistanceCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistanceCountQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistanceCount>>>
export type GetRouteDistanceCountQueryError = void



export function useGetRouteDistanceCount<TData = Awaited<ReturnType<typeof getRouteDistanceCount>>, TError = void>(
 params?: GetRouteDistanceCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistanceCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRouteDistanceFromKey = (
    key: number,
    params?: GetRouteDistanceFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteDistance>(
      {url: `/api/v1/RouteDistance/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteDistanceFromKeyQueryKey = (key: number,
    params?: GetRouteDistanceFromKeyParams,) => {
    return [`/api/v1/RouteDistance/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteDistanceFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteDistanceFromKey>>, TError = void>(key: number,
    params?: GetRouteDistanceFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteDistanceFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteDistanceFromKey>>> = ({ signal }) => getRouteDistanceFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteDistanceFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteDistanceFromKey>>>
export type GetRouteDistanceFromKeyQueryError = void



export function useGetRouteDistanceFromKey<TData = Awaited<ReturnType<typeof getRouteDistanceFromKey>>, TError = void>(
 key: number,
    params?: GetRouteDistanceFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteDistanceFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteDistanceFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putRouteDistanceFromKey = (
    key: number,
    routeDistance: RouteDistance,
    params?: PutRouteDistanceFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteDistance/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeDistance,
        params
    },
      );
    }
  


export const getPutRouteDistanceFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRouteDistanceFromKey>>, TError,{key: number;data: RouteDistance;params?: PutRouteDistanceFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putRouteDistanceFromKey>>, TError,{key: number;data: RouteDistance;params?: PutRouteDistanceFromKeyParams}, TContext> => {

const mutationKey = ['putRouteDistanceFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRouteDistanceFromKey>>, {key: number;data: RouteDistance;params?: PutRouteDistanceFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putRouteDistanceFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutRouteDistanceFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putRouteDistanceFromKey>>>
    export type PutRouteDistanceFromKeyMutationBody = RouteDistance
    export type PutRouteDistanceFromKeyMutationError = void

    export const usePutRouteDistanceFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRouteDistanceFromKey>>, TError,{key: number;data: RouteDistance;params?: PutRouteDistanceFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putRouteDistanceFromKey>>,
        TError,
        {key: number;data: RouteDistance;params?: PutRouteDistanceFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutRouteDistanceFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchRouteDistanceFromKey = (
    key: number,
    routeDistance: RouteDistance,
    params?: PatchRouteDistanceFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteDistance/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeDistance,
        params
    },
      );
    }
  


export const getPatchRouteDistanceFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRouteDistanceFromKey>>, TError,{key: number;data: RouteDistance;params?: PatchRouteDistanceFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchRouteDistanceFromKey>>, TError,{key: number;data: RouteDistance;params?: PatchRouteDistanceFromKeyParams}, TContext> => {

const mutationKey = ['patchRouteDistanceFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchRouteDistanceFromKey>>, {key: number;data: RouteDistance;params?: PatchRouteDistanceFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchRouteDistanceFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchRouteDistanceFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchRouteDistanceFromKey>>>
    export type PatchRouteDistanceFromKeyMutationBody = RouteDistance
    export type PatchRouteDistanceFromKeyMutationError = void

    export const usePatchRouteDistanceFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRouteDistanceFromKey>>, TError,{key: number;data: RouteDistance;params?: PatchRouteDistanceFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchRouteDistanceFromKey>>,
        TError,
        {key: number;data: RouteDistance;params?: PatchRouteDistanceFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchRouteDistanceFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteRouteDistanceFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteDistance/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRouteDistanceFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteRouteDistanceFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteRouteDistanceFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRouteDistanceFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>>
    
    export type DeleteRouteDistanceFromKeyMutationError = void

    export const useDeleteRouteDistanceFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteRouteDistanceFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    