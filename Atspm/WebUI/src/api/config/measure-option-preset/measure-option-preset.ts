/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetMeasureOptionPresetCountParams,
  GetMeasureOptionPresetFromKeyParams,
  GetMeasureOptionPresetMeasureOptionPresetTypesParams,
  GetMeasureOptionPresetParams,
  MeasureOptionPreset,
  PatchMeasureOptionPresetFromKeyParams,
  PostMeasureOptionPresetParams,
  PutMeasureOptionPresetFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Retrieves a list of measure option preset types.
 */
export const getMeasureOptionPresetMeasureOptionPresetTypes = (
    params?: GetMeasureOptionPresetMeasureOptionPresetTypesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<string[]>(
      {url: `/api/v1/MeasureOptionPreset/GetMeasureOptionPresetTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionPresetMeasureOptionPresetTypesQueryKey = (params?: GetMeasureOptionPresetMeasureOptionPresetTypesParams,) => {
    return [`/api/v1/MeasureOptionPreset/GetMeasureOptionPresetTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionPresetMeasureOptionPresetTypesQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>, TError = void>(params?: GetMeasureOptionPresetMeasureOptionPresetTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionPresetMeasureOptionPresetTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>> = ({ signal }) => getMeasureOptionPresetMeasureOptionPresetTypes(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionPresetMeasureOptionPresetTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>>
export type GetMeasureOptionPresetMeasureOptionPresetTypesQueryError = void


/**
 * @summary Retrieves a list of measure option preset types.
 */

export function useGetMeasureOptionPresetMeasureOptionPresetTypes<TData = Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>, TError = void>(
 params?: GetMeasureOptionPresetMeasureOptionPresetTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetMeasureOptionPresetTypes>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionPresetMeasureOptionPresetTypesQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureOptionPreset = (
    params?: GetMeasureOptionPresetParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOptionPreset[]>(
      {url: `/api/v1/MeasureOptionPreset`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionPresetQueryKey = (params?: GetMeasureOptionPresetParams,) => {
    return [`/api/v1/MeasureOptionPreset`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionPresetQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOptionPreset>>, TError = void>(params?: GetMeasureOptionPresetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPreset>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionPresetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOptionPreset>>> = ({ signal }) => getMeasureOptionPreset(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPreset>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionPresetQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOptionPreset>>>
export type GetMeasureOptionPresetQueryError = void



export function useGetMeasureOptionPreset<TData = Awaited<ReturnType<typeof getMeasureOptionPreset>>, TError = void>(
 params?: GetMeasureOptionPresetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPreset>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionPresetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postMeasureOptionPreset = (
    measureOptionPreset: MeasureOptionPreset,
    params?: PostMeasureOptionPresetParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOptionPreset`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureOptionPreset,
        params, signal
    },
      );
    }
  


export const getPostMeasureOptionPresetMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureOptionPreset>>, TError,{data: MeasureOptionPreset;params?: PostMeasureOptionPresetParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMeasureOptionPreset>>, TError,{data: MeasureOptionPreset;params?: PostMeasureOptionPresetParams}, TContext> => {

const mutationKey = ['postMeasureOptionPreset'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeasureOptionPreset>>, {data: MeasureOptionPreset;params?: PostMeasureOptionPresetParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postMeasureOptionPreset(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeasureOptionPresetMutationResult = NonNullable<Awaited<ReturnType<typeof postMeasureOptionPreset>>>
    export type PostMeasureOptionPresetMutationBody = MeasureOptionPreset
    export type PostMeasureOptionPresetMutationError = void

    export const usePostMeasureOptionPreset = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureOptionPreset>>, TError,{data: MeasureOptionPreset;params?: PostMeasureOptionPresetParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMeasureOptionPreset>>,
        TError,
        {data: MeasureOptionPreset;params?: PostMeasureOptionPresetParams},
        TContext
      > => {

      const mutationOptions = getPostMeasureOptionPresetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getMeasureOptionPresetCount = (
    params?: GetMeasureOptionPresetCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOptionPreset[]>(
      {url: `/api/v1/MeasureOptionPreset/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionPresetCountQueryKey = (params?: GetMeasureOptionPresetCountParams,) => {
    return [`/api/v1/MeasureOptionPreset/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionPresetCountQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOptionPresetCount>>, TError = void>(params?: GetMeasureOptionPresetCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionPresetCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOptionPresetCount>>> = ({ signal }) => getMeasureOptionPresetCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionPresetCountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOptionPresetCount>>>
export type GetMeasureOptionPresetCountQueryError = void



export function useGetMeasureOptionPresetCount<TData = Awaited<ReturnType<typeof getMeasureOptionPresetCount>>, TError = void>(
 params?: GetMeasureOptionPresetCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionPresetCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureOptionPresetFromKey = (
    key: number,
    params?: GetMeasureOptionPresetFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOptionPreset>(
      {url: `/api/v1/MeasureOptionPreset/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionPresetFromKeyQueryKey = (key: number,
    params?: GetMeasureOptionPresetFromKeyParams,) => {
    return [`/api/v1/MeasureOptionPreset/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionPresetFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>, TError = void>(key: number,
    params?: GetMeasureOptionPresetFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionPresetFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>> = ({ signal }) => getMeasureOptionPresetFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionPresetFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>>
export type GetMeasureOptionPresetFromKeyQueryError = void



export function useGetMeasureOptionPresetFromKey<TData = Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureOptionPresetFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionPresetFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionPresetFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putMeasureOptionPresetFromKey = (
    key: number,
    measureOptionPreset: MeasureOptionPreset,
    params?: PutMeasureOptionPresetFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOptionPreset/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureOptionPreset,
        params
    },
      );
    }
  


export const getPutMeasureOptionPresetFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureOptionPresetFromKey>>, TError,{key: number;data: MeasureOptionPreset;params?: PutMeasureOptionPresetFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMeasureOptionPresetFromKey>>, TError,{key: number;data: MeasureOptionPreset;params?: PutMeasureOptionPresetFromKeyParams}, TContext> => {

const mutationKey = ['putMeasureOptionPresetFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeasureOptionPresetFromKey>>, {key: number;data: MeasureOptionPreset;params?: PutMeasureOptionPresetFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putMeasureOptionPresetFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeasureOptionPresetFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMeasureOptionPresetFromKey>>>
    export type PutMeasureOptionPresetFromKeyMutationBody = MeasureOptionPreset
    export type PutMeasureOptionPresetFromKeyMutationError = void

    export const usePutMeasureOptionPresetFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureOptionPresetFromKey>>, TError,{key: number;data: MeasureOptionPreset;params?: PutMeasureOptionPresetFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMeasureOptionPresetFromKey>>,
        TError,
        {key: number;data: MeasureOptionPreset;params?: PutMeasureOptionPresetFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutMeasureOptionPresetFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchMeasureOptionPresetFromKey = (
    key: number,
    measureOptionPreset: MeasureOptionPreset,
    params?: PatchMeasureOptionPresetFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOptionPreset/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureOptionPreset,
        params
    },
      );
    }
  


export const getPatchMeasureOptionPresetFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureOptionPresetFromKey>>, TError,{key: number;data: MeasureOptionPreset;params?: PatchMeasureOptionPresetFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchMeasureOptionPresetFromKey>>, TError,{key: number;data: MeasureOptionPreset;params?: PatchMeasureOptionPresetFromKeyParams}, TContext> => {

const mutationKey = ['patchMeasureOptionPresetFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMeasureOptionPresetFromKey>>, {key: number;data: MeasureOptionPreset;params?: PatchMeasureOptionPresetFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchMeasureOptionPresetFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMeasureOptionPresetFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchMeasureOptionPresetFromKey>>>
    export type PatchMeasureOptionPresetFromKeyMutationBody = MeasureOptionPreset
    export type PatchMeasureOptionPresetFromKeyMutationError = void

    export const usePatchMeasureOptionPresetFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureOptionPresetFromKey>>, TError,{key: number;data: MeasureOptionPreset;params?: PatchMeasureOptionPresetFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchMeasureOptionPresetFromKey>>,
        TError,
        {key: number;data: MeasureOptionPreset;params?: PatchMeasureOptionPresetFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchMeasureOptionPresetFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteMeasureOptionPresetFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOptionPreset/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMeasureOptionPresetFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureOptionPresetFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureOptionPresetFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteMeasureOptionPresetFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeasureOptionPresetFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteMeasureOptionPresetFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeasureOptionPresetFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeasureOptionPresetFromKey>>>
    
    export type DeleteMeasureOptionPresetFromKeyMutationError = void

    export const useDeleteMeasureOptionPresetFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureOptionPresetFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeasureOptionPresetFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeasureOptionPresetFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    