/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetMeasureOptionCountParams,
  GetMeasureOptionFromKeyParams,
  GetMeasureOptionParams,
  MeasureOption,
  PatchMeasureOptionFromKeyParams,
  PostMeasureOptionParams,
  PutMeasureOptionFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getMeasureOption = (
    params?: GetMeasureOptionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOption[]>(
      {url: `/api/v1/MeasureOption`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionQueryKey = (params?: GetMeasureOptionParams,) => {
    return [`/api/v1/MeasureOption`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOption>>, TError = void>(params?: GetMeasureOptionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOption>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOption>>> = ({ signal }) => getMeasureOption(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOption>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOption>>>
export type GetMeasureOptionQueryError = void



export function useGetMeasureOption<TData = Awaited<ReturnType<typeof getMeasureOption>>, TError = void>(
 params?: GetMeasureOptionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOption>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postMeasureOption = (
    measureOption: MeasureOption,
    params?: PostMeasureOptionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOption`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureOption,
        params, signal
    },
      );
    }
  


export const getPostMeasureOptionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureOption>>, TError,{data: MeasureOption;params?: PostMeasureOptionParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMeasureOption>>, TError,{data: MeasureOption;params?: PostMeasureOptionParams}, TContext> => {

const mutationKey = ['postMeasureOption'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeasureOption>>, {data: MeasureOption;params?: PostMeasureOptionParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postMeasureOption(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeasureOptionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeasureOption>>>
    export type PostMeasureOptionMutationBody = MeasureOption
    export type PostMeasureOptionMutationError = void

    export const usePostMeasureOption = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeasureOption>>, TError,{data: MeasureOption;params?: PostMeasureOptionParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMeasureOption>>,
        TError,
        {data: MeasureOption;params?: PostMeasureOptionParams},
        TContext
      > => {

      const mutationOptions = getPostMeasureOptionMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getMeasureOptionCount = (
    params?: GetMeasureOptionCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOption[]>(
      {url: `/api/v1/MeasureOption/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionCountQueryKey = (params?: GetMeasureOptionCountParams,) => {
    return [`/api/v1/MeasureOption/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionCountQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOptionCount>>, TError = void>(params?: GetMeasureOptionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOptionCount>>> = ({ signal }) => getMeasureOptionCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionCountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOptionCount>>>
export type GetMeasureOptionCountQueryError = void



export function useGetMeasureOptionCount<TData = Awaited<ReturnType<typeof getMeasureOptionCount>>, TError = void>(
 params?: GetMeasureOptionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMeasureOptionFromKey = (
    key: number,
    params?: GetMeasureOptionFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureOption>(
      {url: `/api/v1/MeasureOption/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMeasureOptionFromKeyQueryKey = (key: number,
    params?: GetMeasureOptionFromKeyParams,) => {
    return [`/api/v1/MeasureOption/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeasureOptionFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeasureOptionFromKey>>, TError = void>(key: number,
    params?: GetMeasureOptionFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeasureOptionFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureOptionFromKey>>> = ({ signal }) => getMeasureOptionFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeasureOptionFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeasureOptionFromKey>>>
export type GetMeasureOptionFromKeyQueryError = void



export function useGetMeasureOptionFromKey<TData = Awaited<ReturnType<typeof getMeasureOptionFromKey>>, TError = void>(
 key: number,
    params?: GetMeasureOptionFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeasureOptionFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMeasureOptionFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putMeasureOptionFromKey = (
    key: number,
    measureOption: MeasureOption,
    params?: PutMeasureOptionFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOption/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureOption,
        params
    },
      );
    }
  


export const getPutMeasureOptionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureOptionFromKey>>, TError,{key: number;data: MeasureOption;params?: PutMeasureOptionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMeasureOptionFromKey>>, TError,{key: number;data: MeasureOption;params?: PutMeasureOptionFromKeyParams}, TContext> => {

const mutationKey = ['putMeasureOptionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeasureOptionFromKey>>, {key: number;data: MeasureOption;params?: PutMeasureOptionFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putMeasureOptionFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeasureOptionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMeasureOptionFromKey>>>
    export type PutMeasureOptionFromKeyMutationBody = MeasureOption
    export type PutMeasureOptionFromKeyMutationError = void

    export const usePutMeasureOptionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeasureOptionFromKey>>, TError,{key: number;data: MeasureOption;params?: PutMeasureOptionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMeasureOptionFromKey>>,
        TError,
        {key: number;data: MeasureOption;params?: PutMeasureOptionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutMeasureOptionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchMeasureOptionFromKey = (
    key: number,
    measureOption: MeasureOption,
    params?: PatchMeasureOptionFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOption/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: measureOption,
        params
    },
      );
    }
  


export const getPatchMeasureOptionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureOptionFromKey>>, TError,{key: number;data: MeasureOption;params?: PatchMeasureOptionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchMeasureOptionFromKey>>, TError,{key: number;data: MeasureOption;params?: PatchMeasureOptionFromKeyParams}, TContext> => {

const mutationKey = ['patchMeasureOptionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMeasureOptionFromKey>>, {key: number;data: MeasureOption;params?: PatchMeasureOptionFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchMeasureOptionFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMeasureOptionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchMeasureOptionFromKey>>>
    export type PatchMeasureOptionFromKeyMutationBody = MeasureOption
    export type PatchMeasureOptionFromKeyMutationError = void

    export const usePatchMeasureOptionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasureOptionFromKey>>, TError,{key: number;data: MeasureOption;params?: PatchMeasureOptionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchMeasureOptionFromKey>>,
        TError,
        {key: number;data: MeasureOption;params?: PatchMeasureOptionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchMeasureOptionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteMeasureOptionFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOption/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMeasureOptionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteMeasureOptionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteMeasureOptionFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeasureOptionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>>
    
    export type DeleteMeasureOptionFromKeyMutationError = void

    export const useDeleteMeasureOptionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeasureOptionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    