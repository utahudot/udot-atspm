/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Faq,
  GetFaqCountParams,
  GetFaqFromKeyParams,
  GetFaqParams,
  PatchFaqFromKeyParams,
  PostFaqParams,
  PutFaqFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getFaq = (
    params?: GetFaqParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Faq[]>(
      {url: `/api/v1/Faq`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFaqQueryKey = (params?: GetFaqParams,) => {
    return [`/api/v1/Faq`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFaqQueryOptions = <TData = Awaited<ReturnType<typeof getFaq>>, TError = void>(params?: GetFaqParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFaqQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaq>>> = ({ signal }) => getFaq(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFaqQueryResult = NonNullable<Awaited<ReturnType<typeof getFaq>>>
export type GetFaqQueryError = void



export function useGetFaq<TData = Awaited<ReturnType<typeof getFaq>>, TError = void>(
 params?: GetFaqParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFaqQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postFaq = (
    faq: Faq,
    params?: PostFaqParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Faq`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: faq,
        params, signal
    },
      );
    }
  


export const getPostFaqMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFaq>>, TError,{data: Faq;params?: PostFaqParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postFaq>>, TError,{data: Faq;params?: PostFaqParams}, TContext> => {

const mutationKey = ['postFaq'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFaq>>, {data: Faq;params?: PostFaqParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postFaq(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFaqMutationResult = NonNullable<Awaited<ReturnType<typeof postFaq>>>
    export type PostFaqMutationBody = Faq
    export type PostFaqMutationError = void

    export const usePostFaq = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFaq>>, TError,{data: Faq;params?: PostFaqParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postFaq>>,
        TError,
        {data: Faq;params?: PostFaqParams},
        TContext
      > => {

      const mutationOptions = getPostFaqMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getFaqCount = (
    params?: GetFaqCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Faq[]>(
      {url: `/api/v1/Faq/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFaqCountQueryKey = (params?: GetFaqCountParams,) => {
    return [`/api/v1/Faq/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFaqCountQueryOptions = <TData = Awaited<ReturnType<typeof getFaqCount>>, TError = void>(params?: GetFaqCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFaqCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFaqCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaqCount>>> = ({ signal }) => getFaqCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFaqCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFaqCountQueryResult = NonNullable<Awaited<ReturnType<typeof getFaqCount>>>
export type GetFaqCountQueryError = void



export function useGetFaqCount<TData = Awaited<ReturnType<typeof getFaqCount>>, TError = void>(
 params?: GetFaqCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFaqCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFaqCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFaqFromKey = (
    key: number,
    params?: GetFaqFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Faq>(
      {url: `/api/v1/Faq/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFaqFromKeyQueryKey = (key: number,
    params?: GetFaqFromKeyParams,) => {
    return [`/api/v1/Faq/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFaqFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getFaqFromKey>>, TError = void>(key: number,
    params?: GetFaqFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFaqFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFaqFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaqFromKey>>> = ({ signal }) => getFaqFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFaqFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFaqFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getFaqFromKey>>>
export type GetFaqFromKeyQueryError = void



export function useGetFaqFromKey<TData = Awaited<ReturnType<typeof getFaqFromKey>>, TError = void>(
 key: number,
    params?: GetFaqFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFaqFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFaqFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putFaqFromKey = (
    key: number,
    faq: Faq,
    params?: PutFaqFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Faq/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: faq,
        params
    },
      );
    }
  


export const getPutFaqFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFaqFromKey>>, TError,{key: number;data: Faq;params?: PutFaqFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putFaqFromKey>>, TError,{key: number;data: Faq;params?: PutFaqFromKeyParams}, TContext> => {

const mutationKey = ['putFaqFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putFaqFromKey>>, {key: number;data: Faq;params?: PutFaqFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putFaqFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutFaqFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putFaqFromKey>>>
    export type PutFaqFromKeyMutationBody = Faq
    export type PutFaqFromKeyMutationError = void

    export const usePutFaqFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFaqFromKey>>, TError,{key: number;data: Faq;params?: PutFaqFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putFaqFromKey>>,
        TError,
        {key: number;data: Faq;params?: PutFaqFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutFaqFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchFaqFromKey = (
    key: number,
    faq: Faq,
    params?: PatchFaqFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Faq/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: faq,
        params
    },
      );
    }
  


export const getPatchFaqFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFaqFromKey>>, TError,{key: number;data: Faq;params?: PatchFaqFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchFaqFromKey>>, TError,{key: number;data: Faq;params?: PatchFaqFromKeyParams}, TContext> => {

const mutationKey = ['patchFaqFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchFaqFromKey>>, {key: number;data: Faq;params?: PatchFaqFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchFaqFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchFaqFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchFaqFromKey>>>
    export type PatchFaqFromKeyMutationBody = Faq
    export type PatchFaqFromKeyMutationError = void

    export const usePatchFaqFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFaqFromKey>>, TError,{key: number;data: Faq;params?: PatchFaqFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchFaqFromKey>>,
        TError,
        {key: number;data: Faq;params?: PatchFaqFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchFaqFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteFaqFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Faq/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteFaqFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteFaqFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteFaqFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteFaqFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFaqFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteFaqFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteFaqFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFaqFromKey>>>
    
    export type DeleteFaqFromKeyMutationError = void

    export const useDeleteFaqFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteFaqFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteFaqFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteFaqFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    