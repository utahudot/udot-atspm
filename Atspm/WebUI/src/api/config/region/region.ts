/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetRegionCountParams,
  GetRegionFromKeyParams,
  GetRegionLocationsCountFromKeyParams,
  GetRegionLocationsFromKeyParams,
  GetRegionParams,
  Location,
  PatchRegionFromKeyParams,
  PostRegionParams,
  PutRegionFromKeyParams,
  Region
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getRegionLocationsFromKey = (
    key: number,
    params?: GetRegionLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/api/v1/Region/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRegionLocationsFromKeyQueryKey = (key: number,
    params?: GetRegionLocationsFromKeyParams,) => {
    return [`/api/v1/Region/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRegionLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRegionLocationsFromKey>>, TError = void>(key: number,
    params?: GetRegionLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegionLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegionLocationsFromKey>>> = ({ signal }) => getRegionLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegionLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegionLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRegionLocationsFromKey>>>
export type GetRegionLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetRegionLocationsFromKey<TData = Awaited<ReturnType<typeof getRegionLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetRegionLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRegionLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getRegionLocationsCountFromKey = (
    key: number,
    params?: GetRegionLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/api/v1/Region/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRegionLocationsCountFromKeyQueryKey = (key: number,
    params?: GetRegionLocationsCountFromKeyParams,) => {
    return [`/api/v1/Region/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRegionLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetRegionLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegionLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>> = ({ signal }) => getRegionLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegionLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>>
export type GetRegionLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetRegionLocationsCountFromKey<TData = Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetRegionLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRegionLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRegion = (
    params?: GetRegionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Region[]>(
      {url: `/api/v1/Region`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRegionQueryKey = (params?: GetRegionParams,) => {
    return [`/api/v1/Region`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRegionQueryOptions = <TData = Awaited<ReturnType<typeof getRegion>>, TError = void>(params?: GetRegionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegion>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegion>>> = ({ signal }) => getRegion(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegion>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegionQueryResult = NonNullable<Awaited<ReturnType<typeof getRegion>>>
export type GetRegionQueryError = void



export function useGetRegion<TData = Awaited<ReturnType<typeof getRegion>>, TError = void>(
 params?: GetRegionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegion>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRegionQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postRegion = (
    region: Region,
    params?: PostRegionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Region`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: region,
        params, signal
    },
      );
    }
  


export const getPostRegionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegion>>, TError,{data: Region;params?: PostRegionParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRegion>>, TError,{data: Region;params?: PostRegionParams}, TContext> => {

const mutationKey = ['postRegion'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRegion>>, {data: Region;params?: PostRegionParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postRegion(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRegionMutationResult = NonNullable<Awaited<ReturnType<typeof postRegion>>>
    export type PostRegionMutationBody = Region
    export type PostRegionMutationError = void

    export const usePostRegion = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegion>>, TError,{data: Region;params?: PostRegionParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postRegion>>,
        TError,
        {data: Region;params?: PostRegionParams},
        TContext
      > => {

      const mutationOptions = getPostRegionMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getRegionCount = (
    params?: GetRegionCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Region[]>(
      {url: `/api/v1/Region/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRegionCountQueryKey = (params?: GetRegionCountParams,) => {
    return [`/api/v1/Region/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRegionCountQueryOptions = <TData = Awaited<ReturnType<typeof getRegionCount>>, TError = void>(params?: GetRegionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegionCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegionCount>>> = ({ signal }) => getRegionCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegionCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegionCountQueryResult = NonNullable<Awaited<ReturnType<typeof getRegionCount>>>
export type GetRegionCountQueryError = void



export function useGetRegionCount<TData = Awaited<ReturnType<typeof getRegionCount>>, TError = void>(
 params?: GetRegionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRegionCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRegionFromKey = (
    key: number,
    params?: GetRegionFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Region>(
      {url: `/api/v1/Region/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRegionFromKeyQueryKey = (key: number,
    params?: GetRegionFromKeyParams,) => {
    return [`/api/v1/Region/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRegionFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRegionFromKey>>, TError = void>(key: number,
    params?: GetRegionFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegionFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegionFromKey>>> = ({ signal }) => getRegionFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegionFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegionFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRegionFromKey>>>
export type GetRegionFromKeyQueryError = void



export function useGetRegionFromKey<TData = Awaited<ReturnType<typeof getRegionFromKey>>, TError = void>(
 key: number,
    params?: GetRegionFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegionFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRegionFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putRegionFromKey = (
    key: number,
    region: Region,
    params?: PutRegionFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Region/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: region,
        params
    },
      );
    }
  


export const getPutRegionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRegionFromKey>>, TError,{key: number;data: Region;params?: PutRegionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putRegionFromKey>>, TError,{key: number;data: Region;params?: PutRegionFromKeyParams}, TContext> => {

const mutationKey = ['putRegionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRegionFromKey>>, {key: number;data: Region;params?: PutRegionFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putRegionFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutRegionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putRegionFromKey>>>
    export type PutRegionFromKeyMutationBody = Region
    export type PutRegionFromKeyMutationError = void

    export const usePutRegionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRegionFromKey>>, TError,{key: number;data: Region;params?: PutRegionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putRegionFromKey>>,
        TError,
        {key: number;data: Region;params?: PutRegionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutRegionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchRegionFromKey = (
    key: number,
    region: Region,
    params?: PatchRegionFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Region/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: region,
        params
    },
      );
    }
  


export const getPatchRegionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRegionFromKey>>, TError,{key: number;data: Region;params?: PatchRegionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchRegionFromKey>>, TError,{key: number;data: Region;params?: PatchRegionFromKeyParams}, TContext> => {

const mutationKey = ['patchRegionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchRegionFromKey>>, {key: number;data: Region;params?: PatchRegionFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchRegionFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchRegionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchRegionFromKey>>>
    export type PatchRegionFromKeyMutationBody = Region
    export type PatchRegionFromKeyMutationError = void

    export const usePatchRegionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRegionFromKey>>, TError,{key: number;data: Region;params?: PatchRegionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchRegionFromKey>>,
        TError,
        {key: number;data: Region;params?: PatchRegionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchRegionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteRegionFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Region/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRegionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRegionFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteRegionFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteRegionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRegionFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteRegionFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRegionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRegionFromKey>>>
    
    export type DeleteRegionFromKeyMutationError = void

    export const useDeleteRegionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRegionFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteRegionFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteRegionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    