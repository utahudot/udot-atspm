/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  DetectorComment,
  GetDetectorCommentCountParams,
  GetDetectorCommentFromKeyParams,
  GetDetectorCommentParams,
  PatchDetectorCommentFromKeyParams,
  PostDetectorCommentParams,
  PutDetectorCommentFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getDetectorComment = (
    params?: GetDetectorCommentParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectorComment[]>(
      {url: `/api/v1/DetectorComment`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorCommentQueryKey = (params?: GetDetectorCommentParams,) => {
    return [`/api/v1/DetectorComment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorCommentQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorComment>>, TError = void>(params?: GetDetectorCommentParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorComment>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorCommentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorComment>>> = ({ signal }) => getDetectorComment(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorComment>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorCommentQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorComment>>>
export type GetDetectorCommentQueryError = void



export function useGetDetectorComment<TData = Awaited<ReturnType<typeof getDetectorComment>>, TError = void>(
 params?: GetDetectorCommentParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorComment>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorCommentQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postDetectorComment = (
    detectorComment: DetectorComment,
    params?: PostDetectorCommentParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectorComment`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detectorComment,
        params, signal
    },
      );
    }
  


export const getPostDetectorCommentMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDetectorComment>>, TError,{data: DetectorComment;params?: PostDetectorCommentParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postDetectorComment>>, TError,{data: DetectorComment;params?: PostDetectorCommentParams}, TContext> => {

const mutationKey = ['postDetectorComment'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDetectorComment>>, {data: DetectorComment;params?: PostDetectorCommentParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postDetectorComment(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDetectorCommentMutationResult = NonNullable<Awaited<ReturnType<typeof postDetectorComment>>>
    export type PostDetectorCommentMutationBody = DetectorComment
    export type PostDetectorCommentMutationError = void

    export const usePostDetectorComment = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDetectorComment>>, TError,{data: DetectorComment;params?: PostDetectorCommentParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postDetectorComment>>,
        TError,
        {data: DetectorComment;params?: PostDetectorCommentParams},
        TContext
      > => {

      const mutationOptions = getPostDetectorCommentMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getDetectorCommentCount = (
    params?: GetDetectorCommentCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectorComment[]>(
      {url: `/api/v1/DetectorComment/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorCommentCountQueryKey = (params?: GetDetectorCommentCountParams,) => {
    return [`/api/v1/DetectorComment/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorCommentCountQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorCommentCount>>, TError = void>(params?: GetDetectorCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorCommentCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorCommentCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorCommentCount>>> = ({ signal }) => getDetectorCommentCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorCommentCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorCommentCountQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorCommentCount>>>
export type GetDetectorCommentCountQueryError = void



export function useGetDetectorCommentCount<TData = Awaited<ReturnType<typeof getDetectorCommentCount>>, TError = void>(
 params?: GetDetectorCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorCommentCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorCommentCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDetectorCommentFromKey = (
    key: number,
    params?: GetDetectorCommentFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectorComment>(
      {url: `/api/v1/DetectorComment/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorCommentFromKeyQueryKey = (key: number,
    params?: GetDetectorCommentFromKeyParams,) => {
    return [`/api/v1/DetectorComment/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorCommentFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorCommentFromKey>>, TError = void>(key: number,
    params?: GetDetectorCommentFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorCommentFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorCommentFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorCommentFromKey>>> = ({ signal }) => getDetectorCommentFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorCommentFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorCommentFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorCommentFromKey>>>
export type GetDetectorCommentFromKeyQueryError = void



export function useGetDetectorCommentFromKey<TData = Awaited<ReturnType<typeof getDetectorCommentFromKey>>, TError = void>(
 key: number,
    params?: GetDetectorCommentFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorCommentFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorCommentFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putDetectorCommentFromKey = (
    key: number,
    detectorComment: DetectorComment,
    params?: PutDetectorCommentFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectorComment/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detectorComment,
        params
    },
      );
    }
  


export const getPutDetectorCommentFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDetectorCommentFromKey>>, TError,{key: number;data: DetectorComment;params?: PutDetectorCommentFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putDetectorCommentFromKey>>, TError,{key: number;data: DetectorComment;params?: PutDetectorCommentFromKeyParams}, TContext> => {

const mutationKey = ['putDetectorCommentFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDetectorCommentFromKey>>, {key: number;data: DetectorComment;params?: PutDetectorCommentFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putDetectorCommentFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDetectorCommentFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putDetectorCommentFromKey>>>
    export type PutDetectorCommentFromKeyMutationBody = DetectorComment
    export type PutDetectorCommentFromKeyMutationError = void

    export const usePutDetectorCommentFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDetectorCommentFromKey>>, TError,{key: number;data: DetectorComment;params?: PutDetectorCommentFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putDetectorCommentFromKey>>,
        TError,
        {key: number;data: DetectorComment;params?: PutDetectorCommentFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutDetectorCommentFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchDetectorCommentFromKey = (
    key: number,
    detectorComment: DetectorComment,
    params?: PatchDetectorCommentFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectorComment/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detectorComment,
        params
    },
      );
    }
  


export const getPatchDetectorCommentFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDetectorCommentFromKey>>, TError,{key: number;data: DetectorComment;params?: PatchDetectorCommentFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchDetectorCommentFromKey>>, TError,{key: number;data: DetectorComment;params?: PatchDetectorCommentFromKeyParams}, TContext> => {

const mutationKey = ['patchDetectorCommentFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchDetectorCommentFromKey>>, {key: number;data: DetectorComment;params?: PatchDetectorCommentFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchDetectorCommentFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchDetectorCommentFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchDetectorCommentFromKey>>>
    export type PatchDetectorCommentFromKeyMutationBody = DetectorComment
    export type PatchDetectorCommentFromKeyMutationError = void

    export const usePatchDetectorCommentFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDetectorCommentFromKey>>, TError,{key: number;data: DetectorComment;params?: PatchDetectorCommentFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchDetectorCommentFromKey>>,
        TError,
        {key: number;data: DetectorComment;params?: PatchDetectorCommentFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchDetectorCommentFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteDetectorCommentFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectorComment/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDetectorCommentFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteDetectorCommentFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteDetectorCommentFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDetectorCommentFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>>
    
    export type DeleteDetectorCommentFromKeyMutationError = void

    export const useDeleteDetectorCommentFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteDetectorCommentFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    