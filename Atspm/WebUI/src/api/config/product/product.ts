/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetProductCountParams,
  GetProductFromKeyParams,
  GetProductParams,
  PatchProductFromKeyParams,
  PostProductParams,
  Product,
  PutProductFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getProduct = (
    params?: GetProductParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Product[]>(
      {url: `/Product`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProductQueryKey = (params?: GetProductParams,) => {
    return [`/Product`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductQueryOptions = <TData = Awaited<ReturnType<typeof getProduct>>, TError = void>(params?: GetProductParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({ signal }) => getProduct(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductQueryResult = NonNullable<Awaited<ReturnType<typeof getProduct>>>
export type GetProductQueryError = void



export function useGetProduct<TData = Awaited<ReturnType<typeof getProduct>>, TError = void>(
 params?: GetProductParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProductQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postProduct = (
    product: Product,
    params?: PostProductParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/Product`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: product,
        params, signal
    },
      );
    }
  


export const getPostProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProduct>>, TError,{data: Product;params?: PostProductParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProduct>>, TError,{data: Product;params?: PostProductParams}, TContext> => {

const mutationKey = ['postProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProduct>>, {data: Product;params?: PostProductParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postProduct(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductMutationResult = NonNullable<Awaited<ReturnType<typeof postProduct>>>
    export type PostProductMutationBody = Product
    export type PostProductMutationError = void

    export const usePostProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProduct>>, TError,{data: Product;params?: PostProductParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postProduct>>,
        TError,
        {data: Product;params?: PostProductParams},
        TContext
      > => {

      const mutationOptions = getPostProductMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getProductCount = (
    params?: GetProductCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Product[]>(
      {url: `/Product/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProductCountQueryKey = (params?: GetProductCountParams,) => {
    return [`/Product/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductCountQueryOptions = <TData = Awaited<ReturnType<typeof getProductCount>>, TError = void>(params?: GetProductCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductCount>>> = ({ signal }) => getProductCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductCountQueryResult = NonNullable<Awaited<ReturnType<typeof getProductCount>>>
export type GetProductCountQueryError = void



export function useGetProductCount<TData = Awaited<ReturnType<typeof getProductCount>>, TError = void>(
 params?: GetProductCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProductCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getProductFromKey = (
    key: number,
    params?: GetProductFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Product>(
      {url: `/Product/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProductFromKeyQueryKey = (key: number,
    params?: GetProductFromKeyParams,) => {
    return [`/Product/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getProductFromKey>>, TError = void>(key: number,
    params?: GetProductFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductFromKey>>> = ({ signal }) => getProductFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getProductFromKey>>>
export type GetProductFromKeyQueryError = void



export function useGetProductFromKey<TData = Awaited<ReturnType<typeof getProductFromKey>>, TError = void>(
 key: number,
    params?: GetProductFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProductFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putProductFromKey = (
    key: number,
    product: Product,
    params?: PutProductFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Product/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: product,
        params
    },
      );
    }
  


export const getPutProductFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductFromKey>>, TError,{key: number;data: Product;params?: PutProductFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProductFromKey>>, TError,{key: number;data: Product;params?: PutProductFromKeyParams}, TContext> => {

const mutationKey = ['putProductFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProductFromKey>>, {key: number;data: Product;params?: PutProductFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putProductFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProductFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putProductFromKey>>>
    export type PutProductFromKeyMutationBody = Product
    export type PutProductFromKeyMutationError = void

    export const usePutProductFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductFromKey>>, TError,{key: number;data: Product;params?: PutProductFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putProductFromKey>>,
        TError,
        {key: number;data: Product;params?: PutProductFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutProductFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchProductFromKey = (
    key: number,
    product: Product,
    params?: PatchProductFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Product/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: product,
        params
    },
      );
    }
  


export const getPatchProductFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductFromKey>>, TError,{key: number;data: Product;params?: PatchProductFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchProductFromKey>>, TError,{key: number;data: Product;params?: PatchProductFromKeyParams}, TContext> => {

const mutationKey = ['patchProductFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchProductFromKey>>, {key: number;data: Product;params?: PatchProductFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchProductFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchProductFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchProductFromKey>>>
    export type PatchProductFromKeyMutationBody = Product
    export type PatchProductFromKeyMutationError = void

    export const usePatchProductFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductFromKey>>, TError,{key: number;data: Product;params?: PatchProductFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchProductFromKey>>,
        TError,
        {key: number;data: Product;params?: PatchProductFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchProductFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteProductFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Product/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProductFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteProductFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteProductFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductFromKey>>>
    
    export type DeleteProductFromKeyMutationError = void

    export const useDeleteProductFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    