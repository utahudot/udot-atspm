/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  DetectionType,
  Detector,
  GetDetectionTypeCountParams,
  GetDetectionTypeDetectorsCountFromKeyParams,
  GetDetectionTypeDetectorsFromKeyParams,
  GetDetectionTypeFromKeyParams,
  GetDetectionTypeMeasureTypesCountFromKeyParams,
  GetDetectionTypeMeasureTypesFromKeyParams,
  GetDetectionTypeParams,
  MeasureType,
  PatchDetectionTypeFromKeyParams,
  PostDetectionTypeParams,
  PutDetectionTypeFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getDetectionTypeDetectorsFromKey = (
    key: string,
    params?: GetDetectionTypeDetectorsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector[]>(
      {url: `/api/v1/DetectionType/${key}/detectors`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeDetectorsFromKeyQueryKey = (key: string,
    params?: GetDetectionTypeDetectorsFromKeyParams,) => {
    return [`/api/v1/DetectionType/${key}/detectors`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeDetectorsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>, TError = void>(key: string,
    params?: GetDetectionTypeDetectorsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeDetectorsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>> = ({ signal }) => getDetectionTypeDetectorsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeDetectorsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>>
export type GetDetectionTypeDetectorsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useGetDetectionTypeDetectorsFromKey<TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>, TError = void>(
 key: string,
    params?: GetDetectionTypeDetectorsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeDetectorsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getDetectionTypeDetectorsCountFromKey = (
    key: string,
    params?: GetDetectionTypeDetectorsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector[]>(
      {url: `/api/v1/DetectionType/${key}/detectors/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeDetectorsCountFromKeyQueryKey = (key: string,
    params?: GetDetectionTypeDetectorsCountFromKeyParams,) => {
    return [`/api/v1/DetectionType/${key}/detectors/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeDetectorsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>, TError = void>(key: string,
    params?: GetDetectionTypeDetectorsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeDetectorsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>> = ({ signal }) => getDetectionTypeDetectorsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeDetectorsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>>
export type GetDetectionTypeDetectorsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useGetDetectionTypeDetectorsCountFromKey<TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>, TError = void>(
 key: string,
    params?: GetDetectionTypeDetectorsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeDetectorsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getDetectionTypeMeasureTypesFromKey = (
    key: string,
    params?: GetDetectionTypeMeasureTypesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType[]>(
      {url: `/api/v1/DetectionType/${key}/measureTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeMeasureTypesFromKeyQueryKey = (key: string,
    params?: GetDetectionTypeMeasureTypesFromKeyParams,) => {
    return [`/api/v1/DetectionType/${key}/measureTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeMeasureTypesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>, TError = void>(key: string,
    params?: GetDetectionTypeMeasureTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeMeasureTypesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>> = ({ signal }) => getDetectionTypeMeasureTypesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeMeasureTypesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>>
export type GetDetectionTypeMeasureTypesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useGetDetectionTypeMeasureTypesFromKey<TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>, TError = void>(
 key: string,
    params?: GetDetectionTypeMeasureTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeMeasureTypesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getDetectionTypeMeasureTypesCountFromKey = (
    key: string,
    params?: GetDetectionTypeMeasureTypesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MeasureType[]>(
      {url: `/api/v1/DetectionType/${key}/measureTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeMeasureTypesCountFromKeyQueryKey = (key: string,
    params?: GetDetectionTypeMeasureTypesCountFromKeyParams,) => {
    return [`/api/v1/DetectionType/${key}/measureTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeMeasureTypesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>, TError = void>(key: string,
    params?: GetDetectionTypeMeasureTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeMeasureTypesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>> = ({ signal }) => getDetectionTypeMeasureTypesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeMeasureTypesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>>
export type GetDetectionTypeMeasureTypesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useGetDetectionTypeMeasureTypesCountFromKey<TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>, TError = void>(
 key: string,
    params?: GetDetectionTypeMeasureTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeMeasureTypesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDetectionType = (
    params?: GetDetectionTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType[]>(
      {url: `/api/v1/DetectionType`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeQueryKey = (params?: GetDetectionTypeParams,) => {
    return [`/api/v1/DetectionType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionType>>, TError = void>(params?: GetDetectionTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionType>>> = ({ signal }) => getDetectionType(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionType>>>
export type GetDetectionTypeQueryError = void



export function useGetDetectionType<TData = Awaited<ReturnType<typeof getDetectionType>>, TError = void>(
 params?: GetDetectionTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionType>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postDetectionType = (
    detectionType: DetectionType,
    params?: PostDetectionTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectionType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detectionType,
        params, signal
    },
      );
    }
  


export const getPostDetectionTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDetectionType>>, TError,{data: DetectionType;params?: PostDetectionTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postDetectionType>>, TError,{data: DetectionType;params?: PostDetectionTypeParams}, TContext> => {

const mutationKey = ['postDetectionType'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDetectionType>>, {data: DetectionType;params?: PostDetectionTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postDetectionType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDetectionTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postDetectionType>>>
    export type PostDetectionTypeMutationBody = DetectionType
    export type PostDetectionTypeMutationError = void

    export const usePostDetectionType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDetectionType>>, TError,{data: DetectionType;params?: PostDetectionTypeParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postDetectionType>>,
        TError,
        {data: DetectionType;params?: PostDetectionTypeParams},
        TContext
      > => {

      const mutationOptions = getPostDetectionTypeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getDetectionTypeCount = (
    params?: GetDetectionTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType[]>(
      {url: `/api/v1/DetectionType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeCountQueryKey = (params?: GetDetectionTypeCountParams,) => {
    return [`/api/v1/DetectionType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionTypeCount>>, TError = void>(params?: GetDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionTypeCount>>> = ({ signal }) => getDetectionTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionTypeCount>>>
export type GetDetectionTypeCountQueryError = void



export function useGetDetectionTypeCount<TData = Awaited<ReturnType<typeof getDetectionTypeCount>>, TError = void>(
 params?: GetDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDetectionTypeFromKey = (
    key: string,
    params?: GetDetectionTypeFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType>(
      {url: `/api/v1/DetectionType/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectionTypeFromKeyQueryKey = (key: string,
    params?: GetDetectionTypeFromKeyParams,) => {
    return [`/api/v1/DetectionType/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectionTypeFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectionTypeFromKey>>, TError = void>(key: string,
    params?: GetDetectionTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectionTypeFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectionTypeFromKey>>> = ({ signal }) => getDetectionTypeFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectionTypeFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectionTypeFromKey>>>
export type GetDetectionTypeFromKeyQueryError = void



export function useGetDetectionTypeFromKey<TData = Awaited<ReturnType<typeof getDetectionTypeFromKey>>, TError = void>(
 key: string,
    params?: GetDetectionTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectionTypeFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectionTypeFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putDetectionTypeFromKey = (
    key: string,
    detectionType: DetectionType,
    params?: PutDetectionTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectionType/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detectionType,
        params
    },
      );
    }
  


export const getPutDetectionTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDetectionTypeFromKey>>, TError,{key: string;data: DetectionType;params?: PutDetectionTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putDetectionTypeFromKey>>, TError,{key: string;data: DetectionType;params?: PutDetectionTypeFromKeyParams}, TContext> => {

const mutationKey = ['putDetectionTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDetectionTypeFromKey>>, {key: string;data: DetectionType;params?: PutDetectionTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putDetectionTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDetectionTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putDetectionTypeFromKey>>>
    export type PutDetectionTypeFromKeyMutationBody = DetectionType
    export type PutDetectionTypeFromKeyMutationError = void

    export const usePutDetectionTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDetectionTypeFromKey>>, TError,{key: string;data: DetectionType;params?: PutDetectionTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putDetectionTypeFromKey>>,
        TError,
        {key: string;data: DetectionType;params?: PutDetectionTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutDetectionTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchDetectionTypeFromKey = (
    key: string,
    detectionType: DetectionType,
    params?: PatchDetectionTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectionType/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detectionType,
        params
    },
      );
    }
  


export const getPatchDetectionTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDetectionTypeFromKey>>, TError,{key: string;data: DetectionType;params?: PatchDetectionTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchDetectionTypeFromKey>>, TError,{key: string;data: DetectionType;params?: PatchDetectionTypeFromKeyParams}, TContext> => {

const mutationKey = ['patchDetectionTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchDetectionTypeFromKey>>, {key: string;data: DetectionType;params?: PatchDetectionTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchDetectionTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchDetectionTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchDetectionTypeFromKey>>>
    export type PatchDetectionTypeFromKeyMutationBody = DetectionType
    export type PatchDetectionTypeFromKeyMutationError = void

    export const usePatchDetectionTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDetectionTypeFromKey>>, TError,{key: string;data: DetectionType;params?: PatchDetectionTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchDetectionTypeFromKey>>,
        TError,
        {key: string;data: DetectionType;params?: PatchDetectionTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchDetectionTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteDetectionTypeFromKey = (
    key: string,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectionType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDetectionTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>, TError,{key: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>, TError,{key: string}, TContext> => {

const mutationKey = ['deleteDetectionTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>, {key: string}> = (props) => {
          const {key} = props ?? {};

          return  deleteDetectionTypeFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDetectionTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>>
    
    export type DeleteDetectionTypeFromKeyMutationError = void

    export const useDeleteDetectionTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>, TError,{key: string}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>,
        TError,
        {key: string},
        TContext
      > => {

      const mutationOptions = getDeleteDetectionTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    