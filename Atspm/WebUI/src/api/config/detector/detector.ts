/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  DetectionType,
  Detector,
  DetectorComment,
  GetDetectorCountParams,
  GetDetectorDetectionTypesCountFromKeyParams,
  GetDetectorDetectionTypesFromKeyParams,
  GetDetectorDetectorCommentsCountFromKeyParams,
  GetDetectorDetectorCommentsFromKeyParams,
  GetDetectorFromKeyParams,
  GetDetectorParams,
  PatchDetectorFromKeyParams,
  PostDetectorParams,
  PutDetectorFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const getDetectorDetectorCommentsFromKey = (
    key: number,
    params?: GetDetectorDetectorCommentsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectorComment[]>(
      {url: `/api/v1/Detector/${key}/detectorComments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorDetectorCommentsFromKeyQueryKey = (key: number,
    params?: GetDetectorDetectorCommentsFromKeyParams,) => {
    return [`/api/v1/Detector/${key}/detectorComments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorDetectorCommentsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>, TError = void>(key: number,
    params?: GetDetectorDetectorCommentsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorDetectorCommentsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>> = ({ signal }) => getDetectorDetectorCommentsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorDetectorCommentsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>>
export type GetDetectorDetectorCommentsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */

export function useGetDetectorDetectorCommentsFromKey<TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>, TError = void>(
 key: number,
    params?: GetDetectorDetectorCommentsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorDetectorCommentsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const getDetectorDetectorCommentsCountFromKey = (
    key: number,
    params?: GetDetectorDetectorCommentsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectorComment[]>(
      {url: `/api/v1/Detector/${key}/detectorComments/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorDetectorCommentsCountFromKeyQueryKey = (key: number,
    params?: GetDetectorDetectorCommentsCountFromKeyParams,) => {
    return [`/api/v1/Detector/${key}/detectorComments/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorDetectorCommentsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>, TError = void>(key: number,
    params?: GetDetectorDetectorCommentsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorDetectorCommentsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>> = ({ signal }) => getDetectorDetectorCommentsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorDetectorCommentsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>>
export type GetDetectorDetectorCommentsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */

export function useGetDetectorDetectorCommentsCountFromKey<TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>, TError = void>(
 key: number,
    params?: GetDetectorDetectorCommentsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorDetectorCommentsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getDetectorDetectionTypesFromKey = (
    key: number,
    params?: GetDetectorDetectionTypesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType[]>(
      {url: `/api/v1/Detector/${key}/detectionTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorDetectionTypesFromKeyQueryKey = (key: number,
    params?: GetDetectorDetectionTypesFromKeyParams,) => {
    return [`/api/v1/Detector/${key}/detectionTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorDetectionTypesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>, TError = void>(key: number,
    params?: GetDetectorDetectionTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorDetectionTypesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>> = ({ signal }) => getDetectorDetectionTypesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorDetectionTypesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>>
export type GetDetectorDetectionTypesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useGetDetectorDetectionTypesFromKey<TData = Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>, TError = void>(
 key: number,
    params?: GetDetectorDetectionTypesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorDetectionTypesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getDetectorDetectionTypesCountFromKey = (
    key: number,
    params?: GetDetectorDetectionTypesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionType[]>(
      {url: `/api/v1/Detector/${key}/detectionTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorDetectionTypesCountFromKeyQueryKey = (key: number,
    params?: GetDetectorDetectionTypesCountFromKeyParams,) => {
    return [`/api/v1/Detector/${key}/detectionTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorDetectionTypesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>, TError = void>(key: number,
    params?: GetDetectorDetectionTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorDetectionTypesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>> = ({ signal }) => getDetectorDetectionTypesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorDetectionTypesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>>
export type GetDetectorDetectionTypesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useGetDetectorDetectionTypesCountFromKey<TData = Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>, TError = void>(
 key: number,
    params?: GetDetectorDetectionTypesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorDetectionTypesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDetector = (
    params?: GetDetectorParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector[]>(
      {url: `/api/v1/Detector`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorQueryKey = (params?: GetDetectorParams,) => {
    return [`/api/v1/Detector`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorQueryOptions = <TData = Awaited<ReturnType<typeof getDetector>>, TError = void>(params?: GetDetectorParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetector>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetector>>> = ({ signal }) => getDetector(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetector>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorQueryResult = NonNullable<Awaited<ReturnType<typeof getDetector>>>
export type GetDetectorQueryError = void



export function useGetDetector<TData = Awaited<ReturnType<typeof getDetector>>, TError = void>(
 params?: GetDetectorParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetector>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postDetector = (
    detector: Detector,
    params?: PostDetectorParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Detector`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detector,
        params, signal
    },
      );
    }
  


export const getPostDetectorMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDetector>>, TError,{data: Detector;params?: PostDetectorParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postDetector>>, TError,{data: Detector;params?: PostDetectorParams}, TContext> => {

const mutationKey = ['postDetector'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDetector>>, {data: Detector;params?: PostDetectorParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postDetector(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDetectorMutationResult = NonNullable<Awaited<ReturnType<typeof postDetector>>>
    export type PostDetectorMutationBody = Detector
    export type PostDetectorMutationError = void

    export const usePostDetector = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDetector>>, TError,{data: Detector;params?: PostDetectorParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postDetector>>,
        TError,
        {data: Detector;params?: PostDetectorParams},
        TContext
      > => {

      const mutationOptions = getPostDetectorMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getDetectorCount = (
    params?: GetDetectorCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector[]>(
      {url: `/api/v1/Detector/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorCountQueryKey = (params?: GetDetectorCountParams,) => {
    return [`/api/v1/Detector/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorCountQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorCount>>, TError = void>(params?: GetDetectorCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorCount>>> = ({ signal }) => getDetectorCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorCountQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorCount>>>
export type GetDetectorCountQueryError = void



export function useGetDetectorCount<TData = Awaited<ReturnType<typeof getDetectorCount>>, TError = void>(
 params?: GetDetectorCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDetectorFromKey = (
    key: number,
    params?: GetDetectorFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector>(
      {url: `/api/v1/Detector/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDetectorFromKeyQueryKey = (key: number,
    params?: GetDetectorFromKeyParams,) => {
    return [`/api/v1/Detector/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDetectorFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDetectorFromKey>>, TError = void>(key: number,
    params?: GetDetectorFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetectorFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetectorFromKey>>> = ({ signal }) => getDetectorFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetectorFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetectorFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDetectorFromKey>>>
export type GetDetectorFromKeyQueryError = void



export function useGetDetectorFromKey<TData = Awaited<ReturnType<typeof getDetectorFromKey>>, TError = void>(
 key: number,
    params?: GetDetectorFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetectorFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetectorFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putDetectorFromKey = (
    key: number,
    detector: Detector,
    params?: PutDetectorFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Detector/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detector,
        params
    },
      );
    }
  


export const getPutDetectorFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDetectorFromKey>>, TError,{key: number;data: Detector;params?: PutDetectorFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putDetectorFromKey>>, TError,{key: number;data: Detector;params?: PutDetectorFromKeyParams}, TContext> => {

const mutationKey = ['putDetectorFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDetectorFromKey>>, {key: number;data: Detector;params?: PutDetectorFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putDetectorFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDetectorFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putDetectorFromKey>>>
    export type PutDetectorFromKeyMutationBody = Detector
    export type PutDetectorFromKeyMutationError = void

    export const usePutDetectorFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDetectorFromKey>>, TError,{key: number;data: Detector;params?: PutDetectorFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putDetectorFromKey>>,
        TError,
        {key: number;data: Detector;params?: PutDetectorFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutDetectorFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchDetectorFromKey = (
    key: number,
    detector: Detector,
    params?: PatchDetectorFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Detector/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: detector,
        params
    },
      );
    }
  


export const getPatchDetectorFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDetectorFromKey>>, TError,{key: number;data: Detector;params?: PatchDetectorFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchDetectorFromKey>>, TError,{key: number;data: Detector;params?: PatchDetectorFromKeyParams}, TContext> => {

const mutationKey = ['patchDetectorFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchDetectorFromKey>>, {key: number;data: Detector;params?: PatchDetectorFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchDetectorFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchDetectorFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchDetectorFromKey>>>
    export type PatchDetectorFromKeyMutationBody = Detector
    export type PatchDetectorFromKeyMutationError = void

    export const usePatchDetectorFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDetectorFromKey>>, TError,{key: number;data: Detector;params?: PatchDetectorFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchDetectorFromKey>>,
        TError,
        {key: number;data: Detector;params?: PatchDetectorFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchDetectorFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteDetectorFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Detector/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDetectorFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDetectorFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDetectorFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteDetectorFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDetectorFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteDetectorFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDetectorFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDetectorFromKey>>>
    
    export type DeleteDetectorFromKeyMutationError = void

    export const useDeleteDetectorFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDetectorFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteDetectorFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteDetectorFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    