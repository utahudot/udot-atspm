/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetMenuItemsCountParams,
  GetMenuItemsFromKeyParams,
  GetMenuItemsParams,
  MenuItem,
  PatchMenuItemsFromKeyParams,
  PostMenuItemsParams,
  PutMenuItemsFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getMenuItems = (
    params?: GetMenuItemsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MenuItem[]>(
      {url: `/MenuItems`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMenuItemsQueryKey = (params?: GetMenuItemsParams,) => {
    return [`/MenuItems`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMenuItemsQueryOptions = <TData = Awaited<ReturnType<typeof getMenuItems>>, TError = void>(params?: GetMenuItemsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMenuItems>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMenuItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenuItems>>> = ({ signal }) => getMenuItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMenuItems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMenuItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getMenuItems>>>
export type GetMenuItemsQueryError = void



export function useGetMenuItems<TData = Awaited<ReturnType<typeof getMenuItems>>, TError = void>(
 params?: GetMenuItemsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMenuItems>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMenuItemsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postMenuItems = (
    menuItem: MenuItem,
    params?: PostMenuItemsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/MenuItems`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: menuItem,
        params, signal
    },
      );
    }
  


export const getPostMenuItemsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMenuItems>>, TError,{data: MenuItem;params?: PostMenuItemsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMenuItems>>, TError,{data: MenuItem;params?: PostMenuItemsParams}, TContext> => {

const mutationKey = ['postMenuItems'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMenuItems>>, {data: MenuItem;params?: PostMenuItemsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postMenuItems(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMenuItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postMenuItems>>>
    export type PostMenuItemsMutationBody = MenuItem
    export type PostMenuItemsMutationError = void

    export const usePostMenuItems = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMenuItems>>, TError,{data: MenuItem;params?: PostMenuItemsParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMenuItems>>,
        TError,
        {data: MenuItem;params?: PostMenuItemsParams},
        TContext
      > => {

      const mutationOptions = getPostMenuItemsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getMenuItemsCount = (
    params?: GetMenuItemsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MenuItem[]>(
      {url: `/MenuItems/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMenuItemsCountQueryKey = (params?: GetMenuItemsCountParams,) => {
    return [`/MenuItems/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMenuItemsCountQueryOptions = <TData = Awaited<ReturnType<typeof getMenuItemsCount>>, TError = void>(params?: GetMenuItemsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMenuItemsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMenuItemsCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenuItemsCount>>> = ({ signal }) => getMenuItemsCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMenuItemsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMenuItemsCountQueryResult = NonNullable<Awaited<ReturnType<typeof getMenuItemsCount>>>
export type GetMenuItemsCountQueryError = void



export function useGetMenuItemsCount<TData = Awaited<ReturnType<typeof getMenuItemsCount>>, TError = void>(
 params?: GetMenuItemsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMenuItemsCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMenuItemsCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMenuItemsFromKey = (
    key: number,
    params?: GetMenuItemsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<MenuItem>(
      {url: `/MenuItems/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMenuItemsFromKeyQueryKey = (key: number,
    params?: GetMenuItemsFromKeyParams,) => {
    return [`/MenuItems/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMenuItemsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMenuItemsFromKey>>, TError = void>(key: number,
    params?: GetMenuItemsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMenuItemsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMenuItemsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenuItemsFromKey>>> = ({ signal }) => getMenuItemsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMenuItemsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMenuItemsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMenuItemsFromKey>>>
export type GetMenuItemsFromKeyQueryError = void



export function useGetMenuItemsFromKey<TData = Awaited<ReturnType<typeof getMenuItemsFromKey>>, TError = void>(
 key: number,
    params?: GetMenuItemsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMenuItemsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMenuItemsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putMenuItemsFromKey = (
    key: number,
    menuItem: MenuItem,
    params?: PutMenuItemsFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/MenuItems/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: menuItem,
        params
    },
      );
    }
  


export const getPutMenuItemsFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMenuItemsFromKey>>, TError,{key: number;data: MenuItem;params?: PutMenuItemsFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMenuItemsFromKey>>, TError,{key: number;data: MenuItem;params?: PutMenuItemsFromKeyParams}, TContext> => {

const mutationKey = ['putMenuItemsFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMenuItemsFromKey>>, {key: number;data: MenuItem;params?: PutMenuItemsFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putMenuItemsFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMenuItemsFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMenuItemsFromKey>>>
    export type PutMenuItemsFromKeyMutationBody = MenuItem
    export type PutMenuItemsFromKeyMutationError = void

    export const usePutMenuItemsFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMenuItemsFromKey>>, TError,{key: number;data: MenuItem;params?: PutMenuItemsFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMenuItemsFromKey>>,
        TError,
        {key: number;data: MenuItem;params?: PutMenuItemsFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutMenuItemsFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchMenuItemsFromKey = (
    key: number,
    menuItem: MenuItem,
    params?: PatchMenuItemsFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/MenuItems/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: menuItem,
        params
    },
      );
    }
  


export const getPatchMenuItemsFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMenuItemsFromKey>>, TError,{key: number;data: MenuItem;params?: PatchMenuItemsFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchMenuItemsFromKey>>, TError,{key: number;data: MenuItem;params?: PatchMenuItemsFromKeyParams}, TContext> => {

const mutationKey = ['patchMenuItemsFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMenuItemsFromKey>>, {key: number;data: MenuItem;params?: PatchMenuItemsFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchMenuItemsFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMenuItemsFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchMenuItemsFromKey>>>
    export type PatchMenuItemsFromKeyMutationBody = MenuItem
    export type PatchMenuItemsFromKeyMutationError = void

    export const usePatchMenuItemsFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMenuItemsFromKey>>, TError,{key: number;data: MenuItem;params?: PatchMenuItemsFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchMenuItemsFromKey>>,
        TError,
        {key: number;data: MenuItem;params?: PatchMenuItemsFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchMenuItemsFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteMenuItemsFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/MenuItems/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMenuItemsFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMenuItemsFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMenuItemsFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteMenuItemsFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMenuItemsFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteMenuItemsFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMenuItemsFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMenuItemsFromKey>>>
    
    export type DeleteMenuItemsFromKeyMutationError = void

    export const useDeleteMenuItemsFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMenuItemsFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMenuItemsFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteMenuItemsFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    