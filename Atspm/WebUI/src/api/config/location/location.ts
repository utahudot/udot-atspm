/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Approach,
  Area,
  DeleteLocationAllVersionsFromKeyParams,
  DeleteLocationSetLocationTodFromKeyParams,
  DetectionTypeGroup,
  Device,
  GetLocationAllVersionsOfLocationFromIdentifierParams,
  GetLocationApproachesCountFromKeyParams,
  GetLocationApproachesFromKeyParams,
  GetLocationAreasCountFromKeyParams,
  GetLocationAreasFromKeyParams,
  GetLocationCopyLocationToNewVersionFromKeyParams,
  GetLocationCountParams,
  GetLocationDetectionTypeCountParams,
  GetLocationDevicesCountFromKeyParams,
  GetLocationDevicesFromKeyParams,
  GetLocationFromKeyParams,
  GetLocationLatestVersionOfAllLocationsParams,
  GetLocationLatestVersionOfLocationFromIdentifierParams,
  GetLocationLocationsForSearchParams,
  GetLocationParams,
  Location,
  PatchLocationFromKeyParams,
  PostLocationParams,
  PutLocationFromKeyParams,
  SearchLocation
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getLocationApproachesFromKey = (
    key: number,
    params?: GetLocationApproachesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach[]>(
      {url: `/Location/${key}/approaches`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationApproachesFromKeyQueryKey = (key: number,
    params?: GetLocationApproachesFromKeyParams,) => {
    return [`/Location/${key}/approaches`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationApproachesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationApproachesFromKey>>, TError = void>(key: number,
    params?: GetLocationApproachesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationApproachesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationApproachesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationApproachesFromKey>>> = ({ signal }) => getLocationApproachesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationApproachesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationApproachesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationApproachesFromKey>>>
export type GetLocationApproachesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useGetLocationApproachesFromKey<TData = Awaited<ReturnType<typeof getLocationApproachesFromKey>>, TError = void>(
 key: number,
    params?: GetLocationApproachesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationApproachesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationApproachesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getLocationApproachesCountFromKey = (
    key: number,
    params?: GetLocationApproachesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach[]>(
      {url: `/Location/${key}/approaches/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationApproachesCountFromKeyQueryKey = (key: number,
    params?: GetLocationApproachesCountFromKeyParams,) => {
    return [`/Location/${key}/approaches/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationApproachesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>, TError = void>(key: number,
    params?: GetLocationApproachesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationApproachesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>> = ({ signal }) => getLocationApproachesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationApproachesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>>
export type GetLocationApproachesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useGetLocationApproachesCountFromKey<TData = Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>, TError = void>(
 key: number,
    params?: GetLocationApproachesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationApproachesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const getLocationAreasFromKey = (
    key: number,
    params?: GetLocationAreasFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Area[]>(
      {url: `/Location/${key}/areas`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationAreasFromKeyQueryKey = (key: number,
    params?: GetLocationAreasFromKeyParams,) => {
    return [`/Location/${key}/areas`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationAreasFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationAreasFromKey>>, TError = void>(key: number,
    params?: GetLocationAreasFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationAreasFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationAreasFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationAreasFromKey>>> = ({ signal }) => getLocationAreasFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationAreasFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationAreasFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationAreasFromKey>>>
export type GetLocationAreasFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */

export function useGetLocationAreasFromKey<TData = Awaited<ReturnType<typeof getLocationAreasFromKey>>, TError = void>(
 key: number,
    params?: GetLocationAreasFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationAreasFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationAreasFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const getLocationAreasCountFromKey = (
    key: number,
    params?: GetLocationAreasCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Area[]>(
      {url: `/Location/${key}/areas/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationAreasCountFromKeyQueryKey = (key: number,
    params?: GetLocationAreasCountFromKeyParams,) => {
    return [`/Location/${key}/areas/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationAreasCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationAreasCountFromKey>>, TError = void>(key: number,
    params?: GetLocationAreasCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationAreasCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationAreasCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationAreasCountFromKey>>> = ({ signal }) => getLocationAreasCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationAreasCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationAreasCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationAreasCountFromKey>>>
export type GetLocationAreasCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */

export function useGetLocationAreasCountFromKey<TData = Awaited<ReturnType<typeof getLocationAreasCountFromKey>>, TError = void>(
 key: number,
    params?: GetLocationAreasCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationAreasCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationAreasCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getLocationDevicesFromKey = (
    key: number,
    params?: GetLocationDevicesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Device[]>(
      {url: `/Location/${key}/devices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationDevicesFromKeyQueryKey = (key: number,
    params?: GetLocationDevicesFromKeyParams,) => {
    return [`/Location/${key}/devices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationDevicesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationDevicesFromKey>>, TError = void>(key: number,
    params?: GetLocationDevicesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationDevicesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationDevicesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationDevicesFromKey>>> = ({ signal }) => getLocationDevicesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationDevicesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationDevicesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationDevicesFromKey>>>
export type GetLocationDevicesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useGetLocationDevicesFromKey<TData = Awaited<ReturnType<typeof getLocationDevicesFromKey>>, TError = void>(
 key: number,
    params?: GetLocationDevicesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationDevicesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationDevicesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getLocationDevicesCountFromKey = (
    key: number,
    params?: GetLocationDevicesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Device[]>(
      {url: `/Location/${key}/devices/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationDevicesCountFromKeyQueryKey = (key: number,
    params?: GetLocationDevicesCountFromKeyParams,) => {
    return [`/Location/${key}/devices/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationDevicesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>, TError = void>(key: number,
    params?: GetLocationDevicesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationDevicesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>> = ({ signal }) => getLocationDevicesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationDevicesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>>
export type GetLocationDevicesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useGetLocationDevicesCountFromKey<TData = Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>, TError = void>(
 key: number,
    params?: GetLocationDevicesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationDevicesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const getLocationCopyLocationToNewVersionFromKey = (
    key: number,
    params?: GetLocationCopyLocationToNewVersionFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location>(
      {url: `/Location/${key}/CopyLocationToNewVersion`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getGetLocationCopyLocationToNewVersionFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>, TError,{key: number;params?: GetLocationCopyLocationToNewVersionFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>, TError,{key: number;params?: GetLocationCopyLocationToNewVersionFromKeyParams}, TContext> => {

const mutationKey = ['getLocationCopyLocationToNewVersionFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>, {key: number;params?: GetLocationCopyLocationToNewVersionFromKeyParams}> = (props) => {
          const {key,params} = props ?? {};

          return  getLocationCopyLocationToNewVersionFromKey(key,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetLocationCopyLocationToNewVersionFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>>
    
    export type GetLocationCopyLocationToNewVersionFromKeyMutationError = void

    /**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const useGetLocationCopyLocationToNewVersionFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>, TError,{key: number;params?: GetLocationCopyLocationToNewVersionFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>,
        TError,
        {key: number;params?: GetLocationCopyLocationToNewVersionFromKeyParams},
        TContext
      > => {

      const mutationOptions = getGetLocationCopyLocationToNewVersionFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const deleteLocationSetLocationTodFromKey = (
    key: number,
    params?: DeleteLocationSetLocationTodFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/Location/${key}/SetLocationToDeleted`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getDeleteLocationSetLocationTodFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>, TError,{key: number;params?: DeleteLocationSetLocationTodFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>, TError,{key: number;params?: DeleteLocationSetLocationTodFromKeyParams}, TContext> => {

const mutationKey = ['deleteLocationSetLocationTodFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>, {key: number;params?: DeleteLocationSetLocationTodFromKeyParams}> = (props) => {
          const {key,params} = props ?? {};

          return  deleteLocationSetLocationTodFromKey(key,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationSetLocationTodFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>>
    
    export type DeleteLocationSetLocationTodFromKeyMutationError = void

    /**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const useDeleteLocationSetLocationTodFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>, TError,{key: number;params?: DeleteLocationSetLocationTodFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>,
        TError,
        {key: number;params?: DeleteLocationSetLocationTodFromKeyParams},
        TContext
      > => {

      const mutationOptions = getDeleteLocationSetLocationTodFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const deleteLocationAllVersionsFromKey = (
    key: string,
    params?: DeleteLocationAllVersionsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/Location/${key}/DeleteAllVersions`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getDeleteLocationAllVersionsFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationAllVersionsFromKey>>, TError,{key: string;params?: DeleteLocationAllVersionsFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationAllVersionsFromKey>>, TError,{key: string;params?: DeleteLocationAllVersionsFromKeyParams}, TContext> => {

const mutationKey = ['deleteLocationAllVersionsFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationAllVersionsFromKey>>, {key: string;params?: DeleteLocationAllVersionsFromKeyParams}> = (props) => {
          const {key,params} = props ?? {};

          return  deleteLocationAllVersionsFromKey(key,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationAllVersionsFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationAllVersionsFromKey>>>
    
    export type DeleteLocationAllVersionsFromKeyMutationError = void

    /**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const useDeleteLocationAllVersionsFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationAllVersionsFromKey>>, TError,{key: string;params?: DeleteLocationAllVersionsFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationAllVersionsFromKey>>,
        TError,
        {key: string;params?: DeleteLocationAllVersionsFromKeyParams},
        TContext
      > => {

      const mutationOptions = getDeleteLocationAllVersionsFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get latest version of Utah.Udot.Atspm.Data.Models.Location and related entities that match identifier
 */
export const getLocationLatestVersionOfLocationFromIdentifier = (
    identifier: string,
    params?: GetLocationLatestVersionOfLocationFromIdentifierParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location>(
      {url: `/Location/GetLatestVersionOfLocation(identifier=${identifier})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationLatestVersionOfLocationFromIdentifierQueryKey = (identifier: string,
    params?: GetLocationLatestVersionOfLocationFromIdentifierParams,) => {
    return [`/Location/GetLatestVersionOfLocation(identifier=${identifier})`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationLatestVersionOfLocationFromIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>, TError = void>(identifier: string,
    params?: GetLocationLatestVersionOfLocationFromIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationLatestVersionOfLocationFromIdentifierQueryKey(identifier,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>> = ({ signal }) => getLocationLatestVersionOfLocationFromIdentifier(identifier,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationLatestVersionOfLocationFromIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>>
export type GetLocationLatestVersionOfLocationFromIdentifierQueryError = void


/**
 * @summary Get latest version of Utah.Udot.Atspm.Data.Models.Location and related entities that match identifier
 */

export function useGetLocationLatestVersionOfLocationFromIdentifier<TData = Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>, TError = void>(
 identifier: string,
    params?: GetLocationLatestVersionOfLocationFromIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationLatestVersionOfLocationFromIdentifierQueryOptions(identifier,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get all active Utah.Udot.Atspm.Data.Models.Location that match identifier
 */
export const getLocationAllVersionsOfLocationFromIdentifier = (
    identifier: string,
    params?: GetLocationAllVersionsOfLocationFromIdentifierParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/Location/GetAllVersionsOfLocation(identifier=${identifier})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationAllVersionsOfLocationFromIdentifierQueryKey = (identifier: string,
    params?: GetLocationAllVersionsOfLocationFromIdentifierParams,) => {
    return [`/Location/GetAllVersionsOfLocation(identifier=${identifier})`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationAllVersionsOfLocationFromIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>, TError = void>(identifier: string,
    params?: GetLocationAllVersionsOfLocationFromIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationAllVersionsOfLocationFromIdentifierQueryKey(identifier,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>> = ({ signal }) => getLocationAllVersionsOfLocationFromIdentifier(identifier,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationAllVersionsOfLocationFromIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>>
export type GetLocationAllVersionsOfLocationFromIdentifierQueryError = void


/**
 * @summary Get all active Utah.Udot.Atspm.Data.Models.Location that match identifier
 */

export function useGetLocationAllVersionsOfLocationFromIdentifier<TData = Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>, TError = void>(
 identifier: string,
    params?: GetLocationAllVersionsOfLocationFromIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationAllVersionsOfLocationFromIdentifierQueryOptions(identifier,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get latest version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const getLocationLatestVersionOfAllLocations = (
    params?: GetLocationLatestVersionOfAllLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/Location/GetLatestVersionOfAllLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationLatestVersionOfAllLocationsQueryKey = (params?: GetLocationLatestVersionOfAllLocationsParams,) => {
    return [`/Location/GetLatestVersionOfAllLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationLatestVersionOfAllLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>, TError = void>(params?: GetLocationLatestVersionOfAllLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationLatestVersionOfAllLocationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>> = ({ signal }) => getLocationLatestVersionOfAllLocations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationLatestVersionOfAllLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>>
export type GetLocationLatestVersionOfAllLocationsQueryError = void


/**
 * @summary Get latest version of all Utah.Udot.Atspm.Data.Models.Location
 */

export function useGetLocationLatestVersionOfAllLocations<TData = Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>, TError = void>(
 params?: GetLocationLatestVersionOfAllLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationLatestVersionOfAllLocationsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get count of Device Types using correct version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const getLocationDetectionTypeCount = (
    params?: GetLocationDetectionTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DetectionTypeGroup[]>(
      {url: `/Location/GetDetectionTypeCount`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationDetectionTypeCountQueryKey = (params?: GetLocationDetectionTypeCountParams,) => {
    return [`/Location/GetDetectionTypeCount`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationDetectionTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof getLocationDetectionTypeCount>>, TError = void>(params?: GetLocationDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationDetectionTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationDetectionTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationDetectionTypeCount>>> = ({ signal }) => getLocationDetectionTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationDetectionTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationDetectionTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationDetectionTypeCount>>>
export type GetLocationDetectionTypeCountQueryError = void


/**
 * @summary Get count of Device Types using correct version of all Utah.Udot.Atspm.Data.Models.Location
 */

export function useGetLocationDetectionTypeCount<TData = Awaited<ReturnType<typeof getLocationDetectionTypeCount>>, TError = void>(
 params?: GetLocationDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationDetectionTypeCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationDetectionTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Gets an optimized list of Utah.Udot.Atspm.ConfigApi.Models.SearchLocation to use for Location selection
 */
export const getLocationLocationsForSearch = (
    params?: GetLocationLocationsForSearchParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<SearchLocation[]>(
      {url: `/Location/GetLocationsForSearch`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationLocationsForSearchQueryKey = (params?: GetLocationLocationsForSearchParams,) => {
    return [`/Location/GetLocationsForSearch`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationLocationsForSearchQueryOptions = <TData = Awaited<ReturnType<typeof getLocationLocationsForSearch>>, TError = void>(params?: GetLocationLocationsForSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationLocationsForSearch>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationLocationsForSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationLocationsForSearch>>> = ({ signal }) => getLocationLocationsForSearch(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationLocationsForSearch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationLocationsForSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationLocationsForSearch>>>
export type GetLocationLocationsForSearchQueryError = void


/**
 * @summary Gets an optimized list of Utah.Udot.Atspm.ConfigApi.Models.SearchLocation to use for Location selection
 */

export function useGetLocationLocationsForSearch<TData = Awaited<ReturnType<typeof getLocationLocationsForSearch>>, TError = void>(
 params?: GetLocationLocationsForSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationLocationsForSearch>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationLocationsForSearchQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLocation = (
    params?: GetLocationParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/Location`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationQueryKey = (params?: GetLocationParams,) => {
    return [`/Location`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationQueryOptions = <TData = Awaited<ReturnType<typeof getLocation>>, TError = void>(params?: GetLocationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocation>>> = ({ signal }) => getLocation(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getLocation>>>
export type GetLocationQueryError = void



export function useGetLocation<TData = Awaited<ReturnType<typeof getLocation>>, TError = void>(
 params?: GetLocationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postLocation = (
    location: Location,
    params?: PostLocationParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/Location`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: location,
        params, signal
    },
      );
    }
  


export const getPostLocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLocation>>, TError,{data: Location;params?: PostLocationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postLocation>>, TError,{data: Location;params?: PostLocationParams}, TContext> => {

const mutationKey = ['postLocation'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLocation>>, {data: Location;params?: PostLocationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postLocation(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLocationMutationResult = NonNullable<Awaited<ReturnType<typeof postLocation>>>
    export type PostLocationMutationBody = Location
    export type PostLocationMutationError = void

    export const usePostLocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLocation>>, TError,{data: Location;params?: PostLocationParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postLocation>>,
        TError,
        {data: Location;params?: PostLocationParams},
        TContext
      > => {

      const mutationOptions = getPostLocationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getLocationCount = (
    params?: GetLocationCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/Location/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationCountQueryKey = (params?: GetLocationCountParams,) => {
    return [`/Location/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationCountQueryOptions = <TData = Awaited<ReturnType<typeof getLocationCount>>, TError = void>(params?: GetLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationCount>>> = ({ signal }) => getLocationCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationCountQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationCount>>>
export type GetLocationCountQueryError = void



export function useGetLocationCount<TData = Awaited<ReturnType<typeof getLocationCount>>, TError = void>(
 params?: GetLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLocationFromKey = (
    key: number,
    params?: GetLocationFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location>(
      {url: `/Location/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationFromKeyQueryKey = (key: number,
    params?: GetLocationFromKeyParams,) => {
    return [`/Location/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationFromKey>>, TError = void>(key: number,
    params?: GetLocationFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationFromKey>>> = ({ signal }) => getLocationFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationFromKey>>>
export type GetLocationFromKeyQueryError = void



export function useGetLocationFromKey<TData = Awaited<ReturnType<typeof getLocationFromKey>>, TError = void>(
 key: number,
    params?: GetLocationFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putLocationFromKey = (
    key: number,
    location: Location,
    params?: PutLocationFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Location/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: location,
        params
    },
      );
    }
  


export const getPutLocationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLocationFromKey>>, TError,{key: number;data: Location;params?: PutLocationFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putLocationFromKey>>, TError,{key: number;data: Location;params?: PutLocationFromKeyParams}, TContext> => {

const mutationKey = ['putLocationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLocationFromKey>>, {key: number;data: Location;params?: PutLocationFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putLocationFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLocationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putLocationFromKey>>>
    export type PutLocationFromKeyMutationBody = Location
    export type PutLocationFromKeyMutationError = void

    export const usePutLocationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLocationFromKey>>, TError,{key: number;data: Location;params?: PutLocationFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putLocationFromKey>>,
        TError,
        {key: number;data: Location;params?: PutLocationFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutLocationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchLocationFromKey = (
    key: number,
    location: Location,
    params?: PatchLocationFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Location/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: location,
        params
    },
      );
    }
  


export const getPatchLocationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchLocationFromKey>>, TError,{key: number;data: Location;params?: PatchLocationFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchLocationFromKey>>, TError,{key: number;data: Location;params?: PatchLocationFromKeyParams}, TContext> => {

const mutationKey = ['patchLocationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchLocationFromKey>>, {key: number;data: Location;params?: PatchLocationFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchLocationFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchLocationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchLocationFromKey>>>
    export type PatchLocationFromKeyMutationBody = Location
    export type PatchLocationFromKeyMutationError = void

    export const usePatchLocationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchLocationFromKey>>, TError,{key: number;data: Location;params?: PatchLocationFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchLocationFromKey>>,
        TError,
        {key: number;data: Location;params?: PatchLocationFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchLocationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteLocationFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Location/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteLocationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteLocationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteLocationFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationFromKey>>>
    
    export type DeleteLocationFromKeyMutationError = void

    export const useDeleteLocationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteLocationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    