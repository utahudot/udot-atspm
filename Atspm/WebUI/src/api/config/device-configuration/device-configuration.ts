/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Device,
  DeviceConfiguration,
  GetDeviceConfigurationCountParams,
  GetDeviceConfigurationDevicesCountFromKeyParams,
  GetDeviceConfigurationDevicesFromKeyParams,
  GetDeviceConfigurationEventLogDecodersParams,
  GetDeviceConfigurationFromKeyParams,
  GetDeviceConfigurationParams,
  PatchDeviceConfigurationFromKeyParams,
  PostDeviceConfigurationParams,
  PutDeviceConfigurationFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getDeviceConfigurationDevicesFromKey = (
    key: number,
    params?: GetDeviceConfigurationDevicesFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Device[]>(
      {url: `/DeviceConfiguration/${key}/devices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDeviceConfigurationDevicesFromKeyQueryKey = (key: number,
    params?: GetDeviceConfigurationDevicesFromKeyParams,) => {
    return [`/DeviceConfiguration/${key}/devices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDeviceConfigurationDevicesFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>, TError = void>(key: number,
    params?: GetDeviceConfigurationDevicesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceConfigurationDevicesFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>> = ({ signal }) => getDeviceConfigurationDevicesFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceConfigurationDevicesFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>>
export type GetDeviceConfigurationDevicesFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useGetDeviceConfigurationDevicesFromKey<TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>, TError = void>(
 key: number,
    params?: GetDeviceConfigurationDevicesFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDeviceConfigurationDevicesFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getDeviceConfigurationDevicesCountFromKey = (
    key: number,
    params?: GetDeviceConfigurationDevicesCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Device[]>(
      {url: `/DeviceConfiguration/${key}/devices/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDeviceConfigurationDevicesCountFromKeyQueryKey = (key: number,
    params?: GetDeviceConfigurationDevicesCountFromKeyParams,) => {
    return [`/DeviceConfiguration/${key}/devices/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDeviceConfigurationDevicesCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>, TError = void>(key: number,
    params?: GetDeviceConfigurationDevicesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceConfigurationDevicesCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>> = ({ signal }) => getDeviceConfigurationDevicesCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceConfigurationDevicesCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>>
export type GetDeviceConfigurationDevicesCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useGetDeviceConfigurationDevicesCountFromKey<TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>, TError = void>(
 key: number,
    params?: GetDeviceConfigurationDevicesCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDeviceConfigurationDevicesCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Gets all implementations of Utah.Udot.Atspm.Services.IEventLogDecoder
that can be assigned to Utah.Udot.Atspm.Data.Models.DeviceConfiguration for decoding Utah.Udot.Atspm.Data.Models.EventLogModels.EventLogModelBase derived types.
 */
export const getDeviceConfigurationEventLogDecoders = (
    params?: GetDeviceConfigurationEventLogDecodersParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<string[]>(
      {url: `/DeviceConfiguration/GetEventLogDecoders`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDeviceConfigurationEventLogDecodersQueryKey = (params?: GetDeviceConfigurationEventLogDecodersParams,) => {
    return [`/DeviceConfiguration/GetEventLogDecoders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDeviceConfigurationEventLogDecodersQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>, TError = void>(params?: GetDeviceConfigurationEventLogDecodersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceConfigurationEventLogDecodersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>> = ({ signal }) => getDeviceConfigurationEventLogDecoders(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceConfigurationEventLogDecodersQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>>
export type GetDeviceConfigurationEventLogDecodersQueryError = void


/**
 * @summary Gets all implementations of Utah.Udot.Atspm.Services.IEventLogDecoder
that can be assigned to Utah.Udot.Atspm.Data.Models.DeviceConfiguration for decoding Utah.Udot.Atspm.Data.Models.EventLogModels.EventLogModelBase derived types.
 */

export function useGetDeviceConfigurationEventLogDecoders<TData = Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>, TError = void>(
 params?: GetDeviceConfigurationEventLogDecodersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDeviceConfigurationEventLogDecodersQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDeviceConfiguration = (
    params?: GetDeviceConfigurationParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DeviceConfiguration[]>(
      {url: `/DeviceConfiguration`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDeviceConfigurationQueryKey = (params?: GetDeviceConfigurationParams,) => {
    return [`/DeviceConfiguration`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDeviceConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceConfiguration>>, TError = void>(params?: GetDeviceConfigurationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfiguration>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceConfigurationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceConfiguration>>> = ({ signal }) => getDeviceConfiguration(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfiguration>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceConfiguration>>>
export type GetDeviceConfigurationQueryError = void



export function useGetDeviceConfiguration<TData = Awaited<ReturnType<typeof getDeviceConfiguration>>, TError = void>(
 params?: GetDeviceConfigurationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfiguration>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDeviceConfigurationQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postDeviceConfiguration = (
    deviceConfiguration: DeviceConfiguration,
    params?: PostDeviceConfigurationParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/DeviceConfiguration`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: deviceConfiguration,
        params, signal
    },
      );
    }
  


export const getPostDeviceConfigurationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDeviceConfiguration>>, TError,{data: DeviceConfiguration;params?: PostDeviceConfigurationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postDeviceConfiguration>>, TError,{data: DeviceConfiguration;params?: PostDeviceConfigurationParams}, TContext> => {

const mutationKey = ['postDeviceConfiguration'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDeviceConfiguration>>, {data: DeviceConfiguration;params?: PostDeviceConfigurationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postDeviceConfiguration(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDeviceConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof postDeviceConfiguration>>>
    export type PostDeviceConfigurationMutationBody = DeviceConfiguration
    export type PostDeviceConfigurationMutationError = void

    export const usePostDeviceConfiguration = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDeviceConfiguration>>, TError,{data: DeviceConfiguration;params?: PostDeviceConfigurationParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postDeviceConfiguration>>,
        TError,
        {data: DeviceConfiguration;params?: PostDeviceConfigurationParams},
        TContext
      > => {

      const mutationOptions = getPostDeviceConfigurationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getDeviceConfigurationCount = (
    params?: GetDeviceConfigurationCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DeviceConfiguration[]>(
      {url: `/DeviceConfiguration/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDeviceConfigurationCountQueryKey = (params?: GetDeviceConfigurationCountParams,) => {
    return [`/DeviceConfiguration/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDeviceConfigurationCountQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceConfigurationCount>>, TError = void>(params?: GetDeviceConfigurationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceConfigurationCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceConfigurationCount>>> = ({ signal }) => getDeviceConfigurationCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceConfigurationCountQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceConfigurationCount>>>
export type GetDeviceConfigurationCountQueryError = void



export function useGetDeviceConfigurationCount<TData = Awaited<ReturnType<typeof getDeviceConfigurationCount>>, TError = void>(
 params?: GetDeviceConfigurationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDeviceConfigurationCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDeviceConfigurationFromKey = (
    key: number,
    params?: GetDeviceConfigurationFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<DeviceConfiguration>(
      {url: `/DeviceConfiguration/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDeviceConfigurationFromKeyQueryKey = (key: number,
    params?: GetDeviceConfigurationFromKeyParams,) => {
    return [`/DeviceConfiguration/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDeviceConfigurationFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>, TError = void>(key: number,
    params?: GetDeviceConfigurationFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceConfigurationFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>> = ({ signal }) => getDeviceConfigurationFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceConfigurationFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>>
export type GetDeviceConfigurationFromKeyQueryError = void



export function useGetDeviceConfigurationFromKey<TData = Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>, TError = void>(
 key: number,
    params?: GetDeviceConfigurationFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDeviceConfigurationFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putDeviceConfigurationFromKey = (
    key: number,
    deviceConfiguration: DeviceConfiguration,
    params?: PutDeviceConfigurationFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/DeviceConfiguration/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: deviceConfiguration,
        params
    },
      );
    }
  


export const getPutDeviceConfigurationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>, TError,{key: number;data: DeviceConfiguration;params?: PutDeviceConfigurationFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>, TError,{key: number;data: DeviceConfiguration;params?: PutDeviceConfigurationFromKeyParams}, TContext> => {

const mutationKey = ['putDeviceConfigurationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>, {key: number;data: DeviceConfiguration;params?: PutDeviceConfigurationFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putDeviceConfigurationFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDeviceConfigurationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>>
    export type PutDeviceConfigurationFromKeyMutationBody = DeviceConfiguration
    export type PutDeviceConfigurationFromKeyMutationError = void

    export const usePutDeviceConfigurationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>, TError,{key: number;data: DeviceConfiguration;params?: PutDeviceConfigurationFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>,
        TError,
        {key: number;data: DeviceConfiguration;params?: PutDeviceConfigurationFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutDeviceConfigurationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchDeviceConfigurationFromKey = (
    key: number,
    deviceConfiguration: DeviceConfiguration,
    params?: PatchDeviceConfigurationFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/DeviceConfiguration/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: deviceConfiguration,
        params
    },
      );
    }
  


export const getPatchDeviceConfigurationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>, TError,{key: number;data: DeviceConfiguration;params?: PatchDeviceConfigurationFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>, TError,{key: number;data: DeviceConfiguration;params?: PatchDeviceConfigurationFromKeyParams}, TContext> => {

const mutationKey = ['patchDeviceConfigurationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>, {key: number;data: DeviceConfiguration;params?: PatchDeviceConfigurationFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchDeviceConfigurationFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchDeviceConfigurationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>>
    export type PatchDeviceConfigurationFromKeyMutationBody = DeviceConfiguration
    export type PatchDeviceConfigurationFromKeyMutationError = void

    export const usePatchDeviceConfigurationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>, TError,{key: number;data: DeviceConfiguration;params?: PatchDeviceConfigurationFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>,
        TError,
        {key: number;data: DeviceConfiguration;params?: PatchDeviceConfigurationFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchDeviceConfigurationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteDeviceConfigurationFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/DeviceConfiguration/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDeviceConfigurationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteDeviceConfigurationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteDeviceConfigurationFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDeviceConfigurationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>>
    
    export type DeleteDeviceConfigurationFromKeyMutationError = void

    export const useDeleteDeviceConfigurationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteDeviceConfigurationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    