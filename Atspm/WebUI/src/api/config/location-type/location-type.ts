/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetLocationTypeCountParams,
  GetLocationTypeFromKeyParams,
  GetLocationTypeLocationsCountFromKeyParams,
  GetLocationTypeLocationsFromKeyParams,
  GetLocationTypeParams,
  Location,
  LocationType,
  PatchLocationTypeFromKeyParams,
  PostLocationTypeParams,
  PutLocationTypeFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getLocationTypeLocationsFromKey = (
    key: number,
    params?: GetLocationTypeLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/LocationType/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationTypeLocationsFromKeyQueryKey = (key: number,
    params?: GetLocationTypeLocationsFromKeyParams,) => {
    return [`/LocationType/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationTypeLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>, TError = void>(key: number,
    params?: GetLocationTypeLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationTypeLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>> = ({ signal }) => getLocationTypeLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationTypeLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>>
export type GetLocationTypeLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetLocationTypeLocationsFromKey<TData = Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetLocationTypeLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationTypeLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getLocationTypeLocationsCountFromKey = (
    key: number,
    params?: GetLocationTypeLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/LocationType/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationTypeLocationsCountFromKeyQueryKey = (key: number,
    params?: GetLocationTypeLocationsCountFromKeyParams,) => {
    return [`/LocationType/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationTypeLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetLocationTypeLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationTypeLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>> = ({ signal }) => getLocationTypeLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationTypeLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>>
export type GetLocationTypeLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetLocationTypeLocationsCountFromKey<TData = Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetLocationTypeLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationTypeLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLocationType = (
    params?: GetLocationTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<LocationType[]>(
      {url: `/LocationType`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationTypeQueryKey = (params?: GetLocationTypeParams,) => {
    return [`/LocationType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationTypeQueryOptions = <TData = Awaited<ReturnType<typeof getLocationType>>, TError = void>(params?: GetLocationTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationType>>> = ({ signal }) => getLocationType(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationType>>>
export type GetLocationTypeQueryError = void



export function useGetLocationType<TData = Awaited<ReturnType<typeof getLocationType>>, TError = void>(
 params?: GetLocationTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationType>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationTypeQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postLocationType = (
    locationType: LocationType,
    params?: PostLocationTypeParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/LocationType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: locationType,
        params, signal
    },
      );
    }
  


export const getPostLocationTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLocationType>>, TError,{data: LocationType;params?: PostLocationTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postLocationType>>, TError,{data: LocationType;params?: PostLocationTypeParams}, TContext> => {

const mutationKey = ['postLocationType'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLocationType>>, {data: LocationType;params?: PostLocationTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postLocationType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLocationTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postLocationType>>>
    export type PostLocationTypeMutationBody = LocationType
    export type PostLocationTypeMutationError = void

    export const usePostLocationType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLocationType>>, TError,{data: LocationType;params?: PostLocationTypeParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postLocationType>>,
        TError,
        {data: LocationType;params?: PostLocationTypeParams},
        TContext
      > => {

      const mutationOptions = getPostLocationTypeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getLocationTypeCount = (
    params?: GetLocationTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<LocationType[]>(
      {url: `/LocationType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationTypeCountQueryKey = (params?: GetLocationTypeCountParams,) => {
    return [`/LocationType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof getLocationTypeCount>>, TError = void>(params?: GetLocationTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationTypeCount>>> = ({ signal }) => getLocationTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationTypeCount>>>
export type GetLocationTypeCountQueryError = void



export function useGetLocationTypeCount<TData = Awaited<ReturnType<typeof getLocationTypeCount>>, TError = void>(
 params?: GetLocationTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLocationTypeFromKey = (
    key: number,
    params?: GetLocationTypeFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<LocationType>(
      {url: `/LocationType/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationTypeFromKeyQueryKey = (key: number,
    params?: GetLocationTypeFromKeyParams,) => {
    return [`/LocationType/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationTypeFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getLocationTypeFromKey>>, TError = void>(key: number,
    params?: GetLocationTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationTypeFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationTypeFromKey>>> = ({ signal }) => getLocationTypeFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationTypeFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationTypeFromKey>>>
export type GetLocationTypeFromKeyQueryError = void



export function useGetLocationTypeFromKey<TData = Awaited<ReturnType<typeof getLocationTypeFromKey>>, TError = void>(
 key: number,
    params?: GetLocationTypeFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocationTypeFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationTypeFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putLocationTypeFromKey = (
    key: number,
    locationType: LocationType,
    params?: PutLocationTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/LocationType/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: locationType,
        params
    },
      );
    }
  


export const getPutLocationTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLocationTypeFromKey>>, TError,{key: number;data: LocationType;params?: PutLocationTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putLocationTypeFromKey>>, TError,{key: number;data: LocationType;params?: PutLocationTypeFromKeyParams}, TContext> => {

const mutationKey = ['putLocationTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLocationTypeFromKey>>, {key: number;data: LocationType;params?: PutLocationTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putLocationTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLocationTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putLocationTypeFromKey>>>
    export type PutLocationTypeFromKeyMutationBody = LocationType
    export type PutLocationTypeFromKeyMutationError = void

    export const usePutLocationTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLocationTypeFromKey>>, TError,{key: number;data: LocationType;params?: PutLocationTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putLocationTypeFromKey>>,
        TError,
        {key: number;data: LocationType;params?: PutLocationTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutLocationTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchLocationTypeFromKey = (
    key: number,
    locationType: LocationType,
    params?: PatchLocationTypeFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/LocationType/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: locationType,
        params
    },
      );
    }
  


export const getPatchLocationTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchLocationTypeFromKey>>, TError,{key: number;data: LocationType;params?: PatchLocationTypeFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchLocationTypeFromKey>>, TError,{key: number;data: LocationType;params?: PatchLocationTypeFromKeyParams}, TContext> => {

const mutationKey = ['patchLocationTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchLocationTypeFromKey>>, {key: number;data: LocationType;params?: PatchLocationTypeFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchLocationTypeFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchLocationTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchLocationTypeFromKey>>>
    export type PatchLocationTypeFromKeyMutationBody = LocationType
    export type PatchLocationTypeFromKeyMutationError = void

    export const usePatchLocationTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchLocationTypeFromKey>>, TError,{key: number;data: LocationType;params?: PatchLocationTypeFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchLocationTypeFromKey>>,
        TError,
        {key: number;data: LocationType;params?: PatchLocationTypeFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchLocationTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteLocationTypeFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/LocationType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteLocationTypeFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationTypeFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationTypeFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteLocationTypeFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationTypeFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteLocationTypeFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationTypeFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationTypeFromKey>>>
    
    export type DeleteLocationTypeFromKeyMutationError = void

    export const useDeleteLocationTypeFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationTypeFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationTypeFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteLocationTypeFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    