/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Approach,
  ApproachDto,
  Detector,
  GetApproachApproachDtoFromIdParams,
  GetApproachCountParams,
  GetApproachDetectorsCountFromKeyParams,
  GetApproachDetectorsFromKeyParams,
  GetApproachFromKeyParams,
  GetApproachParams,
  PatchApproachFromKeyParams,
  PostApproachParams,
  PutApproachFromKeyParams,
  UpsertApproachApproachParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getApproachDetectorsFromKey = (
    key: number,
    params?: GetApproachDetectorsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector[]>(
      {url: `/Approach/${key}/detectors`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApproachDetectorsFromKeyQueryKey = (key: number,
    params?: GetApproachDetectorsFromKeyParams,) => {
    return [`/Approach/${key}/detectors`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApproachDetectorsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getApproachDetectorsFromKey>>, TError = void>(key: number,
    params?: GetApproachDetectorsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachDetectorsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApproachDetectorsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproachDetectorsFromKey>>> = ({ signal }) => getApproachDetectorsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApproachDetectorsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApproachDetectorsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getApproachDetectorsFromKey>>>
export type GetApproachDetectorsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useGetApproachDetectorsFromKey<TData = Awaited<ReturnType<typeof getApproachDetectorsFromKey>>, TError = void>(
 key: number,
    params?: GetApproachDetectorsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachDetectorsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApproachDetectorsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getApproachDetectorsCountFromKey = (
    key: number,
    params?: GetApproachDetectorsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Detector[]>(
      {url: `/Approach/${key}/detectors/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApproachDetectorsCountFromKeyQueryKey = (key: number,
    params?: GetApproachDetectorsCountFromKeyParams,) => {
    return [`/Approach/${key}/detectors/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApproachDetectorsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>, TError = void>(key: number,
    params?: GetApproachDetectorsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApproachDetectorsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>> = ({ signal }) => getApproachDetectorsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApproachDetectorsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>>
export type GetApproachDetectorsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useGetApproachDetectorsCountFromKey<TData = Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>, TError = void>(
 key: number,
    params?: GetApproachDetectorsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApproachDetectorsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const upsertApproachApproach = (
    approachDto: ApproachDto,
    params?: UpsertApproachApproachParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/UpsertApproach`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: approachDto,
        params, signal
    },
      );
    }
  


export const getUpsertApproachApproachMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof upsertApproachApproach>>, TError,{data: ApproachDto;params?: UpsertApproachApproachParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof upsertApproachApproach>>, TError,{data: ApproachDto;params?: UpsertApproachApproachParams}, TContext> => {

const mutationKey = ['upsertApproachApproach'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof upsertApproachApproach>>, {data: ApproachDto;params?: UpsertApproachApproachParams}> = (props) => {
          const {data,params} = props ?? {};

          return  upsertApproachApproach(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpsertApproachApproachMutationResult = NonNullable<Awaited<ReturnType<typeof upsertApproachApproach>>>
    export type UpsertApproachApproachMutationBody = ApproachDto
    export type UpsertApproachApproachMutationError = void

    export const useUpsertApproachApproach = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof upsertApproachApproach>>, TError,{data: ApproachDto;params?: UpsertApproachApproachParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof upsertApproachApproach>>,
        TError,
        {data: ApproachDto;params?: UpsertApproachApproachParams},
        TContext
      > => {

      const mutationOptions = getUpsertApproachApproachMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getApproachApproachDtoFromId = (
    id: number,
    params?: GetApproachApproachDtoFromIdParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/GetApproachDto/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApproachApproachDtoFromIdQueryKey = (id: number,
    params?: GetApproachApproachDtoFromIdParams,) => {
    return [`/GetApproachDto/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApproachApproachDtoFromIdQueryOptions = <TData = Awaited<ReturnType<typeof getApproachApproachDtoFromId>>, TError = void>(id: number,
    params?: GetApproachApproachDtoFromIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachApproachDtoFromId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApproachApproachDtoFromIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproachApproachDtoFromId>>> = ({ signal }) => getApproachApproachDtoFromId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApproachApproachDtoFromId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApproachApproachDtoFromIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApproachApproachDtoFromId>>>
export type GetApproachApproachDtoFromIdQueryError = void



export function useGetApproachApproachDtoFromId<TData = Awaited<ReturnType<typeof getApproachApproachDtoFromId>>, TError = void>(
 id: number,
    params?: GetApproachApproachDtoFromIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachApproachDtoFromId>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApproachApproachDtoFromIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApproach = (
    params?: GetApproachParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach[]>(
      {url: `/Approach`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApproachQueryKey = (params?: GetApproachParams,) => {
    return [`/Approach`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApproachQueryOptions = <TData = Awaited<ReturnType<typeof getApproach>>, TError = void>(params?: GetApproachParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproach>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApproachQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproach>>> = ({ signal }) => getApproach(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApproach>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApproachQueryResult = NonNullable<Awaited<ReturnType<typeof getApproach>>>
export type GetApproachQueryError = void



export function useGetApproach<TData = Awaited<ReturnType<typeof getApproach>>, TError = void>(
 params?: GetApproachParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproach>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApproachQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApproach = (
    approach: Approach,
    params?: PostApproachParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/Approach`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: approach,
        params, signal
    },
      );
    }
  


export const getPostApproachMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApproach>>, TError,{data: Approach;params?: PostApproachParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApproach>>, TError,{data: Approach;params?: PostApproachParams}, TContext> => {

const mutationKey = ['postApproach'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApproach>>, {data: Approach;params?: PostApproachParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApproach(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApproachMutationResult = NonNullable<Awaited<ReturnType<typeof postApproach>>>
    export type PostApproachMutationBody = Approach
    export type PostApproachMutationError = void

    export const usePostApproach = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApproach>>, TError,{data: Approach;params?: PostApproachParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApproach>>,
        TError,
        {data: Approach;params?: PostApproachParams},
        TContext
      > => {

      const mutationOptions = getPostApproachMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getApproachCount = (
    params?: GetApproachCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach[]>(
      {url: `/Approach/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApproachCountQueryKey = (params?: GetApproachCountParams,) => {
    return [`/Approach/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApproachCountQueryOptions = <TData = Awaited<ReturnType<typeof getApproachCount>>, TError = void>(params?: GetApproachCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApproachCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproachCount>>> = ({ signal }) => getApproachCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApproachCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApproachCountQueryResult = NonNullable<Awaited<ReturnType<typeof getApproachCount>>>
export type GetApproachCountQueryError = void



export function useGetApproachCount<TData = Awaited<ReturnType<typeof getApproachCount>>, TError = void>(
 params?: GetApproachCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApproachCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApproachFromKey = (
    key: number,
    params?: GetApproachFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Approach>(
      {url: `/Approach/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApproachFromKeyQueryKey = (key: number,
    params?: GetApproachFromKeyParams,) => {
    return [`/Approach/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApproachFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getApproachFromKey>>, TError = void>(key: number,
    params?: GetApproachFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApproachFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproachFromKey>>> = ({ signal }) => getApproachFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApproachFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApproachFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getApproachFromKey>>>
export type GetApproachFromKeyQueryError = void



export function useGetApproachFromKey<TData = Awaited<ReturnType<typeof getApproachFromKey>>, TError = void>(
 key: number,
    params?: GetApproachFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApproachFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApproachFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApproachFromKey = (
    key: number,
    approach: Approach,
    params?: PutApproachFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Approach/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: approach,
        params
    },
      );
    }
  


export const getPutApproachFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApproachFromKey>>, TError,{key: number;data: Approach;params?: PutApproachFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApproachFromKey>>, TError,{key: number;data: Approach;params?: PutApproachFromKeyParams}, TContext> => {

const mutationKey = ['putApproachFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApproachFromKey>>, {key: number;data: Approach;params?: PutApproachFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putApproachFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApproachFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putApproachFromKey>>>
    export type PutApproachFromKeyMutationBody = Approach
    export type PutApproachFromKeyMutationError = void

    export const usePutApproachFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApproachFromKey>>, TError,{key: number;data: Approach;params?: PutApproachFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApproachFromKey>>,
        TError,
        {key: number;data: Approach;params?: PutApproachFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutApproachFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchApproachFromKey = (
    key: number,
    approach: Approach,
    params?: PatchApproachFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Approach/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: approach,
        params
    },
      );
    }
  


export const getPatchApproachFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApproachFromKey>>, TError,{key: number;data: Approach;params?: PatchApproachFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApproachFromKey>>, TError,{key: number;data: Approach;params?: PatchApproachFromKeyParams}, TContext> => {

const mutationKey = ['patchApproachFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApproachFromKey>>, {key: number;data: Approach;params?: PatchApproachFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchApproachFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApproachFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchApproachFromKey>>>
    export type PatchApproachFromKeyMutationBody = Approach
    export type PatchApproachFromKeyMutationError = void

    export const usePatchApproachFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApproachFromKey>>, TError,{key: number;data: Approach;params?: PatchApproachFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchApproachFromKey>>,
        TError,
        {key: number;data: Approach;params?: PatchApproachFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchApproachFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteApproachFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Approach/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApproachFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApproachFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApproachFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteApproachFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApproachFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteApproachFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApproachFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApproachFromKey>>>
    
    export type DeleteApproachFromKeyMutationError = void

    export const useDeleteApproachFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApproachFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApproachFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteApproachFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    