/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Area,
  GetAreaCountParams,
  GetAreaFromKeyParams,
  GetAreaLocationsCountFromKeyParams,
  GetAreaLocationsFromKeyParams,
  GetAreaParams,
  Location,
  PatchAreaFromKeyParams,
  PostAreaParams,
  PutAreaFromKeyParams
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getAreaLocationsFromKey = (
    key: number,
    params?: GetAreaLocationsFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/Area/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAreaLocationsFromKeyQueryKey = (key: number,
    params?: GetAreaLocationsFromKeyParams,) => {
    return [`/Area/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAreaLocationsFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAreaLocationsFromKey>>, TError = void>(key: number,
    params?: GetAreaLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaLocationsFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaLocationsFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaLocationsFromKey>>> = ({ signal }) => getAreaLocationsFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAreaLocationsFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAreaLocationsFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaLocationsFromKey>>>
export type GetAreaLocationsFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetAreaLocationsFromKey<TData = Awaited<ReturnType<typeof getAreaLocationsFromKey>>, TError = void>(
 key: number,
    params?: GetAreaLocationsFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaLocationsFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAreaLocationsFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getAreaLocationsCountFromKey = (
    key: number,
    params?: GetAreaLocationsCountFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Location[]>(
      {url: `/Area/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAreaLocationsCountFromKeyQueryKey = (key: number,
    params?: GetAreaLocationsCountFromKeyParams,) => {
    return [`/Area/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAreaLocationsCountFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>, TError = void>(key: number,
    params?: GetAreaLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaLocationsCountFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>> = ({ signal }) => getAreaLocationsCountFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAreaLocationsCountFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>>
export type GetAreaLocationsCountFromKeyQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useGetAreaLocationsCountFromKey<TData = Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>, TError = void>(
 key: number,
    params?: GetAreaLocationsCountFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAreaLocationsCountFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getArea = (
    params?: GetAreaParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Area[]>(
      {url: `/Area`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAreaQueryKey = (params?: GetAreaParams,) => {
    return [`/Area`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAreaQueryOptions = <TData = Awaited<ReturnType<typeof getArea>>, TError = void>(params?: GetAreaParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArea>>> = ({ signal }) => getArea(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getArea>>>
export type GetAreaQueryError = void



export function useGetArea<TData = Awaited<ReturnType<typeof getArea>>, TError = void>(
 params?: GetAreaParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAreaQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postArea = (
    area: Area,
    params?: PostAreaParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/Area`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: area,
        params, signal
    },
      );
    }
  


export const getPostAreaMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArea>>, TError,{data: Area;params?: PostAreaParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postArea>>, TError,{data: Area;params?: PostAreaParams}, TContext> => {

const mutationKey = ['postArea'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postArea>>, {data: Area;params?: PostAreaParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postArea(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAreaMutationResult = NonNullable<Awaited<ReturnType<typeof postArea>>>
    export type PostAreaMutationBody = Area
    export type PostAreaMutationError = void

    export const usePostArea = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArea>>, TError,{data: Area;params?: PostAreaParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postArea>>,
        TError,
        {data: Area;params?: PostAreaParams},
        TContext
      > => {

      const mutationOptions = getPostAreaMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getAreaCount = (
    params?: GetAreaCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Area[]>(
      {url: `/Area/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAreaCountQueryKey = (params?: GetAreaCountParams,) => {
    return [`/Area/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAreaCountQueryOptions = <TData = Awaited<ReturnType<typeof getAreaCount>>, TError = void>(params?: GetAreaCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaCount>>> = ({ signal }) => getAreaCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAreaCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAreaCountQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaCount>>>
export type GetAreaCountQueryError = void



export function useGetAreaCount<TData = Awaited<ReturnType<typeof getAreaCount>>, TError = void>(
 params?: GetAreaCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAreaCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAreaFromKey = (
    key: number,
    params?: GetAreaFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<Area>(
      {url: `/Area/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAreaFromKeyQueryKey = (key: number,
    params?: GetAreaFromKeyParams,) => {
    return [`/Area/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAreaFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAreaFromKey>>, TError = void>(key: number,
    params?: GetAreaFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaFromKey>>> = ({ signal }) => getAreaFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAreaFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAreaFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaFromKey>>>
export type GetAreaFromKeyQueryError = void



export function useGetAreaFromKey<TData = Awaited<ReturnType<typeof getAreaFromKey>>, TError = void>(
 key: number,
    params?: GetAreaFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAreaFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAreaFromKey = (
    key: number,
    area: Area,
    params?: PutAreaFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Area/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: area,
        params
    },
      );
    }
  


export const getPutAreaFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAreaFromKey>>, TError,{key: number;data: Area;params?: PutAreaFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putAreaFromKey>>, TError,{key: number;data: Area;params?: PutAreaFromKeyParams}, TContext> => {

const mutationKey = ['putAreaFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAreaFromKey>>, {key: number;data: Area;params?: PutAreaFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putAreaFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAreaFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putAreaFromKey>>>
    export type PutAreaFromKeyMutationBody = Area
    export type PutAreaFromKeyMutationError = void

    export const usePutAreaFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAreaFromKey>>, TError,{key: number;data: Area;params?: PutAreaFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putAreaFromKey>>,
        TError,
        {key: number;data: Area;params?: PutAreaFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutAreaFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchAreaFromKey = (
    key: number,
    area: Area,
    params?: PatchAreaFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Area/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: area,
        params
    },
      );
    }
  


export const getPatchAreaFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAreaFromKey>>, TError,{key: number;data: Area;params?: PatchAreaFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchAreaFromKey>>, TError,{key: number;data: Area;params?: PatchAreaFromKeyParams}, TContext> => {

const mutationKey = ['patchAreaFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAreaFromKey>>, {key: number;data: Area;params?: PatchAreaFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchAreaFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAreaFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchAreaFromKey>>>
    export type PatchAreaFromKeyMutationBody = Area
    export type PatchAreaFromKeyMutationError = void

    export const usePatchAreaFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAreaFromKey>>, TError,{key: number;data: Area;params?: PatchAreaFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchAreaFromKey>>,
        TError,
        {key: number;data: Area;params?: PatchAreaFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchAreaFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteAreaFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/Area/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAreaFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAreaFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAreaFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteAreaFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAreaFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteAreaFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAreaFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAreaFromKey>>>
    
    export type DeleteAreaFromKeyMutationError = void

    export const useDeleteAreaFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAreaFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteAreaFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteAreaFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    