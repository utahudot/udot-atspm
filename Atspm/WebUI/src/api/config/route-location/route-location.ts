/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetRouteLocationCountParams,
  GetRouteLocationFromKeyParams,
  GetRouteLocationParams,
  PatchRouteLocationFromKeyParams,
  PostRouteLocationParams,
  PutRouteLocationFromKeyParams,
  RouteLocation
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getRouteLocation = (
    params?: GetRouteLocationParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/RouteLocation`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteLocationQueryKey = (params?: GetRouteLocationParams,) => {
    return [`/api/v1/RouteLocation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteLocationQueryOptions = <TData = Awaited<ReturnType<typeof getRouteLocation>>, TError = void>(params?: GetRouteLocationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteLocation>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteLocationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteLocation>>> = ({ signal }) => getRouteLocation(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteLocation>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteLocation>>>
export type GetRouteLocationQueryError = void



export function useGetRouteLocation<TData = Awaited<ReturnType<typeof getRouteLocation>>, TError = void>(
 params?: GetRouteLocationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteLocation>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteLocationQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postRouteLocation = (
    routeLocation: RouteLocation,
    params?: PostRouteLocationParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteLocation`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeLocation,
        params, signal
    },
      );
    }
  


export const getPostRouteLocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRouteLocation>>, TError,{data: RouteLocation;params?: PostRouteLocationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRouteLocation>>, TError,{data: RouteLocation;params?: PostRouteLocationParams}, TContext> => {

const mutationKey = ['postRouteLocation'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRouteLocation>>, {data: RouteLocation;params?: PostRouteLocationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postRouteLocation(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRouteLocationMutationResult = NonNullable<Awaited<ReturnType<typeof postRouteLocation>>>
    export type PostRouteLocationMutationBody = RouteLocation
    export type PostRouteLocationMutationError = void

    export const usePostRouteLocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRouteLocation>>, TError,{data: RouteLocation;params?: PostRouteLocationParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postRouteLocation>>,
        TError,
        {data: RouteLocation;params?: PostRouteLocationParams},
        TContext
      > => {

      const mutationOptions = getPostRouteLocationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getRouteLocationCount = (
    params?: GetRouteLocationCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation[]>(
      {url: `/api/v1/RouteLocation/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteLocationCountQueryKey = (params?: GetRouteLocationCountParams,) => {
    return [`/api/v1/RouteLocation/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteLocationCountQueryOptions = <TData = Awaited<ReturnType<typeof getRouteLocationCount>>, TError = void>(params?: GetRouteLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteLocationCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteLocationCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteLocationCount>>> = ({ signal }) => getRouteLocationCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteLocationCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteLocationCountQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteLocationCount>>>
export type GetRouteLocationCountQueryError = void



export function useGetRouteLocationCount<TData = Awaited<ReturnType<typeof getRouteLocationCount>>, TError = void>(
 params?: GetRouteLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteLocationCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteLocationCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRouteLocationFromKey = (
    key: number,
    params?: GetRouteLocationFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<RouteLocation>(
      {url: `/api/v1/RouteLocation/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRouteLocationFromKeyQueryKey = (key: number,
    params?: GetRouteLocationFromKeyParams,) => {
    return [`/api/v1/RouteLocation/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRouteLocationFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getRouteLocationFromKey>>, TError = void>(key: number,
    params?: GetRouteLocationFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteLocationFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouteLocationFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteLocationFromKey>>> = ({ signal }) => getRouteLocationFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRouteLocationFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRouteLocationFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getRouteLocationFromKey>>>
export type GetRouteLocationFromKeyQueryError = void



export function useGetRouteLocationFromKey<TData = Awaited<ReturnType<typeof getRouteLocationFromKey>>, TError = void>(
 key: number,
    params?: GetRouteLocationFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouteLocationFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRouteLocationFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putRouteLocationFromKey = (
    key: number,
    routeLocation: RouteLocation,
    params?: PutRouteLocationFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteLocation/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeLocation,
        params
    },
      );
    }
  


export const getPutRouteLocationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRouteLocationFromKey>>, TError,{key: number;data: RouteLocation;params?: PutRouteLocationFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putRouteLocationFromKey>>, TError,{key: number;data: RouteLocation;params?: PutRouteLocationFromKeyParams}, TContext> => {

const mutationKey = ['putRouteLocationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRouteLocationFromKey>>, {key: number;data: RouteLocation;params?: PutRouteLocationFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putRouteLocationFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutRouteLocationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putRouteLocationFromKey>>>
    export type PutRouteLocationFromKeyMutationBody = RouteLocation
    export type PutRouteLocationFromKeyMutationError = void

    export const usePutRouteLocationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRouteLocationFromKey>>, TError,{key: number;data: RouteLocation;params?: PutRouteLocationFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putRouteLocationFromKey>>,
        TError,
        {key: number;data: RouteLocation;params?: PutRouteLocationFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutRouteLocationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchRouteLocationFromKey = (
    key: number,
    routeLocation: RouteLocation,
    params?: PatchRouteLocationFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteLocation/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: routeLocation,
        params
    },
      );
    }
  


export const getPatchRouteLocationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRouteLocationFromKey>>, TError,{key: number;data: RouteLocation;params?: PatchRouteLocationFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchRouteLocationFromKey>>, TError,{key: number;data: RouteLocation;params?: PatchRouteLocationFromKeyParams}, TContext> => {

const mutationKey = ['patchRouteLocationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchRouteLocationFromKey>>, {key: number;data: RouteLocation;params?: PatchRouteLocationFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchRouteLocationFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchRouteLocationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchRouteLocationFromKey>>>
    export type PatchRouteLocationFromKeyMutationBody = RouteLocation
    export type PatchRouteLocationFromKeyMutationError = void

    export const usePatchRouteLocationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchRouteLocationFromKey>>, TError,{key: number;data: RouteLocation;params?: PatchRouteLocationFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchRouteLocationFromKey>>,
        TError,
        {key: number;data: RouteLocation;params?: PatchRouteLocationFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchRouteLocationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteRouteLocationFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteLocation/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRouteLocationFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouteLocationFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteRouteLocationFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteRouteLocationFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRouteLocationFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteRouteLocationFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRouteLocationFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRouteLocationFromKey>>>
    
    export type DeleteRouteLocationFromKeyMutationError = void

    export const useDeleteRouteLocationFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouteLocationFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteRouteLocationFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteRouteLocationFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    