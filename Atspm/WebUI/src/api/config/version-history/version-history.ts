/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetVersionHistoryCountParams,
  GetVersionHistoryFromKeyParams,
  GetVersionHistoryParams,
  PatchVersionHistoryFromKeyParams,
  PostVersionHistoryParams,
  PutVersionHistoryFromKeyParams,
  VersionHistory
} from '../aTSPMConfigurationApi.schemas';

import { configRequest } from '../../../lib/axios';




export const getVersionHistory = (
    params?: GetVersionHistoryParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<VersionHistory[]>(
      {url: `/api/v1/VersionHistory`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetVersionHistoryQueryKey = (params?: GetVersionHistoryParams,) => {
    return [`/api/v1/VersionHistory`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVersionHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getVersionHistory>>, TError = void>(params?: GetVersionHistoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVersionHistory>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVersionHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVersionHistory>>> = ({ signal }) => getVersionHistory(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVersionHistory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVersionHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getVersionHistory>>>
export type GetVersionHistoryQueryError = void



export function useGetVersionHistory<TData = Awaited<ReturnType<typeof getVersionHistory>>, TError = void>(
 params?: GetVersionHistoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVersionHistory>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetVersionHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postVersionHistory = (
    versionHistory: VersionHistory,
    params?: PostVersionHistoryParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/VersionHistory`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: versionHistory,
        params, signal
    },
      );
    }
  


export const getPostVersionHistoryMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVersionHistory>>, TError,{data: VersionHistory;params?: PostVersionHistoryParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postVersionHistory>>, TError,{data: VersionHistory;params?: PostVersionHistoryParams}, TContext> => {

const mutationKey = ['postVersionHistory'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVersionHistory>>, {data: VersionHistory;params?: PostVersionHistoryParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postVersionHistory(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVersionHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof postVersionHistory>>>
    export type PostVersionHistoryMutationBody = VersionHistory
    export type PostVersionHistoryMutationError = void

    export const usePostVersionHistory = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVersionHistory>>, TError,{data: VersionHistory;params?: PostVersionHistoryParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postVersionHistory>>,
        TError,
        {data: VersionHistory;params?: PostVersionHistoryParams},
        TContext
      > => {

      const mutationOptions = getPostVersionHistoryMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getVersionHistoryCount = (
    params?: GetVersionHistoryCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<VersionHistory[]>(
      {url: `/api/v1/VersionHistory/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetVersionHistoryCountQueryKey = (params?: GetVersionHistoryCountParams,) => {
    return [`/api/v1/VersionHistory/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVersionHistoryCountQueryOptions = <TData = Awaited<ReturnType<typeof getVersionHistoryCount>>, TError = void>(params?: GetVersionHistoryCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVersionHistoryCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVersionHistoryCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVersionHistoryCount>>> = ({ signal }) => getVersionHistoryCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVersionHistoryCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVersionHistoryCountQueryResult = NonNullable<Awaited<ReturnType<typeof getVersionHistoryCount>>>
export type GetVersionHistoryCountQueryError = void



export function useGetVersionHistoryCount<TData = Awaited<ReturnType<typeof getVersionHistoryCount>>, TError = void>(
 params?: GetVersionHistoryCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVersionHistoryCount>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetVersionHistoryCountQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVersionHistoryFromKey = (
    key: number,
    params?: GetVersionHistoryFromKeyParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<VersionHistory>(
      {url: `/api/v1/VersionHistory/${key}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetVersionHistoryFromKeyQueryKey = (key: number,
    params?: GetVersionHistoryFromKeyParams,) => {
    return [`/api/v1/VersionHistory/${key}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVersionHistoryFromKeyQueryOptions = <TData = Awaited<ReturnType<typeof getVersionHistoryFromKey>>, TError = void>(key: number,
    params?: GetVersionHistoryFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVersionHistoryFromKey>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVersionHistoryFromKeyQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVersionHistoryFromKey>>> = ({ signal }) => getVersionHistoryFromKey(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVersionHistoryFromKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVersionHistoryFromKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getVersionHistoryFromKey>>>
export type GetVersionHistoryFromKeyQueryError = void



export function useGetVersionHistoryFromKey<TData = Awaited<ReturnType<typeof getVersionHistoryFromKey>>, TError = void>(
 key: number,
    params?: GetVersionHistoryFromKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVersionHistoryFromKey>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetVersionHistoryFromKeyQueryOptions(key,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putVersionHistoryFromKey = (
    key: number,
    versionHistory: VersionHistory,
    params?: PutVersionHistoryFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/VersionHistory/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: versionHistory,
        params
    },
      );
    }
  


export const getPutVersionHistoryFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVersionHistoryFromKey>>, TError,{key: number;data: VersionHistory;params?: PutVersionHistoryFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putVersionHistoryFromKey>>, TError,{key: number;data: VersionHistory;params?: PutVersionHistoryFromKeyParams}, TContext> => {

const mutationKey = ['putVersionHistoryFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVersionHistoryFromKey>>, {key: number;data: VersionHistory;params?: PutVersionHistoryFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  putVersionHistoryFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVersionHistoryFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putVersionHistoryFromKey>>>
    export type PutVersionHistoryFromKeyMutationBody = VersionHistory
    export type PutVersionHistoryFromKeyMutationError = void

    export const usePutVersionHistoryFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVersionHistoryFromKey>>, TError,{key: number;data: VersionHistory;params?: PutVersionHistoryFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putVersionHistoryFromKey>>,
        TError,
        {key: number;data: VersionHistory;params?: PutVersionHistoryFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPutVersionHistoryFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const patchVersionHistoryFromKey = (
    key: number,
    versionHistory: VersionHistory,
    params?: PatchVersionHistoryFromKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/VersionHistory/${key}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: versionHistory,
        params
    },
      );
    }
  


export const getPatchVersionHistoryFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchVersionHistoryFromKey>>, TError,{key: number;data: VersionHistory;params?: PatchVersionHistoryFromKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchVersionHistoryFromKey>>, TError,{key: number;data: VersionHistory;params?: PatchVersionHistoryFromKeyParams}, TContext> => {

const mutationKey = ['patchVersionHistoryFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchVersionHistoryFromKey>>, {key: number;data: VersionHistory;params?: PatchVersionHistoryFromKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  patchVersionHistoryFromKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchVersionHistoryFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof patchVersionHistoryFromKey>>>
    export type PatchVersionHistoryFromKeyMutationBody = VersionHistory
    export type PatchVersionHistoryFromKeyMutationError = void

    export const usePatchVersionHistoryFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchVersionHistoryFromKey>>, TError,{key: number;data: VersionHistory;params?: PatchVersionHistoryFromKeyParams}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchVersionHistoryFromKey>>,
        TError,
        {key: number;data: VersionHistory;params?: PatchVersionHistoryFromKeyParams},
        TContext
      > => {

      const mutationOptions = getPatchVersionHistoryFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteVersionHistoryFromKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/VersionHistory/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteVersionHistoryFromKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>, TError,{key: number}, TContext> => {

const mutationKey = ['deleteVersionHistoryFromKey'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  deleteVersionHistoryFromKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVersionHistoryFromKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>>
    
    export type DeleteVersionHistoryFromKeyMutationError = void

    export const useDeleteVersionHistoryFromKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>, TError,{key: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getDeleteVersionHistoryFromKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    