/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * ATSPM Speed Management Api
 * ATSPM Log Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  TimeOptionsEnum
} from './aTSPMSpeedManagementApi.schemas'
import type {
  CongestionTrackingDto,
  DataQualitySource,
  EffectivenessOfStrategiesDto,
  NameAndIdDto,
  SpeedComplianceDto,
  SpeedOverDistanceDto,
  SpeedOverTimeDto,
  SpeedVariabilityDto,
  SpeedViolationsDto,
  ViolationsAndExtremeViolationsDto
} from './aTSPMSpeedManagementApi.schemas'

export const getGetApiV1AccessCategoryResponseMock = (): NameAndIdDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetApiV1CityResponseMock = (): NameAndIdDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getPostApiV1CongestionTrackingGetReportDataResponseMock = (overrideResponse: Partial< CongestionTrackingDto > = {}): CongestionTrackingDto => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), series: faker.helpers.arrayElement([{average: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), eightyFifth: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined])})), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetApiV1CountyResponseMock = (): NameAndIdDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getPostApiV1DataQualityGetReportDataResponseMock = (): DataQualitySource[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), segments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), sourceId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getPostApiV1EffectivenessOfStrategiesGetReportDataResponseMock = (): EffectivenessOfStrategiesDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({after: faker.helpers.arrayElement([{averageEightyFifthSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), variablitiy: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), before: faker.helpers.arrayElement([{averageEightyFifthSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), variablitiy: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), changeInAverageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInEightyFifthPercentileSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInPercentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInPercentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInVariablitiy: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), weeklyEffectiveness: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageEightyFifthSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), variablitiy: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetApiV1FunctionalTypeResponseMock = (): NameAndIdDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetApiV1RegionResponseMock = (): NameAndIdDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getPostApiV1SpeedComplianceGetReportDataResponseMock = (): SpeedComplianceDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({average: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), avgVsBaseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifthPercentileVsBaseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getPostApiV1SpeedOverDistanceGetReportDataResponseMock = (): SpeedOverDistanceDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({average: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getPostApiV1SpeedOverTimeGetReportDataResponseMock = (overrideResponse: Partial< SpeedOverTimeDto > = {}): SpeedOverTimeDto => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), series: faker.helpers.arrayElement([{average: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), eightyFifth: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined])})), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeOptions: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(TimeOptionsEnum)), undefined]), ...overrideResponse})

export const getPostApiV1SpeedVariabilityGetReportDataResponseMock = (overrideResponse: Partial< SpeedVariabilityDto > = {}): SpeedVariabilityDto => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({avgSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), speedVariability: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getPostApiV1SpeedViolationsGetReportDataResponseMock = (): SpeedViolationsDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dailySpeedViolationsDto: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dailyExtremeViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyFlow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyPercentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyPercentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalExtremeViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalFlow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getPostApiViolationsAndExtremeViolationsGetReportDataResponseMock = (): ViolationsAndExtremeViolationsDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), exteremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), time: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), violations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))


export const getGetApiV1AccessCategoryMockHandler = (overrideResponse?: NameAndIdDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NameAndIdDto[]> | NameAndIdDto[])) => {
  return http.get('*/api/v1/AccessCategory', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetApiV1AccessCategoryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiV1CityMockHandler = (overrideResponse?: NameAndIdDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NameAndIdDto[]> | NameAndIdDto[])) => {
  return http.get('*/api/v1/City', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetApiV1CityResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1CongestionTrackingGetReportDataMockHandler = (overrideResponse?: CongestionTrackingDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CongestionTrackingDto> | CongestionTrackingDto)) => {
  return http.post('*/api/v1/CongestionTracking/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1CongestionTrackingGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiV1CountyMockHandler = (overrideResponse?: NameAndIdDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NameAndIdDto[]> | NameAndIdDto[])) => {
  return http.get('*/api/v1/County', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetApiV1CountyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1DataQualityGetReportDataMockHandler = (overrideResponse?: DataQualitySource[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataQualitySource[]> | DataQualitySource[])) => {
  return http.post('*/api/v1/DataQuality/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1DataQualityGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1EffectivenessOfStrategiesGetReportDataMockHandler = (overrideResponse?: EffectivenessOfStrategiesDto[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EffectivenessOfStrategiesDto[]> | EffectivenessOfStrategiesDto[])) => {
  return http.post('*/api/v1/EffectivenessOfStrategies/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1EffectivenessOfStrategiesGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiV1FunctionalTypeMockHandler = (overrideResponse?: NameAndIdDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NameAndIdDto[]> | NameAndIdDto[])) => {
  return http.get('*/api/v1/FunctionalType', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetApiV1FunctionalTypeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiV1ImpactMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/Impact', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1ImpactMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/Impact', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1ImpactIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/Impact/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPutApiV1ImpactIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/api/v1/Impact/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDeleteApiV1ImpactIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/api/v1/Impact/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPutApiV1ImpactIdSegmentsSegmentIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/api/v1/Impact/:id/segments/:segmentId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDeleteApiV1ImpactIdSegmentsSegmentIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/api/v1/Impact/:id/segments/:segmentId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPutApiV1ImpactIdImpactTypeImpactTypeIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/api/v1/Impact/:id/impactType/:impactTypeId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDeleteApiV1ImpactIdImpactTypeImpactTypeIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/api/v1/Impact/:id/impactType/:impactTypeId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1ImpactTypeMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/ImpactType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1ImpactTypeMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/ImpactType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1ImpactTypeIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/ImpactType/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPutApiV1ImpactTypeIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/api/v1/ImpactType/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDeleteApiV1ImpactTypeIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/api/v1/ImpactType/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1MonthlyAggregationMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/MonthlyAggregation', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDeleteApiV1MonthlyAggregationMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/api/v1/MonthlyAggregation', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1MonthlyAggregationSourceSourceIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/MonthlyAggregation/source/:sourceId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1MonthlyAggregationSegmentMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/MonthlyAggregation/segment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1MonthlyAggregationSegmentsSegmentIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/MonthlyAggregation/segments/:segmentId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1RegionMockHandler = (overrideResponse?: NameAndIdDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NameAndIdDto[]> | NameAndIdDto[])) => {
  return http.get('*/api/v1/Region', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetApiV1RegionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetApiV1SegmentMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/Segment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SegmentMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/Segment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1SegmentSegmentIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/Segment/:segmentId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SegmentSpeedsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/Segment/speeds', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SegmentSegmentIdSpeedsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/Segment/:segmentId/speeds', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SpeedComplianceGetReportDataMockHandler = (overrideResponse?: SpeedComplianceDto[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SpeedComplianceDto[]> | SpeedComplianceDto[])) => {
  return http.post('*/api/v1/SpeedCompliance/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1SpeedComplianceGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1SpeedFromImpactImpactImpactIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/SpeedFromImpact/impact/:impactId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SpeedFromImpactSegmentSegmentIdMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/SpeedFromImpact/segment/:segmentId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetRouteSpeedsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/SpeedManagement/GetRouteSpeeds', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SpeedManagementGetHistoricalSpeedsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/SpeedManagement/GetHistoricalSpeeds', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiV1SpeedOverDistanceGetReportDataMockHandler = (overrideResponse?: SpeedOverDistanceDto[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SpeedOverDistanceDto[]> | SpeedOverDistanceDto[])) => {
  return http.post('*/api/v1/SpeedOverDistance/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1SpeedOverDistanceGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1SpeedOverTimeGetReportDataMockHandler = (overrideResponse?: SpeedOverTimeDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SpeedOverTimeDto> | SpeedOverTimeDto)) => {
  return http.post('*/api/v1/SpeedOverTime/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1SpeedOverTimeGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1SpeedVariabilityGetReportDataMockHandler = (overrideResponse?: SpeedVariabilityDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SpeedVariabilityDto> | SpeedVariabilityDto)) => {
  return http.post('*/api/v1/SpeedVariability/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1SpeedVariabilityGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1SpeedViolationsGetReportDataMockHandler = (overrideResponse?: SpeedViolationsDto[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SpeedViolationsDto[]> | SpeedViolationsDto[])) => {
  return http.post('*/api/v1/SpeedViolations/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiV1SpeedViolationsGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiViolationsAndExtremeViolationsGetReportDataMockHandler = (overrideResponse?: ViolationsAndExtremeViolationsDto[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ViolationsAndExtremeViolationsDto[]> | ViolationsAndExtremeViolationsDto[])) => {
  return http.post('*/api/ViolationsAndExtremeViolations/getReportData', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostApiViolationsAndExtremeViolationsGetReportDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getATSPMSpeedManagementApiMock = () => [
  getGetApiV1AccessCategoryMockHandler(),
  getGetApiV1CityMockHandler(),
  getPostApiV1CongestionTrackingGetReportDataMockHandler(),
  getGetApiV1CountyMockHandler(),
  getPostApiV1DataQualityGetReportDataMockHandler(),
  getPostApiV1EffectivenessOfStrategiesGetReportDataMockHandler(),
  getGetApiV1FunctionalTypeMockHandler(),
  getGetApiV1ImpactMockHandler(),
  getPostApiV1ImpactMockHandler(),
  getGetApiV1ImpactIdMockHandler(),
  getPutApiV1ImpactIdMockHandler(),
  getDeleteApiV1ImpactIdMockHandler(),
  getPutApiV1ImpactIdSegmentsSegmentIdMockHandler(),
  getDeleteApiV1ImpactIdSegmentsSegmentIdMockHandler(),
  getPutApiV1ImpactIdImpactTypeImpactTypeIdMockHandler(),
  getDeleteApiV1ImpactIdImpactTypeImpactTypeIdMockHandler(),
  getGetApiV1ImpactTypeMockHandler(),
  getPostApiV1ImpactTypeMockHandler(),
  getGetApiV1ImpactTypeIdMockHandler(),
  getPutApiV1ImpactTypeIdMockHandler(),
  getDeleteApiV1ImpactTypeIdMockHandler(),
  getPostApiV1MonthlyAggregationMockHandler(),
  getDeleteApiV1MonthlyAggregationMockHandler(),
  getPostApiV1MonthlyAggregationSourceSourceIdMockHandler(),
  getPostApiV1MonthlyAggregationSegmentMockHandler(),
  getGetApiV1MonthlyAggregationSegmentsSegmentIdMockHandler(),
  getGetApiV1RegionMockHandler(),
  getGetApiV1SegmentMockHandler(),
  getPostApiV1SegmentMockHandler(),
  getGetApiV1SegmentSegmentIdMockHandler(),
  getPostApiV1SegmentSpeedsMockHandler(),
  getPostApiV1SegmentSegmentIdSpeedsMockHandler(),
  getPostApiV1SpeedComplianceGetReportDataMockHandler(),
  getPostApiV1SpeedFromImpactImpactImpactIdMockHandler(),
  getPostApiV1SpeedFromImpactSegmentSegmentIdMockHandler(),
  getGetRouteSpeedsMockHandler(),
  getPostApiV1SpeedManagementGetHistoricalSpeedsMockHandler(),
  getPostApiV1SpeedOverDistanceGetReportDataMockHandler(),
  getPostApiV1SpeedOverTimeGetReportDataMockHandler(),
  getPostApiV1SpeedVariabilityGetReportDataMockHandler(),
  getPostApiV1SpeedViolationsGetReportDataMockHandler(),
  getPostApiViolationsAndExtremeViolationsGetReportDataMockHandler()
]
