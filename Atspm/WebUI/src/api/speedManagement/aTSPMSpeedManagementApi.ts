/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * ATSPM Speed Management Api
 * ATSPM Log Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  CongestionTrackingDto,
  CongestionTrackingOptions,
  DeleteApiImpactIdImpactTypeImpactTypeIdParams,
  DeleteApiImpactIdParams,
  DeleteApiImpactIdSegmentsSegmentIdParams,
  DeleteApiImpactTypeIdParams,
  DeleteApiMonthlyAggregationParams,
  GetAccessCategoryParams,
  GetApiImpactIdParams,
  GetApiImpactParams,
  GetApiImpactTypeIdParams,
  GetApiImpactTypeParams,
  GetApiMonthlyAggregationSegmentsSegmentIdParams,
  GetApiSegmentParams,
  GetApiSegmentSegmentIdParams,
  GetCityParams,
  GetCountyParams,
  GetFunctionalTypeParams,
  GetRegionParams,
  GetRouteSpeedsParams,
  HistoricalSpeedOptions,
  Impact,
  ImpactType,
  MonthlyAggregation,
  NameAndIdDto,
  PostApiImpactParams,
  PostApiImpactTypeParams,
  PostApiMonthlyAggregationParams,
  PostApiMonthlyAggregationSegmentParams,
  PostApiSegmentParams,
  PostApiSegmentSegmentIdSpeedsParams,
  PostApiSegmentSpeedsParams,
  PostApiSpeedFromImpactImpactImpactIdParams,
  PostApiSpeedFromImpactSegmentSegmentIdParams,
  PostCongestionTrackingGetReportDataParams,
  PostSpeedManagementGetHistoricalSpeedsParams,
  PostSpeedOverDistanceGetReportDataParams,
  PostSpeedOverTimeGetReportDataParams,
  ProblemDetails,
  PutApiImpactIdImpactTypeImpactTypeIdParams,
  PutApiImpactIdParams,
  PutApiImpactIdSegmentsSegmentIdParams,
  PutApiImpactTypeIdParams,
  RouteSpeedOptions,
  SegmentRequestDto,
  SpeedFromImpactDto,
  SpeedOverDistanceDto,
  SpeedOverDistanceOptions,
  SpeedOverTimeDto,
  SpeedOverTimeOptions
} from './aTSPMSpeedManagementApi.schemas'
import { speedRequest } from '../../lib/axios';



export const getAccessCategory = (
    params?: GetAccessCategoryParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<NameAndIdDto[]>(
      {url: `/AccessCategory`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAccessCategoryQueryKey = (params?: GetAccessCategoryParams,) => {
    return [`/AccessCategory`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAccessCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getAccessCategory>>, TError = ProblemDetails>(params?: GetAccessCategoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccessCategory>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccessCategoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccessCategory>>> = ({ signal }) => getAccessCategory(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAccessCategory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAccessCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getAccessCategory>>>
export type GetAccessCategoryQueryError = ProblemDetails

export const useGetAccessCategory = <TData = Awaited<ReturnType<typeof getAccessCategory>>, TError = ProblemDetails>(
 params?: GetAccessCategoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccessCategory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAccessCategoryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getCity = (
    params?: GetCityParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<NameAndIdDto[]>(
      {url: `/City`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCityQueryKey = (params?: GetCityParams,) => {
    return [`/City`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCityQueryOptions = <TData = Awaited<ReturnType<typeof getCity>>, TError = ProblemDetails>(params?: GetCityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCity>>> = ({ signal }) => getCity(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCityQueryResult = NonNullable<Awaited<ReturnType<typeof getCity>>>
export type GetCityQueryError = ProblemDetails

export const useGetCity = <TData = Awaited<ReturnType<typeof getCity>>, TError = ProblemDetails>(
 params?: GetCityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCityQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postCongestionTrackingGetReportData = (
    congestionTrackingOptions: CongestionTrackingOptions,
    params?: PostCongestionTrackingGetReportDataParams,
 ) => {
      
      
      return speedRequest<CongestionTrackingDto>(
      {url: `/CongestionTracking/getReportData`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: congestionTrackingOptions,
        params
    },
      );
    }
  


export const getPostCongestionTrackingGetReportDataMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCongestionTrackingGetReportData>>, TError,{data: CongestionTrackingOptions;params?: PostCongestionTrackingGetReportDataParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postCongestionTrackingGetReportData>>, TError,{data: CongestionTrackingOptions;params?: PostCongestionTrackingGetReportDataParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCongestionTrackingGetReportData>>, {data: CongestionTrackingOptions;params?: PostCongestionTrackingGetReportDataParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postCongestionTrackingGetReportData(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostCongestionTrackingGetReportDataMutationResult = NonNullable<Awaited<ReturnType<typeof postCongestionTrackingGetReportData>>>
    export type PostCongestionTrackingGetReportDataMutationBody = CongestionTrackingOptions
    export type PostCongestionTrackingGetReportDataMutationError = ProblemDetails

    export const usePostCongestionTrackingGetReportData = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCongestionTrackingGetReportData>>, TError,{data: CongestionTrackingOptions;params?: PostCongestionTrackingGetReportDataParams}, TContext>, }
) => {

      const mutationOptions = getPostCongestionTrackingGetReportDataMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getCounty = (
    params?: GetCountyParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<NameAndIdDto[]>(
      {url: `/County`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCountyQueryKey = (params?: GetCountyParams,) => {
    return [`/County`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCountyQueryOptions = <TData = Awaited<ReturnType<typeof getCounty>>, TError = ProblemDetails>(params?: GetCountyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCounty>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCountyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCounty>>> = ({ signal }) => getCounty(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCounty>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCountyQueryResult = NonNullable<Awaited<ReturnType<typeof getCounty>>>
export type GetCountyQueryError = ProblemDetails

export const useGetCounty = <TData = Awaited<ReturnType<typeof getCounty>>, TError = ProblemDetails>(
 params?: GetCountyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCounty>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCountyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getFunctionalType = (
    params?: GetFunctionalTypeParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<NameAndIdDto[]>(
      {url: `/FunctionalType`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFunctionalTypeQueryKey = (params?: GetFunctionalTypeParams,) => {
    return [`/FunctionalType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFunctionalTypeQueryOptions = <TData = Awaited<ReturnType<typeof getFunctionalType>>, TError = ProblemDetails>(params?: GetFunctionalTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFunctionalType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFunctionalTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFunctionalType>>> = ({ signal }) => getFunctionalType(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFunctionalType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFunctionalTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getFunctionalType>>>
export type GetFunctionalTypeQueryError = ProblemDetails

export const useGetFunctionalType = <TData = Awaited<ReturnType<typeof getFunctionalType>>, TError = ProblemDetails>(
 params?: GetFunctionalTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFunctionalType>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFunctionalTypeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiImpact = (
    params?: GetApiImpactParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiImpactQueryKey = (params?: GetApiImpactParams,) => {
    return [`/api/Impact`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiImpactQueryOptions = <TData = Awaited<ReturnType<typeof getApiImpact>>, TError = ProblemDetails>(params?: GetApiImpactParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpact>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImpactQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImpact>>> = ({ signal }) => getApiImpact(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiImpact>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiImpactQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImpact>>>
export type GetApiImpactQueryError = ProblemDetails

export const useGetApiImpact = <TData = Awaited<ReturnType<typeof getApiImpact>>, TError = ProblemDetails>(
 params?: GetApiImpactParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpact>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImpactQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiImpact = (
    impact: Impact,
    params?: PostApiImpactParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: impact,
        params
    },
      );
    }
  


export const getPostApiImpactMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImpact>>, TError,{data: Impact;params?: PostApiImpactParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImpact>>, TError,{data: Impact;params?: PostApiImpactParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImpact>>, {data: Impact;params?: PostApiImpactParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiImpact(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiImpactMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImpact>>>
    export type PostApiImpactMutationBody = Impact
    export type PostApiImpactMutationError = ProblemDetails

    export const usePostApiImpact = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImpact>>, TError,{data: Impact;params?: PostApiImpactParams}, TContext>, }
) => {

      const mutationOptions = getPostApiImpactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiImpactId = (
    id: string,
    params?: GetApiImpactIdParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiImpactIdQueryKey = (id: string,
    params?: GetApiImpactIdParams,) => {
    return [`/api/Impact/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiImpactIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiImpactId>>, TError = ProblemDetails>(id: string,
    params?: GetApiImpactIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpactId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImpactIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImpactId>>> = ({ signal }) => getApiImpactId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiImpactId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiImpactIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImpactId>>>
export type GetApiImpactIdQueryError = ProblemDetails

export const useGetApiImpactId = <TData = Awaited<ReturnType<typeof getApiImpactId>>, TError = ProblemDetails>(
 id: string,
    params?: GetApiImpactIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpactId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImpactIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiImpactId = (
    id: string,
    impact: Impact,
    params?: PutApiImpactIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: impact,
        params
    },
      );
    }
  


export const getPutApiImpactIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactId>>, TError,{id: string;data: Impact;params?: PutApiImpactIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiImpactId>>, TError,{id: string;data: Impact;params?: PutApiImpactIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiImpactId>>, {id: string;data: Impact;params?: PutApiImpactIdParams}> = (props) => {
          const {id,data,params} = props ?? {};

          return  putApiImpactId(id,data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiImpactIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiImpactId>>>
    export type PutApiImpactIdMutationBody = Impact
    export type PutApiImpactIdMutationError = ProblemDetails

    export const usePutApiImpactId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactId>>, TError,{id: string;data: Impact;params?: PutApiImpactIdParams}, TContext>, }
) => {

      const mutationOptions = getPutApiImpactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiImpactId = (
    id: string,
    params?: DeleteApiImpactIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteApiImpactIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactId>>, TError,{id: string;params?: DeleteApiImpactIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactId>>, TError,{id: string;params?: DeleteApiImpactIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImpactId>>, {id: string;params?: DeleteApiImpactIdParams}> = (props) => {
          const {id,params} = props ?? {};

          return  deleteApiImpactId(id,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImpactIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImpactId>>>
    
    export type DeleteApiImpactIdMutationError = ProblemDetails

    export const useDeleteApiImpactId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactId>>, TError,{id: string;params?: DeleteApiImpactIdParams}, TContext>, }
) => {

      const mutationOptions = getDeleteApiImpactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiImpactIdSegmentsSegmentId = (
    id: string,
    segmentId: string,
    params?: PutApiImpactIdSegmentsSegmentIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}/segments/${segmentId}`, method: 'PUT',
        params
    },
      );
    }
  


export const getPutApiImpactIdSegmentsSegmentIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactIdSegmentsSegmentId>>, TError,{id: string;segmentId: string;params?: PutApiImpactIdSegmentsSegmentIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiImpactIdSegmentsSegmentId>>, TError,{id: string;segmentId: string;params?: PutApiImpactIdSegmentsSegmentIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiImpactIdSegmentsSegmentId>>, {id: string;segmentId: string;params?: PutApiImpactIdSegmentsSegmentIdParams}> = (props) => {
          const {id,segmentId,params} = props ?? {};

          return  putApiImpactIdSegmentsSegmentId(id,segmentId,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiImpactIdSegmentsSegmentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiImpactIdSegmentsSegmentId>>>
    
    export type PutApiImpactIdSegmentsSegmentIdMutationError = ProblemDetails

    export const usePutApiImpactIdSegmentsSegmentId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactIdSegmentsSegmentId>>, TError,{id: string;segmentId: string;params?: PutApiImpactIdSegmentsSegmentIdParams}, TContext>, }
) => {

      const mutationOptions = getPutApiImpactIdSegmentsSegmentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiImpactIdSegmentsSegmentId = (
    id: string,
    segmentId: string,
    params?: DeleteApiImpactIdSegmentsSegmentIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}/segments/${segmentId}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteApiImpactIdSegmentsSegmentIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactIdSegmentsSegmentId>>, TError,{id: string;segmentId: string;params?: DeleteApiImpactIdSegmentsSegmentIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactIdSegmentsSegmentId>>, TError,{id: string;segmentId: string;params?: DeleteApiImpactIdSegmentsSegmentIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImpactIdSegmentsSegmentId>>, {id: string;segmentId: string;params?: DeleteApiImpactIdSegmentsSegmentIdParams}> = (props) => {
          const {id,segmentId,params} = props ?? {};

          return  deleteApiImpactIdSegmentsSegmentId(id,segmentId,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImpactIdSegmentsSegmentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImpactIdSegmentsSegmentId>>>
    
    export type DeleteApiImpactIdSegmentsSegmentIdMutationError = ProblemDetails

    export const useDeleteApiImpactIdSegmentsSegmentId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactIdSegmentsSegmentId>>, TError,{id: string;segmentId: string;params?: DeleteApiImpactIdSegmentsSegmentIdParams}, TContext>, }
) => {

      const mutationOptions = getDeleteApiImpactIdSegmentsSegmentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiImpactIdImpactTypeImpactTypeId = (
    id: string,
    impactTypeId: string,
    params?: PutApiImpactIdImpactTypeImpactTypeIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}/impactType/${impactTypeId}`, method: 'PUT',
        params
    },
      );
    }
  


export const getPutApiImpactIdImpactTypeImpactTypeIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactIdImpactTypeImpactTypeId>>, TError,{id: string;impactTypeId: string;params?: PutApiImpactIdImpactTypeImpactTypeIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiImpactIdImpactTypeImpactTypeId>>, TError,{id: string;impactTypeId: string;params?: PutApiImpactIdImpactTypeImpactTypeIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiImpactIdImpactTypeImpactTypeId>>, {id: string;impactTypeId: string;params?: PutApiImpactIdImpactTypeImpactTypeIdParams}> = (props) => {
          const {id,impactTypeId,params} = props ?? {};

          return  putApiImpactIdImpactTypeImpactTypeId(id,impactTypeId,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiImpactIdImpactTypeImpactTypeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiImpactIdImpactTypeImpactTypeId>>>
    
    export type PutApiImpactIdImpactTypeImpactTypeIdMutationError = ProblemDetails

    export const usePutApiImpactIdImpactTypeImpactTypeId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactIdImpactTypeImpactTypeId>>, TError,{id: string;impactTypeId: string;params?: PutApiImpactIdImpactTypeImpactTypeIdParams}, TContext>, }
) => {

      const mutationOptions = getPutApiImpactIdImpactTypeImpactTypeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiImpactIdImpactTypeImpactTypeId = (
    id: string,
    impactTypeId: string,
    params?: DeleteApiImpactIdImpactTypeImpactTypeIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Impact/${id}/impactType/${impactTypeId}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteApiImpactIdImpactTypeImpactTypeIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactIdImpactTypeImpactTypeId>>, TError,{id: string;impactTypeId: string;params?: DeleteApiImpactIdImpactTypeImpactTypeIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactIdImpactTypeImpactTypeId>>, TError,{id: string;impactTypeId: string;params?: DeleteApiImpactIdImpactTypeImpactTypeIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImpactIdImpactTypeImpactTypeId>>, {id: string;impactTypeId: string;params?: DeleteApiImpactIdImpactTypeImpactTypeIdParams}> = (props) => {
          const {id,impactTypeId,params} = props ?? {};

          return  deleteApiImpactIdImpactTypeImpactTypeId(id,impactTypeId,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImpactIdImpactTypeImpactTypeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImpactIdImpactTypeImpactTypeId>>>
    
    export type DeleteApiImpactIdImpactTypeImpactTypeIdMutationError = ProblemDetails

    export const useDeleteApiImpactIdImpactTypeImpactTypeId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactIdImpactTypeImpactTypeId>>, TError,{id: string;impactTypeId: string;params?: DeleteApiImpactIdImpactTypeImpactTypeIdParams}, TContext>, }
) => {

      const mutationOptions = getDeleteApiImpactIdImpactTypeImpactTypeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiImpactType = (
    params?: GetApiImpactTypeParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/ImpactType`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiImpactTypeQueryKey = (params?: GetApiImpactTypeParams,) => {
    return [`/api/ImpactType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiImpactTypeQueryOptions = <TData = Awaited<ReturnType<typeof getApiImpactType>>, TError = ProblemDetails>(params?: GetApiImpactTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpactType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImpactTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImpactType>>> = ({ signal }) => getApiImpactType(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiImpactType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiImpactTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImpactType>>>
export type GetApiImpactTypeQueryError = ProblemDetails

export const useGetApiImpactType = <TData = Awaited<ReturnType<typeof getApiImpactType>>, TError = ProblemDetails>(
 params?: GetApiImpactTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpactType>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImpactTypeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiImpactType = (
    impactType: ImpactType,
    params?: PostApiImpactTypeParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/ImpactType`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: impactType,
        params
    },
      );
    }
  


export const getPostApiImpactTypeMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImpactType>>, TError,{data: ImpactType;params?: PostApiImpactTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImpactType>>, TError,{data: ImpactType;params?: PostApiImpactTypeParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImpactType>>, {data: ImpactType;params?: PostApiImpactTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiImpactType(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiImpactTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImpactType>>>
    export type PostApiImpactTypeMutationBody = ImpactType
    export type PostApiImpactTypeMutationError = ProblemDetails

    export const usePostApiImpactType = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImpactType>>, TError,{data: ImpactType;params?: PostApiImpactTypeParams}, TContext>, }
) => {

      const mutationOptions = getPostApiImpactTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiImpactTypeId = (
    id: string,
    params?: GetApiImpactTypeIdParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/ImpactType/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiImpactTypeIdQueryKey = (id: string,
    params?: GetApiImpactTypeIdParams,) => {
    return [`/api/ImpactType/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiImpactTypeIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiImpactTypeId>>, TError = ProblemDetails>(id: string,
    params?: GetApiImpactTypeIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpactTypeId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImpactTypeIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImpactTypeId>>> = ({ signal }) => getApiImpactTypeId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiImpactTypeId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiImpactTypeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImpactTypeId>>>
export type GetApiImpactTypeIdQueryError = ProblemDetails

export const useGetApiImpactTypeId = <TData = Awaited<ReturnType<typeof getApiImpactTypeId>>, TError = ProblemDetails>(
 id: string,
    params?: GetApiImpactTypeIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImpactTypeId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImpactTypeIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiImpactTypeId = (
    id: string,
    impactType: ImpactType,
    params?: PutApiImpactTypeIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/ImpactType/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: impactType,
        params
    },
      );
    }
  


export const getPutApiImpactTypeIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactTypeId>>, TError,{id: string;data: ImpactType;params?: PutApiImpactTypeIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiImpactTypeId>>, TError,{id: string;data: ImpactType;params?: PutApiImpactTypeIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiImpactTypeId>>, {id: string;data: ImpactType;params?: PutApiImpactTypeIdParams}> = (props) => {
          const {id,data,params} = props ?? {};

          return  putApiImpactTypeId(id,data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiImpactTypeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiImpactTypeId>>>
    export type PutApiImpactTypeIdMutationBody = ImpactType
    export type PutApiImpactTypeIdMutationError = ProblemDetails

    export const usePutApiImpactTypeId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiImpactTypeId>>, TError,{id: string;data: ImpactType;params?: PutApiImpactTypeIdParams}, TContext>, }
) => {

      const mutationOptions = getPutApiImpactTypeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiImpactTypeId = (
    id: string,
    params?: DeleteApiImpactTypeIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/ImpactType/${id}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteApiImpactTypeIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactTypeId>>, TError,{id: string;params?: DeleteApiImpactTypeIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactTypeId>>, TError,{id: string;params?: DeleteApiImpactTypeIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImpactTypeId>>, {id: string;params?: DeleteApiImpactTypeIdParams}> = (props) => {
          const {id,params} = props ?? {};

          return  deleteApiImpactTypeId(id,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImpactTypeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImpactTypeId>>>
    
    export type DeleteApiImpactTypeIdMutationError = ProblemDetails

    export const useDeleteApiImpactTypeId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImpactTypeId>>, TError,{id: string;params?: DeleteApiImpactTypeIdParams}, TContext>, }
) => {

      const mutationOptions = getDeleteApiImpactTypeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiMonthlyAggregation = (
    params?: PostApiMonthlyAggregationParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/MonthlyAggregation`, method: 'POST',
        params
    },
      );
    }
  


export const getPostApiMonthlyAggregationMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMonthlyAggregation>>, TError,{params?: PostApiMonthlyAggregationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiMonthlyAggregation>>, TError,{params?: PostApiMonthlyAggregationParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiMonthlyAggregation>>, {params?: PostApiMonthlyAggregationParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiMonthlyAggregation(params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiMonthlyAggregationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiMonthlyAggregation>>>
    
    export type PostApiMonthlyAggregationMutationError = ProblemDetails

    export const usePostApiMonthlyAggregation = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMonthlyAggregation>>, TError,{params?: PostApiMonthlyAggregationParams}, TContext>, }
) => {

      const mutationOptions = getPostApiMonthlyAggregationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiMonthlyAggregation = (
    params?: DeleteApiMonthlyAggregationParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/MonthlyAggregation`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteApiMonthlyAggregationMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiMonthlyAggregation>>, TError,{params?: DeleteApiMonthlyAggregationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiMonthlyAggregation>>, TError,{params?: DeleteApiMonthlyAggregationParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiMonthlyAggregation>>, {params?: DeleteApiMonthlyAggregationParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiMonthlyAggregation(params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiMonthlyAggregationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiMonthlyAggregation>>>
    
    export type DeleteApiMonthlyAggregationMutationError = ProblemDetails

    export const useDeleteApiMonthlyAggregation = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiMonthlyAggregation>>, TError,{params?: DeleteApiMonthlyAggregationParams}, TContext>, }
) => {

      const mutationOptions = getDeleteApiMonthlyAggregationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiMonthlyAggregationSegment = (
    monthlyAggregation: MonthlyAggregation,
    params?: PostApiMonthlyAggregationSegmentParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/MonthlyAggregation/segment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: monthlyAggregation,
        params
    },
      );
    }
  


export const getPostApiMonthlyAggregationSegmentMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMonthlyAggregationSegment>>, TError,{data: MonthlyAggregation;params?: PostApiMonthlyAggregationSegmentParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiMonthlyAggregationSegment>>, TError,{data: MonthlyAggregation;params?: PostApiMonthlyAggregationSegmentParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiMonthlyAggregationSegment>>, {data: MonthlyAggregation;params?: PostApiMonthlyAggregationSegmentParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiMonthlyAggregationSegment(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiMonthlyAggregationSegmentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiMonthlyAggregationSegment>>>
    export type PostApiMonthlyAggregationSegmentMutationBody = MonthlyAggregation
    export type PostApiMonthlyAggregationSegmentMutationError = ProblemDetails

    export const usePostApiMonthlyAggregationSegment = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMonthlyAggregationSegment>>, TError,{data: MonthlyAggregation;params?: PostApiMonthlyAggregationSegmentParams}, TContext>, }
) => {

      const mutationOptions = getPostApiMonthlyAggregationSegmentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiMonthlyAggregationSegmentsSegmentId = (
    segmentId: string,
    params?: GetApiMonthlyAggregationSegmentsSegmentIdParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/MonthlyAggregation/segments/${segmentId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiMonthlyAggregationSegmentsSegmentIdQueryKey = (segmentId: string,
    params?: GetApiMonthlyAggregationSegmentsSegmentIdParams,) => {
    return [`/api/MonthlyAggregation/segments/${segmentId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiMonthlyAggregationSegmentsSegmentIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>, TError = ProblemDetails>(segmentId: string,
    params?: GetApiMonthlyAggregationSegmentsSegmentIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMonthlyAggregationSegmentsSegmentIdQueryKey(segmentId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>> = ({ signal }) => getApiMonthlyAggregationSegmentsSegmentId(segmentId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(segmentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiMonthlyAggregationSegmentsSegmentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>>
export type GetApiMonthlyAggregationSegmentsSegmentIdQueryError = ProblemDetails

export const useGetApiMonthlyAggregationSegmentsSegmentId = <TData = Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>, TError = ProblemDetails>(
 segmentId: string,
    params?: GetApiMonthlyAggregationSegmentsSegmentIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiMonthlyAggregationSegmentsSegmentId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiMonthlyAggregationSegmentsSegmentIdQueryOptions(segmentId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getRegion = (
    params?: GetRegionParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<NameAndIdDto[]>(
      {url: `/Region`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRegionQueryKey = (params?: GetRegionParams,) => {
    return [`/Region`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRegionQueryOptions = <TData = Awaited<ReturnType<typeof getRegion>>, TError = ProblemDetails>(params?: GetRegionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegion>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegion>>> = ({ signal }) => getRegion(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegion>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegionQueryResult = NonNullable<Awaited<ReturnType<typeof getRegion>>>
export type GetRegionQueryError = ProblemDetails

export const useGetRegion = <TData = Awaited<ReturnType<typeof getRegion>>, TError = ProblemDetails>(
 params?: GetRegionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRegion>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRegionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiSegment = (
    params?: GetApiSegmentParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Segment`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiSegmentQueryKey = (params?: GetApiSegmentParams,) => {
    return [`/api/Segment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiSegmentQueryOptions = <TData = Awaited<ReturnType<typeof getApiSegment>>, TError = ProblemDetails>(params?: GetApiSegmentParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSegment>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiSegmentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSegment>>> = ({ signal }) => getApiSegment(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiSegment>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiSegmentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSegment>>>
export type GetApiSegmentQueryError = ProblemDetails

export const useGetApiSegment = <TData = Awaited<ReturnType<typeof getApiSegment>>, TError = ProblemDetails>(
 params?: GetApiSegmentParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSegment>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiSegmentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiSegment = (
    postApiSegmentBody: string[],
    params?: PostApiSegmentParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Segment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiSegmentBody,
        params
    },
      );
    }
  


export const getPostApiSegmentMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSegment>>, TError,{data: string[];params?: PostApiSegmentParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSegment>>, TError,{data: string[];params?: PostApiSegmentParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSegment>>, {data: string[];params?: PostApiSegmentParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiSegment(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiSegmentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSegment>>>
    export type PostApiSegmentMutationBody = string[]
    export type PostApiSegmentMutationError = ProblemDetails

    export const usePostApiSegment = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSegment>>, TError,{data: string[];params?: PostApiSegmentParams}, TContext>, }
) => {

      const mutationOptions = getPostApiSegmentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiSegmentSegmentId = (
    segmentId: string,
    params?: GetApiSegmentSegmentIdParams,
 signal?: AbortSignal
) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Segment/${segmentId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiSegmentSegmentIdQueryKey = (segmentId: string,
    params?: GetApiSegmentSegmentIdParams,) => {
    return [`/api/Segment/${segmentId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiSegmentSegmentIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiSegmentSegmentId>>, TError = ProblemDetails>(segmentId: string,
    params?: GetApiSegmentSegmentIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSegmentSegmentId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiSegmentSegmentIdQueryKey(segmentId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSegmentSegmentId>>> = ({ signal }) => getApiSegmentSegmentId(segmentId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(segmentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiSegmentSegmentId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiSegmentSegmentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSegmentSegmentId>>>
export type GetApiSegmentSegmentIdQueryError = ProblemDetails

export const useGetApiSegmentSegmentId = <TData = Awaited<ReturnType<typeof getApiSegmentSegmentId>>, TError = ProblemDetails>(
 segmentId: string,
    params?: GetApiSegmentSegmentIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSegmentSegmentId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiSegmentSegmentIdQueryOptions(segmentId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiSegmentSpeeds = (
    segmentRequestDto: SegmentRequestDto,
    params?: PostApiSegmentSpeedsParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Segment/speeds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: segmentRequestDto,
        params
    },
      );
    }
  


export const getPostApiSegmentSpeedsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSegmentSpeeds>>, TError,{data: SegmentRequestDto;params?: PostApiSegmentSpeedsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSegmentSpeeds>>, TError,{data: SegmentRequestDto;params?: PostApiSegmentSpeedsParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSegmentSpeeds>>, {data: SegmentRequestDto;params?: PostApiSegmentSpeedsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiSegmentSpeeds(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiSegmentSpeedsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSegmentSpeeds>>>
    export type PostApiSegmentSpeedsMutationBody = SegmentRequestDto
    export type PostApiSegmentSpeedsMutationError = ProblemDetails

    export const usePostApiSegmentSpeeds = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSegmentSpeeds>>, TError,{data: SegmentRequestDto;params?: PostApiSegmentSpeedsParams}, TContext>, }
) => {

      const mutationOptions = getPostApiSegmentSpeedsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiSegmentSegmentIdSpeeds = (
    segmentId: string,
    segmentRequestDto: SegmentRequestDto,
    params?: PostApiSegmentSegmentIdSpeedsParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/Segment/${segmentId}/speeds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: segmentRequestDto,
        params
    },
      );
    }
  


export const getPostApiSegmentSegmentIdSpeedsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSegmentSegmentIdSpeeds>>, TError,{segmentId: string;data: SegmentRequestDto;params?: PostApiSegmentSegmentIdSpeedsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSegmentSegmentIdSpeeds>>, TError,{segmentId: string;data: SegmentRequestDto;params?: PostApiSegmentSegmentIdSpeedsParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSegmentSegmentIdSpeeds>>, {segmentId: string;data: SegmentRequestDto;params?: PostApiSegmentSegmentIdSpeedsParams}> = (props) => {
          const {segmentId,data,params} = props ?? {};

          return  postApiSegmentSegmentIdSpeeds(segmentId,data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiSegmentSegmentIdSpeedsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSegmentSegmentIdSpeeds>>>
    export type PostApiSegmentSegmentIdSpeedsMutationBody = SegmentRequestDto
    export type PostApiSegmentSegmentIdSpeedsMutationError = ProblemDetails

    export const usePostApiSegmentSegmentIdSpeeds = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSegmentSegmentIdSpeeds>>, TError,{segmentId: string;data: SegmentRequestDto;params?: PostApiSegmentSegmentIdSpeedsParams}, TContext>, }
) => {

      const mutationOptions = getPostApiSegmentSegmentIdSpeedsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiSpeedFromImpactImpactImpactId = (
    impactId: string,
    speedFromImpactDto: SpeedFromImpactDto,
    params?: PostApiSpeedFromImpactImpactImpactIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/SpeedFromImpact/impact/${impactId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: speedFromImpactDto,
        params
    },
      );
    }
  


export const getPostApiSpeedFromImpactImpactImpactIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSpeedFromImpactImpactImpactId>>, TError,{impactId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactImpactImpactIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSpeedFromImpactImpactImpactId>>, TError,{impactId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactImpactImpactIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSpeedFromImpactImpactImpactId>>, {impactId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactImpactImpactIdParams}> = (props) => {
          const {impactId,data,params} = props ?? {};

          return  postApiSpeedFromImpactImpactImpactId(impactId,data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiSpeedFromImpactImpactImpactIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSpeedFromImpactImpactImpactId>>>
    export type PostApiSpeedFromImpactImpactImpactIdMutationBody = SpeedFromImpactDto
    export type PostApiSpeedFromImpactImpactImpactIdMutationError = ProblemDetails

    export const usePostApiSpeedFromImpactImpactImpactId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSpeedFromImpactImpactImpactId>>, TError,{impactId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactImpactImpactIdParams}, TContext>, }
) => {

      const mutationOptions = getPostApiSpeedFromImpactImpactImpactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiSpeedFromImpactSegmentSegmentId = (
    segmentId: string,
    speedFromImpactDto: SpeedFromImpactDto,
    params?: PostApiSpeedFromImpactSegmentSegmentIdParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/api/SpeedFromImpact/segment/${segmentId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: speedFromImpactDto,
        params
    },
      );
    }
  


export const getPostApiSpeedFromImpactSegmentSegmentIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSpeedFromImpactSegmentSegmentId>>, TError,{segmentId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactSegmentSegmentIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSpeedFromImpactSegmentSegmentId>>, TError,{segmentId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactSegmentSegmentIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSpeedFromImpactSegmentSegmentId>>, {segmentId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactSegmentSegmentIdParams}> = (props) => {
          const {segmentId,data,params} = props ?? {};

          return  postApiSpeedFromImpactSegmentSegmentId(segmentId,data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiSpeedFromImpactSegmentSegmentIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSpeedFromImpactSegmentSegmentId>>>
    export type PostApiSpeedFromImpactSegmentSegmentIdMutationBody = SpeedFromImpactDto
    export type PostApiSpeedFromImpactSegmentSegmentIdMutationError = ProblemDetails

    export const usePostApiSpeedFromImpactSegmentSegmentId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSpeedFromImpactSegmentSegmentId>>, TError,{segmentId: string;data: SpeedFromImpactDto;params?: PostApiSpeedFromImpactSegmentSegmentIdParams}, TContext>, }
) => {

      const mutationOptions = getPostApiSpeedFromImpactSegmentSegmentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getRouteSpeeds = (
    routeSpeedOptions: RouteSpeedOptions,
    params?: GetRouteSpeedsParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/SpeedManagement/GetRouteSpeeds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: routeSpeedOptions,
        params
    },
      );
    }
  


export const getGetRouteSpeedsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getRouteSpeeds>>, TError,{data: RouteSpeedOptions;params?: GetRouteSpeedsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getRouteSpeeds>>, TError,{data: RouteSpeedOptions;params?: GetRouteSpeedsParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getRouteSpeeds>>, {data: RouteSpeedOptions;params?: GetRouteSpeedsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  getRouteSpeeds(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type GetRouteSpeedsMutationResult = NonNullable<Awaited<ReturnType<typeof getRouteSpeeds>>>
    export type GetRouteSpeedsMutationBody = RouteSpeedOptions
    export type GetRouteSpeedsMutationError = ProblemDetails

    export const useGetRouteSpeeds = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getRouteSpeeds>>, TError,{data: RouteSpeedOptions;params?: GetRouteSpeedsParams}, TContext>, }
) => {

      const mutationOptions = getGetRouteSpeedsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postSpeedManagementGetHistoricalSpeeds = (
    historicalSpeedOptions: HistoricalSpeedOptions,
    params?: PostSpeedManagementGetHistoricalSpeedsParams,
 ) => {
      
      
      return speedRequest<unknown>(
      {url: `/SpeedManagement/GetHistoricalSpeeds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: historicalSpeedOptions,
        params
    },
      );
    }
  


export const getPostSpeedManagementGetHistoricalSpeedsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSpeedManagementGetHistoricalSpeeds>>, TError,{data: HistoricalSpeedOptions;params?: PostSpeedManagementGetHistoricalSpeedsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postSpeedManagementGetHistoricalSpeeds>>, TError,{data: HistoricalSpeedOptions;params?: PostSpeedManagementGetHistoricalSpeedsParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSpeedManagementGetHistoricalSpeeds>>, {data: HistoricalSpeedOptions;params?: PostSpeedManagementGetHistoricalSpeedsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postSpeedManagementGetHistoricalSpeeds(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostSpeedManagementGetHistoricalSpeedsMutationResult = NonNullable<Awaited<ReturnType<typeof postSpeedManagementGetHistoricalSpeeds>>>
    export type PostSpeedManagementGetHistoricalSpeedsMutationBody = HistoricalSpeedOptions
    export type PostSpeedManagementGetHistoricalSpeedsMutationError = ProblemDetails

    export const usePostSpeedManagementGetHistoricalSpeeds = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSpeedManagementGetHistoricalSpeeds>>, TError,{data: HistoricalSpeedOptions;params?: PostSpeedManagementGetHistoricalSpeedsParams}, TContext>, }
) => {

      const mutationOptions = getPostSpeedManagementGetHistoricalSpeedsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postSpeedOverDistanceGetReportData = (
    speedOverDistanceOptions: SpeedOverDistanceOptions,
    params?: PostSpeedOverDistanceGetReportDataParams,
 ) => {
      
      
      return speedRequest<SpeedOverDistanceDto[]>(
      {url: `/SpeedOverDistance/getReportData`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: speedOverDistanceOptions,
        params
    },
      );
    }
  


export const getPostSpeedOverDistanceGetReportDataMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSpeedOverDistanceGetReportData>>, TError,{data: SpeedOverDistanceOptions;params?: PostSpeedOverDistanceGetReportDataParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postSpeedOverDistanceGetReportData>>, TError,{data: SpeedOverDistanceOptions;params?: PostSpeedOverDistanceGetReportDataParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSpeedOverDistanceGetReportData>>, {data: SpeedOverDistanceOptions;params?: PostSpeedOverDistanceGetReportDataParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postSpeedOverDistanceGetReportData(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostSpeedOverDistanceGetReportDataMutationResult = NonNullable<Awaited<ReturnType<typeof postSpeedOverDistanceGetReportData>>>
    export type PostSpeedOverDistanceGetReportDataMutationBody = SpeedOverDistanceOptions
    export type PostSpeedOverDistanceGetReportDataMutationError = ProblemDetails

    export const usePostSpeedOverDistanceGetReportData = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSpeedOverDistanceGetReportData>>, TError,{data: SpeedOverDistanceOptions;params?: PostSpeedOverDistanceGetReportDataParams}, TContext>, }
) => {

      const mutationOptions = getPostSpeedOverDistanceGetReportDataMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postSpeedOverTimeGetReportData = (
    speedOverTimeOptions: SpeedOverTimeOptions,
    params?: PostSpeedOverTimeGetReportDataParams,
 ) => {
      
      
      return speedRequest<SpeedOverTimeDto>(
      {url: `/SpeedOverTime/getReportData`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: speedOverTimeOptions,
        params
    },
      );
    }
  


export const getPostSpeedOverTimeGetReportDataMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSpeedOverTimeGetReportData>>, TError,{data: SpeedOverTimeOptions;params?: PostSpeedOverTimeGetReportDataParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postSpeedOverTimeGetReportData>>, TError,{data: SpeedOverTimeOptions;params?: PostSpeedOverTimeGetReportDataParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSpeedOverTimeGetReportData>>, {data: SpeedOverTimeOptions;params?: PostSpeedOverTimeGetReportDataParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postSpeedOverTimeGetReportData(data,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostSpeedOverTimeGetReportDataMutationResult = NonNullable<Awaited<ReturnType<typeof postSpeedOverTimeGetReportData>>>
    export type PostSpeedOverTimeGetReportDataMutationBody = SpeedOverTimeOptions
    export type PostSpeedOverTimeGetReportDataMutationError = ProblemDetails

    export const usePostSpeedOverTimeGetReportData = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSpeedOverTimeGetReportData>>, TError,{data: SpeedOverTimeOptions;params?: PostSpeedOverTimeGetReportDataParams}, TContext>, }
) => {

      const mutationOptions = getPostSpeedOverTimeGetReportDataMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
