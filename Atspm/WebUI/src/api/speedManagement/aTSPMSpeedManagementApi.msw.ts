/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * ATSPM Speed Management Api
 * ATSPM Log Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getGetApiV1AccessCategoryMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetApiV1CityMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getPostApiV1CongestionTrackingGetReportDataMock = () => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), series: faker.helpers.arrayElement([{average: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), eightyFifth: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined])})), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetApiV1CountyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getPostApiV1DataQualityGetReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), segments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), sourceId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getPostApiV1EffectivenessOfStrategiesGetReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({after: faker.helpers.arrayElement([{averageEightyFifthSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), variability: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), before: faker.helpers.arrayElement([{averageEightyFifthSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), variability: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), changeInAverageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInEightyFifthPercentileSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInPercentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInPercentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), changeInVariability: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), weeklyEffectiveness: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageEightyFifthSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), variability: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetApiV1FunctionalTypeMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetApiV1RegionMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getPostApiV1SpeedComplianceGetReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({average: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), avgVsBaseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifthPercentileVsBaseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getPostApiV1SpeedOverDistanceGetReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({average: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getPostApiV1SpeedOverTimeGetReportDataMock = () => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), series: faker.helpers.arrayElement([{average: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), eightyFifth: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined])})), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeOptions: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getPostApiV1SpeedVariabilityGetReportDataMock = () => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({avgSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), speedVariability: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getPostApiV1SpeedViolationsGetReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dailySpeedViolationsDto: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dailyExtremeViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyFlow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyPercentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyPercentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dailyViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), percentExtremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalExtremeViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalFlow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalViolationsCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getPostApiViolationsAndExtremeViolationsGetReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({endingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), exteremeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), flow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), segmentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), segmentName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), startingMilePoint: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), time: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), violations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getATSPMSpeedManagementApiMock = () => [
http.get('*/api/v1/AccessCategory', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApiV1AccessCategoryMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/City', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApiV1CityMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/CongestionTracking/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1CongestionTrackingGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/County', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApiV1CountyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/DataQuality/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1DataQualityGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/EffectivenessOfStrategies/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1EffectivenessOfStrategiesGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/FunctionalType', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApiV1FunctionalTypeMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Impact', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Impact', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Impact/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Impact/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Impact/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Impact/:id/segments/:segmentId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Impact/:id/segments/:segmentId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Impact/:id/impactType/:impactTypeId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Impact/:id/impactType/:impactTypeId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/ImpactType', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/ImpactType', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/ImpactType/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/ImpactType/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/ImpactType/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MonthlyAggregation', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MonthlyAggregation', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MonthlyAggregation/latest/:monthAggClassification/:timePeriod', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MonthlyAggregation/hotspots', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MonthlyAggregation/source/:sourceId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MonthlyAggregation/segment', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MonthlyAggregation/segments/:segmentId/:monthAggClassification/:timePeriod', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MonthlyAggregation/filtering-time-periods', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MonthlyAggregation/month-agg-classifications', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MonthlyAggregation/speed-category-filters', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Region', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApiV1RegionMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Segment', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Segment', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Segment/AllSegments', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Segment/:segmentId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Segment/speeds', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Segment/:segmentId/speeds', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedCompliance/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1SpeedComplianceGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedFromImpact/impact/:impactId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedFromImpact/segment/:segmentId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedManagement/GetRouteSpeeds', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedOverDistance/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1SpeedOverDistanceGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedOverTime/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1SpeedOverTimeGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedVariability/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1SpeedVariabilityGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SpeedViolations/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiV1SpeedViolationsGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/ViolationsAndExtremeViolations/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getPostApiViolationsAndExtremeViolationsGetReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]
